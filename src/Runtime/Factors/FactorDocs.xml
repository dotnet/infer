<?xml version="1.0" encoding="utf-8"?>
<factor_docs>
  <message_op_class name="AllTrueOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.AllTrue(IList{bool})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, IList{bool})">
      <summary>Evidence message for EP.</summary>
      <param name="allTrue">Constant value for <c>allTrue</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(allTrue,array))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, IList{bool})">
      <summary>Evidence message for EP.</summary>
      <param name="allTrue">Constant value for <c>allTrue</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(allTrue,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, IList{bool})">
      <summary>Evidence message for VMP.</summary>
      <param name="allTrue">Constant value for <c>allTrue</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(allTrue,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="allTrue">Incoming message from <c>allTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_allTrue">Outgoing message to <c>allTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(allTrue) p(allTrue) factor(allTrue,array))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="allTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, IList{Bernoulli})">
      <summary>Evidence message for EP.</summary>
      <param name="allTrue">Constant value for <c>allTrue</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(allTrue,array))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="allTrue">Incoming message from <c>allTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(allTrue) p(allTrue) factor(allTrue,array) / sum_allTrue p(allTrue) messageTo(allTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, IList{Bernoulli})">
      <summary>Evidence message for EP.</summary>
      <param name="allTrue">Constant value for <c>allTrue</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(allTrue,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AllTrueAverageConditional(IList{Bernoulli})">
      <summary>EP message to <c>allTrue</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>The outgoing EP message to the <c>allTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>allTrue</c> as the random arguments are varied. The formula is <c>proj[p(allTrue) sum_(array) p(array) factor(allTrue,array)]/p(allTrue)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AllTrueAverageConditional(IList{bool})">
      <summary>EP message to <c>allTrue</c>.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>The outgoing EP message to the <c>allTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>allTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{BernoulliList}(Bernoulli, IList{Bernoulli}, BernoulliList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="allTrue">Incoming message from <c>allTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(allTrue) p(allTrue) factor(allTrue,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="allTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{BernoulliList}(bool, IList{Bernoulli}, BernoulliList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="allTrue">Constant value for <c>allTrue</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{BernoulliList}(Bernoulli, IList{bool}, BernoulliList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="allTrue">Incoming message from <c>allTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(allTrue) p(allTrue) factor(allTrue,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="allTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AllTrueAverageLogarithm(IList{Bernoulli})">
      <summary>VMP message to <c>allTrue</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>The outgoing VMP message to the <c>allTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>allTrue</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(allTrue,array)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{BernoulliList}(Bernoulli, IList{Bernoulli}, BernoulliList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="allTrue">Incoming message from <c>allTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>allTrue</c> integrated out. The formula is <c>sum_allTrue p(allTrue) factor(allTrue,array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="allTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{BernoulliList}(bool, IList{Bernoulli}, BernoulliList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="allTrue">Constant value for <c>allTrue</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(allTrue,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BooleanAndOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.And(bool, bool)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(and,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, bool, bool)">
      <summary>Evidence message for VMP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(and,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Incoming message from <c>and</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(and) p(and) factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AndAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>and</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>and</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>and</c> as the random arguments are varied. The formula is <c>proj[p(and) sum_(a,b) p(a,b) factor(and,a,b)]/p(and)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AndAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>and</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>and</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>and</c> as the random arguments are varied. The formula is <c>proj[p(and) sum_(b) p(b) factor(and,a,b)]/p(and)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AndAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>and</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>and</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>and</c> as the random arguments are varied. The formula is <c>proj[p(and) sum_(a) p(a) factor(and,a,b)]/p(and)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(and,b) p(and,b) factor(and,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(and,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(and) p(and) factor(and,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, bool)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(and,a) p(and,a) factor(and,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(and,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(and) p(and) factor(and,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, bool)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Incoming message from <c>and</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(and,a,b) p(and,a,b) factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Incoming message from <c>and</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(and,b) p(and,b) factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Incoming message from <c>and</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(and,a) p(and,a) factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Bernoulli, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(and,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Incoming message from <c>and</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(and) p(and) factor(and,a,b) / sum_and p(and) messageTo(and))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(and,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Bernoulli, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(and,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(and,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(and,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AndAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>and</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>and</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>and</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(and,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AndAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>and</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>and</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>and</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(and,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AndAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>and</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>and</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>and</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(and,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>and</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_and p(and) factor(and,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>and</c> integrated out. The formula is <c>sum_and p(and) factor(and,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(and,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, bool)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>and</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_and p(and) factor(and,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="and">Incoming message from <c>and</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>and</c> integrated out. The formula is <c>sum_and p(and) factor(and,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="and" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(and,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, bool)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="and">Constant value for <c>and</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BooleanAreEqualOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.AreEqual(bool, bool)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, bool, bool)">
      <summary>Evidence message for VMP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(a,b) p(a,b) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(b) p(b) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(a) p(a) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(bool, bool)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>areEqual</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(areEqual,b) p(areEqual,b) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(areEqual) p(areEqual) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, bool)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(areEqual,a) p(areEqual,a) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(areEqual) p(areEqual) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, bool)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <param name="to_areEqual">Outgoing message to <c>areEqual</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Bernoulli, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Bernoulli, bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, bool, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Outgoing message to <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,a,b) / sum_areEqual p(areEqual) messageTo(areEqual))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Bernoulli, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, bool, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Outgoing message to <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Bernoulli, bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(areEqual,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(areEqual,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(areEqual,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(bool, bool)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>areEqual</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>areEqual</c> integrated out. The formula is <c>sum_areEqual p(areEqual) factor(areEqual,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, bool)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>areEqual</c> integrated out. The formula is <c>sum_areEqual p(areEqual) factor(areEqual,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, bool)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DiscreteAreEqualOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.AreEqual(int, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, int, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(Discrete, Discrete)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(a,b) p(a,b) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(int, Discrete)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(b) p(b) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(Discrete, int)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(a) p(a) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Discrete, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(areEqual,b) p(areEqual,b) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, int, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(areEqual) p(areEqual) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, Discrete, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(bool, int, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Discrete, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(areEqual,a) p(areEqual,a) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, int, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(areEqual) p(areEqual) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, Discrete, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(bool, int, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <param name="to_areEqual">Outgoing message to <c>areEqual</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Discrete, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, int, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Outgoing message to <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Discrete, int)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Discrete, int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,a,b) / sum_areEqual p(areEqual) messageTo(areEqual))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Discrete, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, int, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Outgoing message to <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Discrete, int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(Discrete, Discrete)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(areEqual,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(int, Discrete)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(areEqual,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(Discrete, int)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(areEqual,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, Discrete, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, int, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>areEqual</c> integrated out. The formula is <c>sum_areEqual p(areEqual) factor(areEqual,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, Discrete, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(areEqual,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, int, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, Discrete, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, int, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>areEqual</c> integrated out. The formula is <c>sum_areEqual p(areEqual) factor(areEqual,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, Discrete, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(areEqual,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, int, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ArrayFromVectorOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.ArrayFromVector(Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double[], Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Constant value for <c>vector</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(array,vector))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double[], Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Constant value for <c>vector</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(array,vector))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double[], Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Constant value for <c>vector</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(array,vector))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double[], VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(vector) p(vector) factor(array,vector))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double[], VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(vector) p(vector) factor(array,vector))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double[], VectorGaussianMoments)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(vector) p(vector) factor(array,vector))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double[], VectorGaussianMoments)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(vector) p(vector) factor(array,vector))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(IList{Gaussian}, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <param name="to_vector">Outgoing message to <c>vector</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,vector) p(array,vector) factor(array,vector))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{Gaussian}, VectorGaussian, VectorGaussian, IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <param name="to_vector">Outgoing message to <c>vector</c>.</param>
      <param name="to_array">Outgoing message to <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,vector) p(array,vector) factor(array,vector) / sum_array p(array) messageTo(array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(IList{Gaussian}, VectorGaussianMoments, VectorGaussianMoments)">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <param name="to_vector">Outgoing message to <c>vector</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,vector) p(array,vector) factor(array,vector))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{Gaussian}, VectorGaussianMoments, VectorGaussianMoments, IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <param name="to_vector">Outgoing message to <c>vector</c>.</param>
      <param name="to_array">Outgoing message to <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,vector) p(array,vector) factor(array,vector) / sum_array p(array) messageTo(array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double[], VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{Gaussian}, VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double[], VectorGaussianMoments)">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{Gaussian}, VectorGaussianMoments)">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{Gaussian}, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Constant value for <c>vector</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageConditional(IList{Gaussian}, VectorGaussian)">
      <summary>EP message to <c>vector</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>vector</c> as the random arguments are varied. The formula is <c>proj[p(vector) sum_(array) p(array) factor(array,vector)]/p(vector)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VectorAverageLogarithm(IList{Gaussian}, VectorGaussian)">
      <summary>VMP message to <c>vector</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>vector</c> with <c>array</c> integrated out. The formula is <c>sum_array p(array) factor(array,vector)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VectorAverageConditional(IList{Gaussian}, VectorGaussianMoments)">
      <summary>EP message to <c>vector</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>vector</c> as the random arguments are varied. The formula is <c>proj[p(vector) sum_(array) p(array) factor(array,vector)]/p(vector)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VectorAverageLogarithm(IList{Gaussian}, VectorGaussianMoments)">
      <summary>VMP message to <c>vector</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>vector</c> with <c>array</c> integrated out. The formula is <c>sum_array p(array) factor(array,vector)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VectorAverageConditional(double[], VectorGaussian)">
      <summary>EP message to <c>vector</c>.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>vector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageLogarithm(double[], VectorGaussian)">
      <summary>VMP message to <c>vector</c>.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>vector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageConditional(double[], VectorGaussianMoments)">
      <summary>EP message to <c>vector</c>.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>vector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageLogarithm(double[], VectorGaussianMoments)">
      <summary>VMP message to <c>vector</c>.</summary>
      <param name="array">Constant value for <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>vector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{GaussianList}(IList{Gaussian}, VectorGaussian, GaussianList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(vector) p(vector) factor(array,vector)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="vector" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditionalInit(VectorGaussian)">
      <summary />
      <param name="vector">Incoming message from <c>vector</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{GaussianList}(IList{Gaussian}, VectorGaussianMoments, GaussianList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="vector">Incoming message from <c>vector</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(vector) p(vector) factor(array,vector)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="vector" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{GaussianList}(VectorGaussian, GaussianList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="vector">Incoming message from <c>vector</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[sum_(vector) p(vector) factor(array,vector)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="vector" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="BeliefPropagationGateEnterOneOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.EnterOne{T}(int, T, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist, Discrete, TDist, int, TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterOne">Incoming message from <c>enterOne</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterOne,selector) p(enterOne,selector) factor(enterOne,selector,value,index)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterOne" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GateEnterOneOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.EnterOne{T}(int, T, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{TDist}(TDist)">
      <summary>Evidence message for EP.</summary>
      <param name="enterOne">Incoming message from <c>enterOne</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(enterOne) p(enterOne) factor(enterOne,selector,value,index) / sum_enterOne p(enterOne) messageTo(enterOne))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enterOne,selector,value,index))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterOneAverageConditional{TValue}(TValue)">
      <summary>EP message to <c>enterOne</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>enterOne</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterOne</c> as the random arguments are varied. The formula is <c>proj[p(enterOne) sum_(value) p(value) factor(enterOne,selector,value,index)]/p(enterOne)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageConditional(Discrete)">
      <summary>EP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist, Discrete, TDist, int, TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterOne">Incoming message from <c>enterOne</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterOne,selector) p(enterOne,selector) factor(enterOne,selector,value,index)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterOne" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist, int, int, TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterOne">Incoming message from <c>enterOne</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="selector">Constant value for <c>selector</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterOne) p(enterOne) factor(enterOne,selector,value,index)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterOne" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enterOne,selector,value,index))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterOneAverageLogarithm{TValue}(TValue)">
      <summary>VMP message to <c>enterOne</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>enterOne</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterOne</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(enterOne,selector,value,index)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageLogarithm(Discrete)">
      <summary>VMP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(TDist, Discrete, int, TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enterOne">Incoming message from <c>enterOne</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>value</c>. Because the factor is deterministic, <c>enterOne</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(selector) p(selector) log(sum_enterOne p(enterOne) factor(enterOne,selector,value,index)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterOne" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="BeliefPropagationGateEnterOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gate.Enter{T}(bool, T)" /></description></item><item><description><see cref="Gate.Enter{T}(int, T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, Discrete, TDist, TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enter">Incoming message from <c>enter</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enter,selector) p(enter,selector) factor(enter,selector,value)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enter" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GateEnterOp{T}">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gate.Enter{T}(bool, T)" /></description></item><item><description><see cref="Gate.Enter{T}(int, T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{TDist}(IList{TDist})">
      <summary>Evidence message for EP.</summary>
      <param name="enter">Incoming message from <c>enter</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(enter) p(enter) factor(enter,selector,value) / sum_enter p(enter) messageTo(enter))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enter,selector,value))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterAverageConditional{TValue}(TValue, TValue[])">
      <summary>EP message to <c>enter</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enter</c> as the random arguments are varied. The formula is <c>proj[p(enter) sum_(value) p(value) factor(enter,selector,value)]/p(enter)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterAverageConditional{TValue, TResultList}(TValue, TResultList)">
      <summary>EP message to <c>enter</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enter</c> as the random arguments are varied. The formula is <c>proj[p(enter) sum_(value) p(value) factor(enter,selector,value)]/p(enter)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterInit{TValue, TArray}(Discrete, TValue, IArrayFactory{TValue, TArray})">
      <summary>Initialize the buffer <c>enter</c>.</summary>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="factory" />
      <returns>Initial value of buffer <c>enter</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageConditional(Discrete)">
      <summary>EP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, Discrete, TDist, TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enter">Incoming message from <c>enter</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enter,selector) p(enter,selector) factor(enter,selector,value)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enter" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, int, TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enter">Incoming message from <c>enter</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enter,selector) p(enter,selector) factor(enter,selector,value)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enter" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enter,selector,value))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterAverageLogarithm{TValue}(TValue, TValue[])">
      <summary>VMP message to <c>enter</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enter</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(enter,selector,value)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterAverageLogarithm{TValue, TResultList}(TValue, TResultList)">
      <summary>VMP message to <c>enter</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enter</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(enter,selector,value)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageLogarithm(Discrete)">
      <summary>VMP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(IList{TDist}, Discrete, TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enter">Incoming message from <c>enter</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>value</c>. Because the factor is deterministic, <c>enter</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(selector) p(selector) log(sum_enter p(enter) factor(enter,selector,value)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enter" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="BeliefPropagationGateEnterPartialOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gate.EnterPartial{T}(int, T, int[])" /></description></item><item><description><see cref="Gate.EnterPartial{T}(bool, T, int[])" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, Discrete, TDist, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartial,selector) p(enterPartial,selector) factor(enterPartial,selector,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="selector" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, Bernoulli, TDist, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartial,selector) p(enterPartial,selector) factor(enterPartial,selector,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="selector" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GateEnterPartialOp{T}">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gate.EnterPartial{T}(int, T, int[])" /></description></item><item><description><see cref="Gate.EnterPartial{T}(bool, T, int[])" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{TDist}(IList{TDist})">
      <summary>Evidence message for EP.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(enterPartial) p(enterPartial) factor(enterPartial,selector,value,indices) / sum_enterPartial p(enterPartial) messageTo(enterPartial))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enterPartial,selector,value,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterPartialAverageConditional{TValue, TResultList}(TValue, TResultList)">
      <summary>EP message to <c>enterPartial</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterPartial</c> as the random arguments are varied. The formula is <c>proj[p(enterPartial) sum_(value) p(value) factor(enterPartial,selector,value,indices)]/p(enterPartial)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterPartialAverageConditional{TValue}(TValue, TValue[])">
      <summary>EP message to <c>enterPartial</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterPartial</c> as the random arguments are varied. The formula is <c>proj[p(enterPartial) sum_(value) p(value) factor(enterPartial,selector,value,indices)]/p(enterPartial)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterPartialInit{TValue, TArray}(TValue, int[], IArrayFactory{TValue, TArray})">
      <summary>Initialize the buffer <c>enterPartial</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="factory" />
      <returns>Initial value of buffer <c>enterPartial</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageConditional(Discrete)">
      <summary>EP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageConditional(Bernoulli)">
      <summary>EP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, Discrete, TDist, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartial,selector) p(enterPartial,selector) factor(enterPartial,selector,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="selector" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, int, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Constant value for <c>selector</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartial) p(enterPartial) factor(enterPartial,selector,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, Bernoulli, TDist, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartial,selector) p(enterPartial,selector) factor(enterPartial,selector,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="selector" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, bool, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartial,selector) p(enterPartial,selector) factor(enterPartial,selector,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{T}, bool, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartial,selector) p(enterPartial,selector) factor(enterPartial,selector,value,indices)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enterPartial,selector,value,indices))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterPartialAverageLogarithm{TValue, TResultList}(TValue, TResultList)">
      <summary>VMP message to <c>enterPartial</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterPartial</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(enterPartial,selector,value,indices)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterPartialAverageLogarithm{TValue}(TValue, TValue[])">
      <summary>VMP message to <c>enterPartial</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterPartial</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(enterPartial,selector,value,indices)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(IList{TDist}, int, int[], TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Constant value for <c>selector</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>enterPartial</c> integrated out. The formula is <c>sum_enterPartial p(enterPartial) factor(enterPartial,selector,value,indices)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(IList{TDist}, Discrete, int[], TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>value</c>. Because the factor is deterministic, <c>enterPartial</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(selector) p(selector) log(sum_enterPartial p(enterPartial) factor(enterPartial,selector,value,indices)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(IList{TDist}, bool, int[], TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>value</c>. Because the factor is deterministic, <c>enterPartial</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(selector) p(selector) log(sum_enterPartial p(enterPartial) factor(enterPartial,selector,value,indices)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(IList{TDist}, Bernoulli, int[], TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enterPartial">Incoming message from <c>enterPartial</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>value</c>. Because the factor is deterministic, <c>enterPartial</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(selector) p(selector) log(sum_enterPartial p(enterPartial) factor(enterPartial,selector,value,indices)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartial" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SelectorAverageLogarithm(Discrete)">
      <summary>VMP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageLogarithm(Bernoulli)">
      <summary>VMP message to <c>selector</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>selector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BeliefPropagationGateEnterPartialTwoOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.EnterPartialTwo{T}(bool, bool, T, int[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{TDist}(IList{TDist}, Bernoulli, Bernoulli, TDist, int[], TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartialTwo">Incoming message from <c>enterPartialTwo</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartialTwo,case0,case1) p(enterPartialTwo,case0,case1) factor(enterPartialTwo,case0,case1,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartialTwo" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GateEnterPartialTwoOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.EnterPartialTwo{T}(bool, bool, T, int[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enterPartialTwo,case0,case1,value,indices))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enterPartialTwo,case0,case1,value,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterPartialTwoAverageConditional{TValue, TResultList}(TValue, TResultList)">
      <summary>EP message to <c>enterPartialTwo</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterPartialTwo</c> as the random arguments are varied. The formula is <c>proj[p(enterPartialTwo) sum_(value) p(value) factor(enterPartialTwo,case0,case1,value,indices)]/p(enterPartialTwo)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Case0AverageConditional(Bernoulli)">
      <summary>EP message to <c>case0</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>case0</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="Case1AverageConditional(Bernoulli)">
      <summary>EP message to <c>case1</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>case1</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TValue}(IList{TValue}, Bernoulli, Bernoulli, TValue, int[], TValue)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartialTwo">Incoming message from <c>enterPartialTwo</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartialTwo,case0,case1) p(enterPartialTwo,case0,case1) factor(enterPartialTwo,case0,case1,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartialTwo" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{TValue, TDomain}(IList{TValue}, bool, bool, int[], TValue)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enterPartialTwo">Incoming message from <c>enterPartialTwo</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="case1">Constant value for <c>case1</c>.</param>
      <param name="case2" />
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enterPartialTwo) p(enterPartialTwo) factor(enterPartialTwo,case0,case1,value,indices)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartialTwo" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enterPartialTwo,case0,case1,value,indices))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterPartialTwoAverageLogarithm{TValue, TResultList}(TValue, TResultList)">
      <summary>VMP message to <c>enterPartialTwo</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enterPartialTwo</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(enterPartialTwo,case0,case1,value,indices)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Case0AverageLogarithm{TValue}(IList{TValue}, TValue, int[], Bernoulli)">
      <summary>VMP message to <c>case0</c>.</summary>
      <param name="enterPartialTwo">Incoming message from <c>enterPartialTwo</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>case0</c>. Because the factor is deterministic, <c>enterPartialTwo</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(value) p(value) log(sum_enterPartialTwo p(enterPartialTwo) factor(enterPartialTwo,case0,case1,value,indices)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="Case1AverageLogarithm{TValue}(IList{TValue}, TValue, int[], Bernoulli)">
      <summary>VMP message to <c>case1</c>.</summary>
      <param name="enterPartialTwo">Incoming message from <c>enterPartialTwo</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>case1</c>. Because the factor is deterministic, <c>enterPartialTwo</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(value) p(value) log(sum_enterPartialTwo p(enterPartialTwo) factor(enterPartialTwo,case0,case1,value,indices)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TValue}(IList{TValue}, Bernoulli, Bernoulli, int[], TValue)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enterPartialTwo">Incoming message from <c>enterPartialTwo</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>value</c>. Because the factor is deterministic, <c>enterPartialTwo</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(case0,case1) p(case0,case1) log(sum_enterPartialTwo p(enterPartialTwo) factor(enterPartialTwo,case0,case1,value,indices)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enterPartialTwo" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="BeliefPropagationGateExitOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.Exit{T}(bool[], T[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ExitAverageConditional{TDist}(IList{Bernoulli}, IList{TDist}, TDist)">
      <summary>EP message to <c>exit</c>.</summary>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exit</c> as the random arguments are varied. The formula is <c>proj[p(exit) sum_(cases,values) p(cases,values) factor(exit,cases,values)]/p(exit)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GateExitOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.Exit{T}(bool[], T[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{TDist}(TDist, IList{bool})">
      <summary>Evidence message for EP.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exit,cases) p(exit,cases) factor(exit,cases,values) / sum_exit p(exit) messageTo(exit))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDist}(TDist, TDist)">
      <summary>Evidence message for EP.</summary>
      <param name="exit">Incoming message from <c>exit</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_exit">Outgoing message to <c>exit</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exit) p(exit) factor(exit,cases,values) / sum_exit p(exit) messageTo(exit))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exit" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValuesAverageConditional{TExit, TResultList}(TExit, TResultList)">
      <summary>EP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>values</c> as the random arguments are varied. The formula is <c>proj[p(values) sum_(exit) p(exit) factor(exit,cases,values)]/p(values)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValuesAverageConditional{TExit}(TExit, TExit[])">
      <summary>EP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>values</c> as the random arguments are varied. The formula is <c>proj[p(values) sum_(exit) p(exit) factor(exit,cases,values)]/p(values)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageConditional{TDist}(TDist, TDist, int)">
      <summary>EP message to <c>cases</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="values">Incoming message from <c>values</c>.</param>
      <param name="resultIndex">Index of the <c>cases</c> for which a message is desired.</param>
      <returns>The outgoing EP message to the <c>cases</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>cases</c> as the random arguments are varied. The formula is <c>proj[p(cases) sum_(exit,values) p(exit,values) factor(exit,cases,values)]/p(cases)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exit" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageConditional{TDist}(TDist, IList{bool}, IList{TDist}, TDist)">
      <summary>EP message to <c>exit</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exit</c> as the random arguments are varied. The formula is <c>proj[p(exit) sum_(cases,values) p(cases,values) factor(exit,cases,values)]/p(exit)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageConditional{TDist}(TDist, IList{Bernoulli}, IList{TDist}, TDist)">
      <summary>EP message to <c>exit</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exit</c> as the random arguments are varied. The formula is <c>proj[p(exit) sum_(cases,values) p(cases,values) factor(exit,cases,values)]/p(exit)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageConditional1{TDist}(TDist, IList{Bernoulli}, IList{TDist}, TDist)">
      <summary />
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageConditional2{TDist}(TDist, IList{Bernoulli}, IList{TDist}, TDist)">
      <summary />
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="CasesAverageConditional{TDist}(TDist, IList{T}, int)">
      <summary>EP message to <c>cases</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="values">Incoming message from <c>values</c>.</param>
      <param name="resultIndex">Index of the <c>cases</c> for which a message is desired.</param>
      <returns>The outgoing EP message to the <c>cases</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>cases</c> as the random arguments are varied. The formula is <c>proj[p(cases) sum_(exit,values) p(exit,values) factor(exit,cases,values)]/p(cases)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExitAverageConditional{TDist}(TDist, IList{Bernoulli}, IList{T}, TDist)">
      <summary>EP message to <c>exit</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exit</c> as the random arguments are varied. The formula is <c>proj[p(exit) sum_(cases,values) p(cases,values) factor(exit,cases,values)]/p(exit)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExitAverageConditionalInit{TDist}(IList{TDist})">
      <summary />
      <param name="values">Incoming message from <c>values</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{TDist}(TDist, TDist)">
      <summary>Evidence message for VMP.</summary>
      <param name="exit">Incoming message from <c>exit</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_exit">Outgoing message to <c>exit</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exit" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValuesAverageLogarithm{TExit}(TExit, TExit[])">
      <summary>VMP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>values</c> with <c>exit</c> integrated out. The formula is <c>sum_exit p(exit) factor(exit,cases,values)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValuesAverageLogarithm{TExit, TResultList}(TExit, TResultList)">
      <summary>VMP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>values</c> with <c>exit</c> integrated out. The formula is <c>sum_exit p(exit) factor(exit,cases,values)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageLogarithm{TDist}(TDist, IList{TDist}, int)">
      <summary>VMP message to <c>cases</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>cases</c> for which a message is desired.</param>
      <returns>The outgoing VMP message to the <c>cases</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>cases</c>. Because the factor is deterministic, <c>exit</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(values) p(values) log(sum_exit p(exit) factor(exit,cases,values)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exit" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageLogarithm{TDist}(TDist, IList{bool}, IList{TDist}, TDist)">
      <summary>VMP message to <c>exit</c>.</summary>
      <param name="exit">Incoming message from <c>exit</c>.</param>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exit</c> as the random arguments are varied. The formula is <c>proj[sum_(cases,values) p(cases,values) factor(exit,cases,values)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageLogarithm{TDist}(IList{Bernoulli}, IList{TDist}, TDist)">
      <summary>VMP message to <c>exit</c>.</summary>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exit</c> as the random arguments are varied. The formula is <c>proj[sum_(cases,values) p(cases,values) factor(exit,cases,values)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageLogarithmInit{TDist}(IList{TDist})">
      <summary />
      <param name="values">Incoming message from <c>values</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BeliefPropagationGateExitTwoOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.ExitTwo{T}(bool, bool, T[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ExitTwoAverageConditional{TDist}(TDist, Bernoulli, Bernoulli, IList{TDist}, TDist)">
      <summary>EP message to <c>exitTwo</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exitTwo</c> as the random arguments are varied. The formula is <c>proj[p(exitTwo) sum_(case0,case1,values) p(case0,case1,values) factor(exitTwo,case0,case1,values)]/p(exitTwo)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GateExitTwoOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.ExitTwo{T}(bool, bool, T[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValuesAverageConditional{TExit, TResultList}(TExit, TResultList)">
      <summary>EP message to <c>values</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>values</c> as the random arguments are varied. The formula is <c>proj[p(values) sum_(exitTwo) p(exitTwo) factor(exitTwo,case0,case1,values)]/p(values)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exitTwo" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Case0AverageConditional{TExit}(IList{TExit})">
      <summary>EP message to <c>case0</c>.</summary>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>case0</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>case0</c> as the random arguments are varied. The formula is <c>proj[p(case0) sum_(values) p(values) factor(exitTwo,case0,case1,values)]/p(case0)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Case1AverageConditional{TExit}(IList{TExit})">
      <summary>EP message to <c>case1</c>.</summary>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>case1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>case1</c> as the random arguments are varied. The formula is <c>proj[p(case1) sum_(values) p(values) factor(exitTwo,case0,case1,values)]/p(case1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitTwoAverageConditional{TExit}(TExit, Bernoulli, Bernoulli, IList{TExit}, TExit)">
      <summary>EP message to <c>exitTwo</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exitTwo</c> as the random arguments are varied. The formula is <c>proj[p(exitTwo) sum_(case0,case1,values) p(case0,case1,values) factor(exitTwo,case0,case1,values)]/p(exitTwo)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Case0AverageConditional{TExit, TExitDomain}(TExit, IList{TExitDomain})">
      <summary>EP message to <c>case0</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="values">Incoming message from <c>values</c>.</param>
      <returns>The outgoing EP message to the <c>case0</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>case0</c> as the random arguments are varied. The formula is <c>proj[p(case0) sum_(exitTwo,values) p(exitTwo,values) factor(exitTwo,case0,case1,values)]/p(case0)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="Case1AverageConditional{TExit, TExitDomain}(TExit, IList{TExitDomain})">
      <summary>EP message to <c>case1</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="values">Incoming message from <c>values</c>.</param>
      <returns>The outgoing EP message to the <c>case1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>case1</c> as the random arguments are varied. The formula is <c>proj[p(case1) sum_(exitTwo,values) p(exitTwo,values) factor(exitTwo,case0,case1,values)]/p(case1)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExitTwoAverageConditional{TExit, TExitDomain}(TExit, Bernoulli, Bernoulli, IList{TExitDomain}, TExit)">
      <summary>EP message to <c>exitTwo</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="values">Incoming message from <c>values</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exitTwo</c> as the random arguments are varied. The formula is <c>proj[p(exitTwo) sum_(case0,case1,values) p(case0,case1,values) factor(exitTwo,case0,case1,values)]/p(exitTwo)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{TExit}(TExit, Bernoulli, Bernoulli, IList{TExit}, TExit)">
      <summary>Evidence message for VMP.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="values">Incoming message from <c>values</c>.</param>
      <param name="to_exitTwo">Outgoing message to <c>exitTwo</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValuesAverageLogarithm{TExit, TResultList}(TExit, TResultList)">
      <summary>VMP message to <c>values</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>values</c> with <c>exitTwo</c> integrated out. The formula is <c>sum_exitTwo p(exitTwo) factor(exitTwo,case0,case1,values)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exitTwo" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Case0AverageLogarithm{TExit}(TExit, IList{TExit})">
      <summary>VMP message to <c>case0</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>case0</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>case0</c>. Because the factor is deterministic, <c>exitTwo</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(values) p(values) log(sum_exitTwo p(exitTwo) factor(exitTwo,case0,case1,values)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Case1AverageLogarithm{TExit}(TExit, IList{TExit})">
      <summary>VMP message to <c>case1</c>.</summary>
      <param name="exitTwo">Incoming message from <c>exitTwo</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>case1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>case1</c>. Because the factor is deterministic, <c>exitTwo</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(values) p(values) log(sum_exitTwo p(exitTwo) factor(exitTwo,case0,case1,values)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitTwoAverageLogarithm{TExit}(Bernoulli, Bernoulli, IList{TExit}, TExit)">
      <summary>VMP message to <c>exitTwo</c>.</summary>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exitTwo</c> as the random arguments are varied. The formula is <c>proj[sum_(case0,case1,values) p(case0,case1,values) factor(exitTwo,case0,case1,values)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="BernoulliFromBetaOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Bernoulli.Sample(double)" /></description></item><item><description><see cref="Factor.Bernoulli(double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Beta)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probTrue) p(probTrue) factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probTrue) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Beta)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probTrue) p(probTrue) factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli, Beta)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,probTrue) p(sample,probTrue) factor(sample,probTrue) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleConditional(double)">
      <summary>Gibbs message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing Gibbs message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueConditional(bool)">
      <summary>Gibbs message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <returns>The outgoing Gibbs message to the <c>probTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueAverageConditional(bool)">
      <summary>EP message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <returns>The outgoing EP message to the <c>probTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Beta)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(probTrue) p(probTrue) factor(sample,probTrue)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbTrueAverageConditional(Bernoulli, double)">
      <summary>EP message to <c>probTrue</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>probTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probTrue</c> as the random arguments are varied. The formula is <c>proj[p(probTrue) sum_(sample) p(sample) factor(sample,probTrue)]/p(probTrue)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbTrueAverageConditional(Bernoulli, Beta)">
      <summary>EP message to <c>probTrue</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>probTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probTrue</c> as the random arguments are varied. The formula is <c>proj[p(probTrue) sum_(sample) p(sample) factor(sample,probTrue)]/p(probTrue)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, Beta)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,probTrue) p(sample,probTrue) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, Beta)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(probTrue) p(probTrue) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Beta)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(probTrue) p(probTrue) log(factor(sample,probTrue)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbTrueAverageLogarithm(bool)">
      <summary>VMP message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <returns>The outgoing VMP message to the <c>probTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueAverageLogarithm(Bernoulli)">
      <summary>VMP message to <c>probTrue</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <returns>The outgoing VMP message to the <c>probTrue</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>probTrue</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,probTrue)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BernoulliFromBooleanOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.BernoulliFromBoolean(bool, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleConditional(bool, double, double)">
      <summary>Gibbs message to <c>sample</c>.</summary>
      <param name="choice">Constant value for <c>choice</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing Gibbs message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(bool, double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="choice">Constant value for <c>choice</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(bool, double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="choice">Constant value for <c>choice</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChoiceConditional(bool, double, double)">
      <summary>Gibbs message to <c>choice</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing Gibbs message to the <c>choice</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>choice</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChoiceAverageConditional(bool, double, double)">
      <summary>EP message to <c>choice</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing EP message to the <c>choice</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>choice</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChoiceAverageLogarithm(bool, double, double)">
      <summary>VMP message to <c>choice</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing VMP message to the <c>choice</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>choice</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Bernoulli, double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="choice">Incoming message from <c>choice</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(choice) p(choice) factor(sample,choice,probTrue0,probTrue1)]/p(sample)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChoiceAverageConditional(Bernoulli, double, double)">
      <summary>EP message to <c>choice</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing EP message to the <c>choice</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>choice</c> as the random arguments are varied. The formula is <c>proj[p(choice) sum_(sample) p(sample) factor(sample,choice,probTrue0,probTrue1)]/p(choice)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Bernoulli, double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="choice">Incoming message from <c>choice</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(choice) p(choice) log(factor(sample,choice,probTrue0,probTrue1)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChoiceAverageLogarithm(Bernoulli, double, double)">
      <summary>VMP message to <c>choice</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue0">Constant value for <c>probTrue0</c>.</param>
      <param name="probTrue1">Constant value for <c>probTrue1</c>.</param>
      <returns>The outgoing VMP message to the <c>choice</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>choice</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,choice,probTrue0,probTrue1)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BernoulliFromBooleanArray">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.BernoulliFromBoolean(bool, double[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleAverageConditional(Bernoulli, double[])">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="choice">Incoming message from <c>choice</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(choice) p(choice) factor(sample,choice,probTrue)]/p(sample)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(bool, double[])">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="choice">Constant value for <c>choice</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChoiceAverageConditional(Bernoulli, double[])">
      <summary>EP message to <c>choice</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>choice</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>choice</c> as the random arguments are varied. The formula is <c>proj[p(choice) sum_(sample) p(sample) factor(sample,choice,probTrue)]/p(choice)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Bernoulli, double[])">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="choice">Incoming message from <c>choice</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(choice) p(choice) log(factor(sample,choice,probTrue)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChoiceAverageLogarithm(Bernoulli, double[])">
      <summary>VMP message to <c>choice</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing VMP message to the <c>choice</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>choice</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,choice,probTrue)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BernoulliFromDiscreteOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.BernoulliFromDiscrete(int, double[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, Discrete, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="index">Incoming message from <c>index</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(index) p(index) factor(sample,index,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Discrete, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="index">Incoming message from <c>index</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(index) p(index) factor(sample,index,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleConditional(int, double[])">
      <summary>Gibbs message to <c>sample</c>.</summary>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing Gibbs message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(int, double[])">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(int, double[])">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="IndexConditional(bool, double[], Discrete)">
      <summary>Gibbs message to <c>index</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>index</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="IndexAverageConditional(bool, double[], Discrete)">
      <summary>EP message to <c>index</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>index</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="IndexAverageLogarithm(bool, double[], Discrete)">
      <summary>VMP message to <c>index</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>index</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Discrete, double[])">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="index">Incoming message from <c>index</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(index) p(index) factor(sample,index,probTrue)]/p(sample)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Discrete, double[])">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="index">Incoming message from <c>index</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(index) p(index) log(factor(sample,index,probTrue)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="IndexAverageConditional(Bernoulli, double[], Discrete)">
      <summary>EP message to <c>index</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>index</c> as the random arguments are varied. The formula is <c>proj[p(index) sum_(sample) p(sample) factor(sample,index,probTrue)]/p(index)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IndexAverageLogarithm(Bernoulli, double[], Discrete)">
      <summary>VMP message to <c>index</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="ProbTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>index</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,index,probTrue)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BernoulliFromLogOddsOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.BernoulliFromLogOdds(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogOddsAverageConditional(bool, Gaussian)">
      <summary>EP message to <c>logOdds</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>logOdds</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>logOdds</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogOddsAverageConditional(Bernoulli, Gaussian)">
      <summary>EP message to <c>logOdds</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>logOdds</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>logOdds</c> as the random arguments are varied. The formula is <c>proj[p(logOdds) sum_(sample) p(sample) factor(sample,logOdds)]/p(logOdds)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Constant value for <c>logOdds</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,logOdds))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(logOdds) p(logOdds) factor(sample,logOdds))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Constant value for <c>logOdds</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,logOdds))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,logOdds) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(logOdds) p(logOdds) factor(sample,logOdds))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(logOdds) p(logOdds) factor(sample,logOdds)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Constant value for <c>logOdds</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,logOdds))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="logOdds">Constant value for <c>logOdds</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,logOdds))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(logOdds) p(logOdds) log(factor(sample,logOdds))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,logOdds) p(sample,logOdds) log(factor(sample,logOdds))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(logOdds) p(logOdds) log(factor(sample,logOdds)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="logOdds">Constant value for <c>logOdds</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogOddsAverageLogarithm(bool, Gaussian, Gaussian)">
      <summary>VMP message to <c>logOdds</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_LogOdds">Previous outgoing message to <c>LogOdds</c>.</param>
      <returns>The outgoing VMP message to the <c>logOdds</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>logOdds</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogOddsAverageLogarithm(Bernoulli, Gaussian, Gaussian)">
      <summary>VMP message to <c>logOdds</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="logOdds">Incoming message from <c>logOdds</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>logOdds</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,logOdds)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logOdds" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="BernoulliIntegerSubsetFromBeta">
    <doc>
      <summary>Provides outgoing messages for <see cref="BernoulliIntegerSubset.Sample(ISparseList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IList{int}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(BernoulliIntegerSubset, BernoulliIntegerSubset)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(IList{int}, SparseBetaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probTrue) p(probTrue) factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(BernoulliIntegerSubset, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probTrue) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{int}, SparseBetaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probTrue) p(probTrue) factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{int}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(BernoulliIntegerSubset, SparseBetaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,probTrue) p(sample,probTrue) factor(sample,probTrue) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleConditional(ISparseList{double}, BernoulliIntegerSubset)">
      <summary>Gibbs message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(ISparseList{double}, BernoulliIntegerSubset)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueConditional(IList{int}, SparseBetaList)">
      <summary>Gibbs message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueAverageConditional(IList{int}, SparseBetaList)">
      <summary>EP message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(SparseBetaList, BernoulliIntegerSubset)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(probTrue) p(probTrue) factor(sample,probTrue)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbTrueAverageConditional(BernoulliIntegerSubset, SparseBetaList, SparseBetaList)">
      <summary>EP message to <c>probTrue</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probTrue</c> as the random arguments are varied. The formula is <c>proj[p(probTrue) sum_(sample) p(sample) factor(sample,probTrue)]/p(probTrue)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(BernoulliIntegerSubset, SparseBetaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,probTrue) p(sample,probTrue) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(BernoulliIntegerSubset, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{int}, SparseBetaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(probTrue) p(probTrue) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{int}, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(ISparseList{double}, BernoulliIntegerSubset)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(SparseBetaList, BernoulliIntegerSubset)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(probTrue) p(probTrue) log(factor(sample,probTrue)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbTrueAverageLogarithm(IList{int}, SparseBetaList)">
      <summary>VMP message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueAverageLogarithm(BernoulliIntegerSubset, SparseBetaList)">
      <summary>VMP message to <c>probTrue</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>probTrue</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,probTrue)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BetaFromMeanAndTotalCountOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.BetaFromMeanAndTotalCount(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(prob,mean,totalCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(Beta, Gamma)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(mean,totalCount) p(mean,totalCount) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(Beta, double)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>The outgoing VMP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(totalCount) p(totalCount) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(double, Beta, Gamma, Beta)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_mean">Previous outgoing message to <c>mean</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(totalCount) p(totalCount) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(double, Beta, double, Beta)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="to_mean">Previous outgoing message to <c>mean</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Beta, Beta, Gamma, Beta)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_mean">Previous outgoing message to <c>mean</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(prob,totalCount) p(prob,totalCount) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageLogarithm(Beta, Gamma, Beta, Gamma)">
      <summary>VMP message to <c>totalCount</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_totalCount">Previous outgoing message to <c>totalCount</c>.</param>
      <returns>The outgoing VMP message to the <c>totalCount</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>totalCount</c>. The formula is <c>exp(sum_(mean,prob) p(mean,prob) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(prob,mean,totalCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Beta, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob) p(prob) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageConditional(double, double)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>prob</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageConditional(Beta, Gamma)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>prob</c> as the random arguments are varied. The formula is <c>proj[p(prob) sum_(mean,totalCount) p(mean,totalCount) factor(prob,mean,totalCount)]/p(prob)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageConditional(Beta, double)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>prob</c> as the random arguments are varied. The formula is <c>proj[p(prob) sum_(mean) p(mean) factor(prob,mean,totalCount)]/p(prob)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageConditional(double, Gamma)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>prob</c> as the random arguments are varied. The formula is <c>proj[p(prob) sum_(totalCount) p(totalCount) factor(prob,mean,totalCount)]/p(prob)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Beta, Gamma, double, Beta)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(totalCount) p(totalCount) factor(prob,mean,totalCount)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Beta, double, double, Beta)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Beta, double, Beta, Beta)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(prob) p(prob) factor(prob,mean,totalCount)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Beta, Gamma, Beta, Beta)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(totalCount,prob) p(totalCount,prob) factor(prob,mean,totalCount)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageConditional(Beta, Gamma, double, Gamma)">
      <summary>EP message to <c>totalCount</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>totalCount</c> as the random arguments are varied. The formula is <c>proj[p(totalCount) sum_(mean) p(mean) factor(prob,mean,totalCount)]/p(totalCount)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageConditional(Beta, Gamma, Beta, Gamma)">
      <summary>EP message to <c>totalCount</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>totalCount</c> as the random arguments are varied. The formula is <c>proj[p(totalCount) sum_(mean,prob) p(mean,prob) factor(prob,mean,totalCount)]/p(totalCount)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="BetaFromMeanAndVarianceOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Beta.SampleFromMeanAndVariance(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Beta, double, double, Beta)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Beta, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,variance) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Beta, double, double, Beta)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BetaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Beta.Sample(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Beta, double, double, Beta)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,trueCount,falseCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Beta, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,trueCount,falseCount) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Beta, double, double, Beta)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,trueCount,falseCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,trueCount,falseCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,trueCount,falseCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,trueCount,falseCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, Gamma, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Incoming message from <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(trueCount) p(trueCount) log(factor(sample,trueCount,falseCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Incoming message from <c>trueCount</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(trueCount) p(trueCount) factor(sample,trueCount,falseCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Incoming message from <c>falseCount</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(falseCount) p(falseCount) log(factor(sample,trueCount,falseCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <param name="falseCount">Incoming message from <c>falseCount</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(falseCount) p(falseCount) factor(sample,trueCount,falseCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrueCountAverageConditional(double, double)">
      <summary>EP message to <c>trueCount</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>The outgoing EP message to the <c>trueCount</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>trueCount</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrueCountAverageLogarithm(double, double)">
      <summary>VMP message to <c>trueCount</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="falseCount">Constant value for <c>falseCount</c>.</param>
      <returns>The outgoing VMP message to the <c>trueCount</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>trueCount</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="FalseCountAverageConditional(double, double)">
      <summary>EP message to <c>falseCount</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <returns>The outgoing EP message to the <c>falseCount</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>falseCount</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="FalseCountAverageLogarithm(double, double)">
      <summary>VMP message to <c>falseCount</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="trueCount">Constant value for <c>trueCount</c>.</param>
      <returns>The outgoing VMP message to the <c>falseCount</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>falseCount</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BinomialOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Rand.Binomial(int, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(binomial) p(binomial) factor(binomial,n,p))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, double, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(binomial,n,p))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, double, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(n) p(n) factor(binomial,n,p))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Beta, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(p,n) p(p,n) factor(binomial,n,p))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Beta, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(p) p(p) factor(binomial,n,p))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(binomial) p(binomial) factor(binomial,n,p) / sum_binomial p(binomial) messageTo(binomial))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, double, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(n) p(n) factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Beta, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(p,n) p(p,n) factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, double, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Beta, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(p) p(p) factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(int)">
      <summary />
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(Discrete)">
      <summary />
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, int, Discrete)">
      <summary>EP message to <c>binomial</c>.</summary>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>binomial</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Beta, int, Discrete)">
      <summary>EP message to <c>binomial</c>.</summary>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>binomial</c> as the random arguments are varied. The formula is <c>proj[p(binomial) sum_(p) p(p) factor(binomial,n,p)]/p(binomial)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, Poisson)">
      <summary>EP message to <c>binomial</c>.</summary>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>The outgoing EP message to the <c>binomial</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>binomial</c> as the random arguments are varied. The formula is <c>proj[p(binomial) sum_(n) p(n) factor(binomial,n,p)]/p(binomial)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageConditional(int, double, Poisson)">
      <summary>EP message to <c>n</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>The outgoing EP message to the <c>n</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>n</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageConditional(Poisson, double)">
      <summary>EP message to <c>n</c>.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <returns>The outgoing EP message to the <c>n</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>n</c> as the random arguments are varied. The formula is <c>proj[p(n) sum_(binomial) p(binomial) factor(binomial,n,p)]/p(n)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, Discrete, Discrete)">
      <summary>EP message to <c>binomial</c>.</summary>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>binomial</c> as the random arguments are varied. The formula is <c>proj[p(binomial) sum_(n) p(n) factor(binomial,n,p)]/p(binomial)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Beta, Discrete, Discrete)">
      <summary>EP message to <c>binomial</c>.</summary>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>binomial</c> as the random arguments are varied. The formula is <c>proj[p(binomial) sum_(p,n) p(p,n) factor(binomial,n,p)]/p(binomial)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageConditional(Discrete, double, Discrete)">
      <summary>EP message to <c>n</c>.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>n</c> as the random arguments are varied. The formula is <c>proj[p(n) sum_(binomial) p(binomial) factor(binomial,n,p)]/p(n)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageConditional(Discrete, Beta, Discrete)">
      <summary>EP message to <c>n</c>.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>n</c> as the random arguments are varied. The formula is <c>proj[p(n) sum_(binomial,p) p(binomial,p) factor(binomial,n,p)]/p(n)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageConditional(int, double, Discrete)">
      <summary>EP message to <c>n</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>n</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageConditional(int, Beta, Discrete)">
      <summary>EP message to <c>n</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>n</c> as the random arguments are varied. The formula is <c>proj[p(n) sum_(p) p(p) factor(binomial,n,p)]/p(n)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageConditional(int, int)">
      <summary>EP message to <c>p</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>The outgoing EP message to the <c>p</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>p</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageConditional(int, Discrete, Beta)">
      <summary>EP message to <c>p</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <returns>The outgoing EP message to the <c>p</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>p</c> as the random arguments are varied. The formula is <c>proj[p(p) sum_(n) p(n) factor(binomial,n,p)]/p(p)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageConditional(Discrete, int)">
      <summary>EP message to <c>p</c>.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>The outgoing EP message to the <c>p</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>p</c> as the random arguments are varied. The formula is <c>proj[p(p) sum_(binomial) p(binomial) factor(binomial,n,p)]/p(p)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, double, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, Beta, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(p) p(p) log(factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, Beta, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(p,n) p(p,n) log(factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, double, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(n) p(n) log(factor(binomial,n,p))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageLogarithm(int, int)">
      <summary>VMP message to <c>p</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>The outgoing VMP message to the <c>p</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>p</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageLogarithm(int, Discrete)">
      <summary>VMP message to <c>p</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>The outgoing VMP message to the <c>p</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>p</c>. The formula is <c>exp(sum_(n) p(n) log(factor(binomial,n,p)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageLogarithm(Discrete, int)">
      <summary>VMP message to <c>p</c>.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <param name="trialCount">Constant value for <c>n</c>.</param>
      <returns>The outgoing VMP message to the <c>p</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>p</c>. The formula is <c>exp(sum_(binomial) p(binomial) log(factor(binomial,n,p)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageLogarithm(Discrete, Discrete)">
      <summary>VMP message to <c>p</c>.</summary>
      <param name="sample">Incoming message from <c>binomial</c>.</param>
      <param name="trialCount">Incoming message from <c>n</c>.</param>
      <returns>The outgoing VMP message to the <c>p</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>p</c>. The formula is <c>exp(sum_(binomial,n) p(binomial,n) log(factor(binomial,n,p)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageLogarithm(int, double, Discrete)">
      <summary>VMP message to <c>n</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Constant value for <c>p</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>n</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="TrialCountAverageLogarithm(int, Beta, Discrete)">
      <summary>VMP message to <c>n</c>.</summary>
      <param name="sample">Constant value for <c>binomial</c>.</param>
      <param name="p">Incoming message from <c>p</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>n</c>. The formula is <c>exp(sum_(p) p(p) log(factor(binomial,n,p)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BufferTesterCopyOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="BufferTester.Copy{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="Buffer{T}(T, T, T)">
      <summary>Update the buffer <c>buffer</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BufferInit{T}(T)">
      <summary>Initialize the buffer <c>buffer</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>Initial value of buffer <c>buffer</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageConditional{T}(T, T)">
      <summary>EP message to <c>copy</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="buffer">Buffer <c>buffer</c>.</param>
      <returns>The outgoing EP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[p(copy) sum_(value) p(value) factor(copy,value)]/p(copy)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{T}(T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(copy) p(copy) factor(copy,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BufferOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Buffer.Value{T}()" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{T}(T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{T}(T)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="InferOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Buffer.Infer{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{T}(T, T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{T}(T, T)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="CharFromProbabilitiesOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Char(Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="CharacterAverageConditional(Dirichlet)">
      <summary>EP message to <c>character</c>.</summary>
      <param name="probabilities">Incoming message from <c>probabilities</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>character</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>character</c> as the random arguments are varied. The formula is <c>proj[p(character) sum_(probabilities) p(probabilities) factor(character,probabilities)]/p(character)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probabilities" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbabilitiesAverageConditional(DiscreteChar, Dirichlet, Dirichlet)">
      <summary>EP message to <c>probabilities</c>.</summary>
      <param name="character">Incoming message from <c>character</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probabilities">Incoming message from <c>probabilities</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probabilities</c> as the random arguments are varied. The formula is <c>proj[p(probabilities) sum_(character) p(character) factor(character,probabilities)]/p(probabilities)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="character" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Dirichlet, DiscreteChar)">
      <summary>Evidence message for EP.</summary>
      <param name="probabilities">Incoming message from <c>probabilities</c>.</param>
      <param name="character">Incoming message from <c>character</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probabilities,character) p(probabilities,character) factor(character,probabilities) / sum_character p(character) messageTo(character))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Dirichlet, Char)">
      <summary>Evidence message for EP.</summary>
      <param name="probabilities">Incoming message from <c>probabilities</c>.</param>
      <param name="character">Constant value for <c>character</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probabilities) p(probabilities) factor(character,probabilities))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="CharStringConcatOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Concat(Char, String)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ConcatAverageConditional(DiscreteChar, StringDistribution)">
      <summary>EP message to <c>concat</c>.</summary>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>The outgoing EP message to the <c>concat</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[p(concat) sum_(ch,str) p(ch,str) factor(concat,ch,str)]/p(concat)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(StringDistribution, DiscreteChar)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(concat,ch) p(concat,ch) factor(concat,ch,str)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChAverageConditional(StringDistribution, StringDistribution)">
      <summary>EP message to <c>ch</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>The outgoing EP message to the <c>ch</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ch</c> as the random arguments are varied. The formula is <c>proj[p(ch) sum_(concat,str) p(concat,str) factor(concat,ch,str)]/p(ch)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(StringDistribution, DiscreteChar, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat,ch,str) p(concat,ch,str) factor(concat,ch,str))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(StringDistribution, DiscreteChar, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat,ch,str) p(concat,ch,str) factor(concat,ch,str) / sum_concat p(concat) messageTo(concat))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(String, DiscreteChar, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ch,str) p(ch,str) factor(concat,ch,str))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ConcatOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Vector.Concat(Vector, Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Vector, Vector, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(concat,first,second))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, Vector, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat) p(concat) factor(concat,first,second))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(first,second) p(first,second) factor(concat,first,second))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(second) p(second) factor(concat,first,second))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, VectorGaussian, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(first) p(first) factor(concat,first,second))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(first,second) p(first,second) factor(concat,first,second))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(concat,first,second))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(second) p(second) factor(concat,first,second))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, VectorGaussian, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(first) p(first) factor(concat,first,second))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="to_concat">Outgoing message to <c>concat</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat) p(concat) factor(concat,first,second))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat) p(concat) factor(concat,first,second) / sum_concat p(concat) messageTo(concat))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageConditionalInit(VectorGaussian, VectorGaussian)">
      <summary />
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageConditionalInit(Vector, VectorGaussian)">
      <summary />
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageConditionalInit(VectorGaussian, Vector)">
      <summary />
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageConditional(VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>concat</c>.</summary>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[p(concat) sum_(first,second) p(first,second) factor(concat,first,second)]/p(concat)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageConditional(Vector, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>concat</c>.</summary>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[p(concat) sum_(second) p(second) factor(concat,first,second)]/p(concat)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageConditional(VectorGaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>concat</c>.</summary>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[p(concat) sum_(first) p(first) factor(concat,first,second)]/p(concat)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="FirstAverageConditional(VectorGaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>first</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>first</c> as the random arguments are varied. The formula is <c>proj[p(first) sum_(concat) p(concat) factor(concat,first,second)]/p(first)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="FirstAverageConditional(VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>first</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>first</c> as the random arguments are varied. The formula is <c>proj[p(first) sum_(concat,second) p(concat,second) factor(concat,first,second)]/p(first)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SecondAverageConditional(VectorGaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>second</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>second</c> as the random arguments are varied. The formula is <c>proj[p(second) sum_(concat) p(concat) factor(concat,first,second)]/p(second)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SecondAverageConditional(VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>second</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>second</c> as the random arguments are varied. The formula is <c>proj[p(second) sum_(concat,first) p(concat,first) factor(concat,first,second)]/p(second)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="FirstAverageConditional(Vector, VectorGaussian)">
      <summary>EP message to <c>first</c>.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>first</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SecondAverageConditional(Vector, Vector, VectorGaussian)">
      <summary>EP message to <c>second</c>.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>second</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SecondAverageConditional(Vector, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>second</c>.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>second</c> as the random arguments are varied. The formula is <c>proj[p(second) sum_(first) p(first) factor(concat,first,second)]/p(second)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(concat,first,second))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageLogarithmInit(VectorGaussian, VectorGaussian)">
      <summary />
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageLogarithmInit(Vector, VectorGaussian)">
      <summary />
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageLogarithmInit(VectorGaussian, Vector)">
      <summary />
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageLogarithm(VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>concat</c>.</summary>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[sum_(first,second) p(first,second) factor(concat,first,second)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageLogarithm(Vector, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>concat</c>.</summary>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[sum_(second) p(second) factor(concat,first,second)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ConcatAverageLogarithm(VectorGaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>concat</c>.</summary>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[sum_(first) p(first) factor(concat,first,second)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="FirstAverageLogarithm(VectorGaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>first</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="second">Constant value for <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>first</c> with <c>concat</c> integrated out. The formula is <c>sum_concat p(concat) factor(concat,first,second)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="FirstAverageLogarithm(VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>first</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>first</c>. Because the factor is deterministic, <c>concat</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(second) p(second) log(sum_concat p(concat) factor(concat,first,second)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SecondAverageLogarithm(VectorGaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>second</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>second</c> with <c>concat</c> integrated out. The formula is <c>sum_concat p(concat) factor(concat,first,second)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SecondAverageLogarithm(VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>second</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>second</c>. Because the factor is deterministic, <c>concat</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(first) p(first) log(sum_concat p(concat) factor(concat,first,second)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="concat" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="FirstAverageLogarithm(Vector, VectorGaussian)">
      <summary>VMP message to <c>first</c>.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>first</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SecondAverageLogarithm(Vector, Vector, VectorGaussian)">
      <summary>VMP message to <c>second</c>.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Constant value for <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>second</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SecondAverageLogarithm(Vector, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>second</c>.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>second</c>. The formula is <c>exp(sum_(first) p(first) log(factor(concat,first,second)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ConstrainEqualRandomOp{TDomain}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Constrain.EqualRandom{TDomain, TDistribution}(TDomain, TDistribution)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{TDistribution}(TDistribution)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(dist) p(dist) factor(value,dist)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{TDistribution}(TDistribution, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(value,dist) p(value,dist) factor(value,dist))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{TDistribution}(TDomain, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(value,dist) p(value,dist) factor(value,dist))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="dist" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDistribution}(TDistribution, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(value,dist) p(value,dist) factor(value,dist))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDistribution}(TDomain, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(value,dist) p(value,dist) factor(value,dist))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{TDistribution}(TDistribution, TDistribution)">
      <summary>Evidence message for VMP.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(value,dist) p(value,dist) log(factor(value,dist))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{TDistribution}(TDomain, TDistribution)">
      <summary>Evidence message for VMP.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(value,dist) p(value,dist) log(factor(value,dist))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="dist" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDistribution}(TDistribution)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>value</c>. The formula is <c>exp(sum_(dist) p(dist) log(factor(value,dist)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ConstrainEqualOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Constrain.Equal{T}(T, T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor{TDistribution}(TDistribution, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{TDistribution}(T, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{TDistribution}(TDistribution, T)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(T, T)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDistribution}(TDistribution, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDistribution}(T, TDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDistribution}(TDistribution, T)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(T, T)">
      <summary>Evidence message for EP.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional{TDistribution}(TDistribution, TDistribution)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="B">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(B) p(B) factor(A,B)]/p(A)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional{TDistribution}(T, TDistribution)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="B">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(B) p(B) factor(A,B)]/p(A)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional{TDistribution}(TDistribution, TDistribution)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(A) p(A) factor(A,B)]/p(B)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional{TDistribution}(T, TDistribution)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(A) p(A) factor(A,B)]/p(B)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm{TDistribution}(TDistribution, TDistribution)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="B">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. The formula is <c>exp(sum_(B) p(B) log(factor(A,B)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm{TDistribution}(TDistribution, TDistribution)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. The formula is <c>exp(sum_(A) p(A) log(factor(A,B)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm{TDistribution}(T, TDistribution)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="B">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. The formula is <c>exp(sum_(B) p(B) log(factor(A,B)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm{TDistribution}(T, TDistribution)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. The formula is <c>exp(sum_(A) p(A) log(factor(A,B)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AMaxConditional{TDistribution}(TDistribution, TDistribution)">
      <summary />
      <param name="B">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMaxConditional{TDistribution}(TDistribution, TDistribution)">
      <summary />
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ConstrainContainOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Constrain.Contain(IList{int}, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SetAverageLogarithm(int, BernoulliIntegerSubset)">
      <summary>VMP message to <c>set</c>.</summary>
      <param name="i">Constant value for <c>i</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>set</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="CopyOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.Copy{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(T, T)">
      <summary>Evidence message for EP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(copy,value) p(copy,value) factor(copy,value))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{TDist}(TDist, T)">
      <summary>Evidence message for EP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(copy,value) p(copy,value) factor(copy,value))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{TDist}(TDist, TDist)">
      <summary>Evidence message for EP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(copy,value) p(copy,value) factor(copy,value))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{TDist}(T, TDist)">
      <summary>Evidence message for EP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(copy,value) p(copy,value) factor(copy,value))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(T, T)">
      <summary>Evidence message for EP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(copy,value) p(copy,value) factor(copy,value) / sum_copy p(copy) messageTo(copy))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDist}(TDist)">
      <summary>Evidence message for EP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(copy) p(copy) factor(copy,value) / sum_copy p(copy) messageTo(copy))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{TDist}(T, TDist)">
      <summary>Evidence message for EP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(copy,value) p(copy,value) factor(copy,value) / sum_copy p(copy) messageTo(copy))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(copy) p(copy) factor(copy,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional(T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(copy) p(copy) factor(copy,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(T, TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(copy) p(copy) factor(copy,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>copy</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[p(copy) sum_(value) p(value) factor(copy,value)]/p(copy)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageConditional(T)">
      <summary>EP message to <c>copy</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[p(copy) sum_(value) p(value) factor(copy,value)]/p(copy)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{TDist}(TDist, TDist)">
      <summary>Evidence message for VMP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{TDist}(TDist, T)">
      <summary>Evidence message for VMP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{TDist}(T, TDist)">
      <summary>Evidence message for VMP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(T, T)">
      <summary>Evidence message for VMP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>copy</c> integrated out. The formula is <c>sum_copy p(copy) factor(copy,value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(T, TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>copy</c> integrated out. The formula is <c>sum_copy p(copy) factor(copy,value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>copy</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(copy,value)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyDeriv{TDist}(TDist)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional(Gamma)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(copy) p(copy) factor(copy,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageConditional(TruncatedGamma)">
      <summary>EP message to <c>copy</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[p(copy) sum_(value) p(value) factor(copy,value)]/p(copy)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional(Gaussian)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(copy) p(copy) factor(copy,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageConditional(TruncatedGaussian)">
      <summary>EP message to <c>copy</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[p(copy) sum_(value) p(value) factor(copy,value)]/p(copy)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>copy</c> integrated out. The formula is <c>sum_copy p(copy) factor(copy,value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageLogarithm(TruncatedGaussian)">
      <summary>VMP message to <c>copy</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(copy,value)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm(TruncatedGaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_value">Previous outgoing message to <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>copy</c> integrated out. The formula is <c>sum_copy p(copy) factor(copy,value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(TruncatedGaussian, Gaussian, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="to_value">Previous outgoing message to <c>value</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>copy</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_value">Previous outgoing message to <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(copy,value)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm(NonconjugateGaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="to_value">Previous outgoing message to <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>copy</c> integrated out. The formula is <c>sum_copy p(copy) factor(copy,value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CopyAverageLogarithm(Gaussian, NonconjugateGaussian, Gaussian)">
      <summary>VMP message to <c>copy</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="to_value">Previous outgoing message to <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(copy,value)]</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="MaxProductCopyOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.Copy{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueMaxConditional{TDist}(TDist, TDist)">
      <summary />
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CopyMaxConditional{TDist}(TDist)">
      <summary />
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="CountTrueOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.CountTrue(bool[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="PoissonBinomialTableInit(IList{Bernoulli})">
      <summary>Initialize the buffer <c>PoissonBinomialTable</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Initial value of buffer <c>PoissonBinomialTable</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="PoissonBinomialTable(IList{Bernoulli})">
      <summary>Update the buffer <c>PoissonBinomialTable</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>New value of buffer <c>PoissonBinomialTable</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CountAverageConditional(double[,])">
      <summary>EP message to <c>count</c>.</summary>
      <param name="poissonBinomialTable">Buffer <c>poissonBinomialTable</c>.</param>
      <returns>The outgoing EP message to the <c>count</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>count</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{TBernoulliArray}(TBernoulliArray, Discrete, double[,], TBernoulliArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Incoming message from <c>count</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="poissonBinomialTable">Buffer <c>poissonBinomialTable</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(count) p(count) factor(count,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="count" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{TBernoulliArray}(TBernoulliArray, int, double[,], TBernoulliArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="poissonBinomialTable">Buffer <c>poissonBinomialTable</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="count">Incoming message from <c>count</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(count) p(count) factor(count,array) / sum_count p(count) messageTo(count))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="count" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, double[,])">
      <summary>Evidence message for EP.</summary>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="poissonBinomialTable">Buffer <c>poissonBinomialTable</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(count,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, bool[])">
      <summary>Evidence message for EP.</summary>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(count,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="CutOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Cut.Backward{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BackwardAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>backward</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>backward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>backward</c> as the random arguments are varied. The formula is <c>proj[p(backward) sum_(value) p(value) factor(backward,value)]/p(backward)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BackwardAverageConditional(T)">
      <summary>EP message to <c>backward</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>backward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>backward</c> as the random arguments are varied. The formula is <c>proj[p(backward) sum_(value) p(value) factor(backward,value)]/p(backward)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BackwardAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>backward</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>backward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>backward</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(backward,value)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BackwardAverageLogarithm(T)">
      <summary>VMP message to <c>backward</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>backward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>backward</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(backward,value)]</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="CutForwardWhenOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Cut.ForwardWhen{T}(T, bool)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="forwardWhen">Incoming message from <c>forwardWhen</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(forwardWhen) p(forwardWhen) factor(forwardWhen,value,shouldCut)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ForwardWhenAverageConditional{TDist}(TDist, bool, TDist)">
      <summary>EP message to <c>forwardWhen</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <param name="shouldCut">Constant value for <c>shouldCut</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>forwardWhen</c> as the random arguments are varied. The formula is <c>proj[p(forwardWhen) sum_(value) p(value) factor(forwardWhen,value,shouldCut)]/p(forwardWhen)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ForwardWhenAverageConditional(T)">
      <summary>EP message to <c>forwardWhen</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>forwardWhen</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>forwardWhen</c> as the random arguments are varied. The formula is <c>proj[p(forwardWhen) sum_(value) p(value) factor(forwardWhen,value,shouldCut)]/p(forwardWhen)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ForwardWhenAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>forwardWhen</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>forwardWhen</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>forwardWhen</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(forwardWhen,value,shouldCut)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ForwardWhenAverageLogarithm(T)">
      <summary>VMP message to <c>forwardWhen</c>.</summary>
      <param name="Value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>forwardWhen</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>forwardWhen</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(forwardWhen,value,shouldCut)]</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DifferenceBetaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Difference(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="DifferenceAverageConditional(Beta, Beta)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a,b) p(a,b) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Beta)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="difference">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference,b) p(difference,b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="difference" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Beta)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="difference">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(difference,a) p(difference,a) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="difference" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="DoublePlusOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Difference(double, double)" /></description></item><item><description><see cref="Factor.Plus(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(difference,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Constant value for <c>a</c>.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_a">Outgoing message to <c>a</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(difference) p(difference) factor(difference,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Constant value for <c>a</c>.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="to_b">Outgoing message to <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(difference,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Constant value for <c>a</c>.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(difference,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference,b) p(difference,b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(double, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(Gaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference) p(difference) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(double, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="Sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a,b) p(a,b) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, Gaussian)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="Sum">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(b) p(b) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, double)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="Sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a) p(a) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, double)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="Sum">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>difference</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a,difference) p(a,difference) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Sum">Constant value for <c>a</c>.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(difference) p(difference) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Sum">Constant value for <c>a</c>.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DoubleMinusEvidenceOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Difference(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="difference">Incoming message from <c>difference</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(difference) p(difference) factor(difference,a,b) / sum_difference p(difference) messageTo(difference))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="difference">Constant value for <c>difference</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(difference,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="difference">Constant value for <c>difference</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="to_a">Outgoing message to <c>a</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(difference,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="difference">Constant value for <c>difference</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="to_b">Outgoing message to <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(difference,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="PlusWrappedGaussianOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Difference(double, double)" /></description></item><item><description><see cref="Factor.Plus(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SumAverageConditional(WrappedGaussian, WrappedGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference,b) p(difference,b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(WrappedGaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference) p(difference) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(double, WrappedGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(WrappedGaussian, WrappedGaussian)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a,b) p(a,b) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(WrappedGaussian, double)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a) p(a) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(WrappedGaussian, WrappedGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a,difference) p(a,difference) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(WrappedGaussian, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(WrappedGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Incoming message from <c>a</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageLogarithm(WrappedGaussian, WrappedGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>difference</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_difference p(difference) factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(WrappedGaussian, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>difference</c> integrated out. The formula is <c>sum_difference p(difference) factor(difference,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(double, WrappedGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(WrappedGaussian, WrappedGaussian)">
      <summary>VMP message to <c>difference</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(difference,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(WrappedGaussian, double)">
      <summary>VMP message to <c>difference</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(difference,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(WrappedGaussian, WrappedGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>difference</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_difference p(difference) factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(WrappedGaussian, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="PlusTruncatedGaussianOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Difference(double, double)" /></description></item><item><description><see cref="Factor.Plus(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SumAverageConditional(double, TruncatedGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(TruncatedGaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference) p(difference) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(TruncatedGaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference,b) p(difference,b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(Gaussian, TruncatedGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(difference,b) p(difference,b) factor(difference,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(TruncatedGaussian, double)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a) p(a) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, TruncatedGaussian)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="sum">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(b) p(b) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a,b) p(a,b) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, TruncatedGaussian)">
      <summary>EP message to <c>difference</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[p(difference) sum_(a,b) p(a,b) factor(difference,a,b)]/p(difference)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a,difference) p(a,difference) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, TruncatedGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a,difference) p(a,difference) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(TruncatedGaussian, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, TruncatedGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="sum">Constant value for <c>a</c>.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(difference) p(difference) factor(difference,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, TruncatedGaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>a</c>.</param>
      <param name="a">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(difference) p(difference) factor(difference,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, TruncatedGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>a</c>.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(difference,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(TruncatedGaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>difference</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(difference,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="DoubleMinusVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Difference(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(difference,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="DifferenceAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>difference</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(difference,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DifferenceAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>difference</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(difference,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DifferenceAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>difference</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>difference</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(difference,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DifferenceAverageLogarithm(double, double)">
      <summary>VMP message to <c>difference</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>difference</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>difference</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Difference">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>difference</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_difference p(difference) factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Difference" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Difference">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>difference</c> integrated out. The formula is <c>sum_difference p(difference) factor(difference,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Difference" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Difference">Constant value for <c>difference</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Difference">Constant value for <c>difference</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Difference">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>difference</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_difference p(difference) factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Difference" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Difference">Incoming message from <c>difference</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>difference</c> integrated out. The formula is <c>sum_difference p(difference) factor(difference,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Difference" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Difference">Constant value for <c>difference</c>.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(difference,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Difference">Constant value for <c>difference</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DirichletFromPseudoCountsOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Dirichlet.SampleFromPseudoCounts(Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Dirichlet, Vector, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sampleFromPseudoCounts</c>.</param>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sampleFromPseudoCounts) p(sampleFromPseudoCounts) factor(sampleFromPseudoCounts,pseudoCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Dirichlet, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sampleFromPseudoCounts</c>.</param>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sampleFromPseudoCounts) p(sampleFromPseudoCounts) factor(sampleFromPseudoCounts,pseudoCount) / sum_sampleFromPseudoCounts p(sampleFromPseudoCounts) messageTo(sampleFromPseudoCounts))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Dirichlet, Vector, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sampleFromPseudoCounts</c>.</param>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sampleFromPseudoCounts) p(sampleFromPseudoCounts) log(factor(sampleFromPseudoCounts,pseudoCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sampleFromPseudoCounts</c>.</param>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sampleFromPseudoCounts,pseudoCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sampleFromPseudoCounts</c>.</param>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sampleFromPseudoCounts,pseudoCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sampleFromPseudoCounts</c>.</param>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sampleFromPseudoCounts,pseudoCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Vector)">
      <summary>EP message to <c>sampleFromPseudoCounts</c>.</summary>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <returns>The outgoing EP message to the <c>sampleFromPseudoCounts</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sampleFromPseudoCounts</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Vector)">
      <summary>VMP message to <c>sampleFromPseudoCounts</c>.</summary>
      <param name="pseudoCounts">Constant value for <c>pseudoCount</c>.</param>
      <returns>The outgoing VMP message to the <c>sampleFromPseudoCounts</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sampleFromPseudoCounts</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DirichletSymmetricOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.DirichletSymmetric(int, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(Dirichlet, Gamma, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probMeanLog">Buffer <c>probMeanLog</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(prob,alpha) p(prob,alpha) log(factor(prob,K,alpha))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(alpha) p(alpha) log(factor(prob,K,alpha))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, ConjugateDirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(alpha) p(alpha) log(factor(prob,K,alpha))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Dirichlet, ConjugateDirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="alpha">Incoming message from <c>alpha</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(prob,alpha) p(prob,alpha) log(factor(prob,K,alpha))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Dirichlet, double, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <param name="probMeanLog">Buffer <c>probMeanLog</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(prob) p(prob) log(factor(prob,K,alpha))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbMeanLogInit(Vector)">
      <summary>Initialize the buffer <c>probMeanLog</c>.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <returns>Initial value of buffer <c>probMeanLog</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProbMeanLogInit(Dirichlet)">
      <summary>Initialize the buffer <c>probMeanLog</c>.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <returns>Initial value of buffer <c>probMeanLog</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProbMeanLog(Dirichlet, Vector)">
      <summary>Update the buffer <c>probMeanLog</c>.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProbMeanLog(Vector, Vector)">
      <summary>Update the buffer <c>probMeanLog</c>.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AlphaAverageLogarithm(Dirichlet, Gamma, Vector, Gamma)">
      <summary>VMP message to <c>alpha</c>.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probMeanLog">Buffer <c>probMeanLog</c>.</param>
      <param name="to_Alpha">Previous outgoing message to <c>Alpha</c>.</param>
      <returns>The outgoing VMP message to the <c>alpha</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>alpha</c>. The formula is <c>exp(sum_(prob) p(prob) log(factor(prob,K,alpha)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AlphaAverageLogarithm(Dirichlet, ConjugateDirichlet, Vector)">
      <summary>VMP message to <c>alpha</c>.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probMeanLog">Buffer <c>probMeanLog</c>.</param>
      <returns>The outgoing VMP message to the <c>alpha</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>alpha</c>. The formula is <c>exp(sum_(prob) p(prob) log(factor(prob,K,alpha)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AlphaAverageLogarithm(Vector, ConjugateDirichlet, Vector)">
      <summary>VMP message to <c>alpha</c>.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="alpha">Incoming message from <c>alpha</c>.</param>
      <param name="probMeanLog">Buffer <c>probMeanLog</c>.</param>
      <returns>The outgoing VMP message to the <c>alpha</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>alpha</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AlphaAverageLogarithm(Vector, Gamma, Gamma)">
      <summary>VMP message to <c>alpha</c>.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_Alpha">Previous outgoing message to <c>Alpha</c>.</param>
      <returns>The outgoing VMP message to the <c>alpha</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>alpha</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(double, Dirichlet)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>prob</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageLogarithmInit(int)">
      <summary />
      <param name="K">Constant value for <c>K</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(Gamma, Dirichlet)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(alpha) p(alpha) log(factor(prob,K,alpha)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(ConjugateDirichlet, Dirichlet)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(alpha) p(alpha) log(factor(prob,K,alpha)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Dirichlet, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob,alpha) p(prob,alpha) factor(prob,K,alpha))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(IList{double}, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob) p(prob) factor(prob,K,alpha))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{double}, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob) p(prob) factor(prob,K,alpha) / sum_prob p(prob) messageTo(prob))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{double}, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(prob) p(prob) log(factor(prob,K,alpha))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Dirichlet, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob) p(prob) factor(prob,K,alpha))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Dirichlet, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob) p(prob) factor(prob,K,alpha) / sum_prob p(prob) messageTo(prob))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageConditional(double, Dirichlet)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="alpha">Constant value for <c>alpha</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>prob</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageConditionalInit(int)">
      <summary />
      <param name="K">Constant value for <c>K</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AlphaAverageConditional(Gamma, Dirichlet, Gamma)">
      <summary>EP message to <c>alpha</c>.</summary>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>alpha</c> as the random arguments are varied. The formula is <c>proj[p(alpha) sum_(prob) p(prob) factor(prob,K,alpha)]/p(alpha)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageConditional(Gamma, Dirichlet)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="alpha">Incoming message from <c>alpha</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>prob</c> as the random arguments are varied. The formula is <c>proj[p(prob) sum_(alpha) p(alpha) factor(prob,K,alpha)]/p(prob)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="alpha" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="DirichletOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.DirichletFromMeanAndTotalCount(Vector, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(Vector, Vector, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(prob,mean,totalCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Dirichlet, Dirichlet, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(prob,mean,totalCount) p(prob,mean,totalCount) log(factor(prob,mean,totalCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Dirichlet, Vector, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(prob,totalCount) p(prob,totalCount) log(factor(prob,mean,totalCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(totalCount) p(totalCount) log(factor(prob,mean,totalCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Dirichlet, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean,totalCount) p(mean,totalCount) log(factor(prob,mean,totalCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(Dirichlet, Gamma, Dirichlet)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(mean,totalCount) p(mean,totalCount) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(Dirichlet, double, Dirichlet)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(Vector, Gamma, Dirichlet)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>prob</c>. The formula is <c>exp(sum_(totalCount) p(totalCount) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageLogarithm(Vector, double, Dirichlet)">
      <summary>VMP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>prob</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Dirichlet, Gamma, Dirichlet, Dirichlet)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_mean">Previous outgoing message to <c>mean</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(totalCount,prob) p(totalCount,prob) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageLogarithm(Vector, Gamma, Dirichlet, Gamma)">
      <summary>VMP message to <c>totalCount</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_totalCount">Previous outgoing message to <c>totalCount</c>.</param>
      <returns>The outgoing VMP message to the <c>totalCount</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>totalCount</c>. The formula is <c>exp(sum_(prob) p(prob) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageLogarithm(Dirichlet, Gamma, Dirichlet, Gamma)">
      <summary>VMP message to <c>totalCount</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_totalCount">Previous outgoing message to <c>totalCount</c>.</param>
      <returns>The outgoing VMP message to the <c>totalCount</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>totalCount</c>. The formula is <c>exp(sum_(mean,prob) p(mean,prob) log(factor(prob,mean,totalCount)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanMessageExpectations(Vector, Gamma, out double[], out double[], out double[])">
      <summary />
      <param name="meanQPseudoCount" />
      <param name="totalCountQ" />
      <param name="EELogGamma" />
      <param name="EELogMLogGamma" />
      <param name="EELogOneMinusMLogGamma" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="TotalCountMessageExpectations(Vector, Gamma, out double[], out double[], out double[])">
      <summary />
      <param name="meanQPseudoCount" />
      <param name="totalCountQ" />
      <param name="EELogGamma" />
      <param name="EELogSLogGamma" />
      <param name="EEMSDigamma" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="EvidenceMessageExpectations(Dirichlet, Gamma)">
      <summary />
      <param name="meanQ" />
      <param name="totalCountQ" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(prob,mean,totalCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(prob,mean,totalCount))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Dirichlet, Vector, Dirichlet, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="to_prob">Previous outgoing message to <c>prob</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob) p(prob) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbAverageConditional(Vector, double, Dirichlet)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>prob</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Dirichlet, Dirichlet, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob,mean,totalCount) p(prob,mean,totalCount) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Dirichlet, Vector, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob,totalCount) p(prob,totalCount) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(totalCount) p(totalCount) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Dirichlet, Dirichlet, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(prob,mean) p(prob,mean) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Dirichlet, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,totalCount) p(mean,totalCount) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Dirichlet, double)">
      <summary>Evidence message for EP.</summary>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(prob,mean,totalCount))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageConditional(Dirichlet, Gamma)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>prob</c> as the random arguments are varied. The formula is <c>proj[p(prob) sum_(mean,totalCount) p(mean,totalCount) factor(prob,mean,totalCount)]/p(prob)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageConditional(Dirichlet, double)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>prob</c> as the random arguments are varied. The formula is <c>proj[p(prob) sum_(mean) p(mean) factor(prob,mean,totalCount)]/p(prob)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageConditional(Vector, Gamma)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>prob</c> as the random arguments are varied. The formula is <c>proj[p(prob) sum_(totalCount) p(totalCount) factor(prob,mean,totalCount)]/p(prob)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbAverageConditional(Vector, double)">
      <summary>EP message to <c>prob</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <returns>The outgoing EP message to the <c>prob</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>prob</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(Dirichlet, Gamma, Vector, Dirichlet)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(totalCount) p(totalCount) factor(prob,mean,totalCount)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Dirichlet, double, Vector, Dirichlet)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Dirichlet, double, Dirichlet, Dirichlet)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Constant value for <c>totalCount</c>.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(prob) p(prob) factor(prob,mean,totalCount)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Dirichlet, Gamma, Dirichlet, Dirichlet)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(totalCount,prob) p(totalCount,prob) factor(prob,mean,totalCount)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageConditional(Vector, Gamma, Vector, Gamma)">
      <summary>EP message to <c>totalCount</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>totalCount</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageConditional(Vector, Gamma, Dirichlet, Gamma)">
      <summary>EP message to <c>totalCount</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>totalCount</c> as the random arguments are varied. The formula is <c>proj[p(totalCount) sum_(prob) p(prob) factor(prob,mean,totalCount)]/p(totalCount)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageConditional(Dirichlet, Gamma, Vector, Gamma)">
      <summary>EP message to <c>totalCount</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Constant value for <c>prob</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>totalCount</c> as the random arguments are varied. The formula is <c>proj[p(totalCount) sum_(mean) p(mean) factor(prob,mean,totalCount)]/p(totalCount)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TotalCountAverageConditional(Dirichlet, Gamma, Dirichlet, Gamma)">
      <summary>EP message to <c>totalCount</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="totalCount">Incoming message from <c>totalCount</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="prob">Incoming message from <c>prob</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>totalCount</c> as the random arguments are varied. The formula is <c>proj[p(totalCount) sum_(mean,prob) p(mean,prob) factor(prob,mean,totalCount)]/p(totalCount)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="totalCount" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="prob" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="DiscreteFromDirichletOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Discrete.Sample(Vector)" /></description></item><item><description><see cref="Factor.Discrete(Vector)" /></description></item><item><description><see cref="EnumSupport.DiscreteEnum{TEnum}(Vector)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probs">Incoming message from <c>probs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probs) p(probs) factor(sample,probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probs">Incoming message from <c>probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probs) p(probs) factor(sample,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probs">Incoming message from <c>probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,probs) p(sample,probs) factor(sample,probs) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probs) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleConditional(Vector, Discrete)">
      <summary>Gibbs message to <c>sample</c>.</summary>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Vector, Discrete)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Vector, Discrete)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(Dirichlet)">
      <summary />
      <param name="probs">Incoming message from <c>probs</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(Dirichlet)">
      <summary />
      <param name="probs">Incoming message from <c>probs</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(Vector)">
      <summary />
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(Vector)">
      <summary />
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProbsConditional(int, Dirichlet)">
      <summary>Gibbs message to <c>probs</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probs</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbsAverageConditional(int, Dirichlet)">
      <summary>EP message to <c>probs</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probs</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbsAverageLogarithm(int, Dirichlet)">
      <summary>VMP message to <c>probs</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probs</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Dirichlet, Discrete)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probs">Incoming message from <c>probs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(probs) p(probs) factor(sample,probs)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probs" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Dirichlet, Discrete)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probs">Incoming message from <c>probs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(probs) p(probs) log(factor(sample,probs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probs" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbsAverageLogarithm(Discrete, Dirichlet)">
      <summary>VMP message to <c>probs</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>probs</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,probs)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbsAverageConditional(Discrete, Vector, Dirichlet)">
      <summary>EP message to <c>probs</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probs</c> as the random arguments are varied. The formula is <c>proj[p(probs) sum_(sample) p(sample) factor(sample,probs)]/p(probs)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbsAverageConditional(Discrete, Dirichlet, Dirichlet)">
      <summary>EP message to <c>probs</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="probs">Incoming message from <c>probs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probs</c> as the random arguments are varied. The formula is <c>proj[p(probs) sum_(sample) p(sample) factor(sample,probs)]/p(probs)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Discrete, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probs">Incoming message from <c>probs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,probs) p(sample,probs) log(factor(sample,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probs" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Discrete, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probs">Incoming message from <c>probs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(probs) p(probs) log(factor(sample,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probs" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(int, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DiscreteEnumFromDirichletOp{TEnum}">
    <doc>
      <summary>Provides outgoing messages for <see cref="EnumSupport.DiscreteEnum{TEnum}(Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(TEnum, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="probs">Incoming message from <c>Probs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sample,Probs) p(Sample,Probs) factor(Sample,Probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(TEnum, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="probs">Constant value for <c>Probs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sample) p(Sample) factor(Sample,Probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(TEnum, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="probs">Incoming message from <c>Probs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(Sample,Probs) p(Sample,Probs) log(factor(Sample,Probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(TEnum, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="probs">Constant value for <c>Probs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(Sample) p(Sample) log(factor(Sample,Probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(TEnum, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="probs">Incoming message from <c>Probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sample,Probs) p(Sample,Probs) factor(Sample,Probs) / sum_Sample p(Sample) messageTo(Sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(TEnum, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="probs">Constant value for <c>Probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sample) p(Sample) factor(Sample,Probs) / sum_Sample p(Sample) messageTo(Sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbsAverageConditional(TEnum, Dirichlet)">
      <summary>EP message to <c>Probs</c>.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Probs</c> as the random arguments are varied. The formula is <c>proj[p(Probs) sum_(Sample) p(Sample) factor(Sample,Probs)]/p(Probs)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbsAverageLogarithm(TEnum, Dirichlet)">
      <summary>VMP message to <c>Probs</c>.</summary>
      <param name="sample">Incoming message from <c>Sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>Probs</c>. The formula is <c>exp(sum_(Sample) p(Sample) log(factor(Sample,Probs)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DiscreteFromDiscreteOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Discrete(int, Matrix)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Discrete, Discrete, Matrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,selector) p(sample,selector) factor(sample,selector,probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete, Discrete, Matrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,selector) p(sample,selector) factor(sample,selector,probs) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Discrete, Matrix, Discrete)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="selector">Incoming message from <c>selector</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(selector) p(selector) factor(sample,selector,probs)]/p(sample)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SelectorAverageConditional(Discrete, Matrix, Discrete)">
      <summary>EP message to <c>selector</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probs">Constant value for <c>probs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>selector</c> as the random arguments are varied. The formula is <c>proj[p(selector) sum_(sample) p(sample) factor(sample,selector,probs)]/p(selector)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DiscreteUniform">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.DiscreteUniform(int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="size">Constant value for <c>size</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,size))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="size">Constant value for <c>size</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,size))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="size">Incoming message from <c>size</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(size) p(size) factor(sample,size))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="size">Incoming message from <c>size</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(size) p(size) factor(sample,size))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,size))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="size">Incoming message from <c>size</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,size) p(sample,size) factor(sample,size) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="size">Constant value for <c>size</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,size) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(int, Discrete)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="size">Constant value for <c>size</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Discrete, Discrete)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="size">Incoming message from <c>size</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(size) p(size) factor(sample,size)]/p(sample)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(int)">
      <summary />
      <param name="size">Constant value for <c>size</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(Discrete)">
      <summary />
      <param name="size">Incoming message from <c>size</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SizeAverageConditional(int, Discrete)">
      <summary>EP message to <c>size</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>size</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SizeAverageConditional(Discrete, Discrete)">
      <summary>EP message to <c>size</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>size</c> as the random arguments are varied. The formula is <c>proj[p(size) sum_(sample) p(sample) factor(sample,size)]/p(size)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Discrete, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="size">Constant value for <c>size</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,size))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="size">Incoming message from <c>size</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(size) p(size) log(factor(sample,size))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="size">Constant value for <c>size</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,size))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Discrete, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="size">Incoming message from <c>size</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,size) p(sample,size) log(factor(sample,size))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(int)">
      <summary />
      <param name="size">Constant value for <c>size</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(Discrete)">
      <summary />
      <param name="size">Incoming message from <c>size</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(int, Discrete)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="size">Constant value for <c>size</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Discrete, Discrete)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="size">Incoming message from <c>size</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(size) p(size) log(factor(sample,size)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SizeAverageLogarithm(int, Discrete)">
      <summary>VMP message to <c>size</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>size</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SizeAverageLogarithm(Discrete, Discrete)">
      <summary>VMP message to <c>size</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>size</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,size)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="DoubleOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Double(int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(double, int)">
      <summary>Evidence message for EP.</summary>
      <param name="Double">Constant value for <c>double</c>.</param>
      <param name="Integer">Constant value for <c>integer</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(double,integer))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="Double">Constant value for <c>double</c>.</param>
      <param name="Integer">Incoming message from <c>integer</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(integer) p(integer) factor(double,integer))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, int)">
      <summary>Evidence message for EP.</summary>
      <param name="Double">Incoming message from <c>double</c>.</param>
      <param name="Integer">Constant value for <c>integer</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(double) p(double) factor(double,integer) / sum_double p(double) messageTo(double))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="Double">Incoming message from <c>double</c>.</param>
      <param name="Integer">Incoming message from <c>integer</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(double,integer) p(double,integer) factor(double,integer))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Discrete, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Double">Incoming message from <c>double</c>.</param>
      <param name="Integer">Incoming message from <c>integer</c>.</param>
      <param name="to_double">Previous outgoing message to <c>double</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(double,integer) p(double,integer) factor(double,integer) / sum_double p(double) messageTo(double))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="DoubleAverageConditional(Gaussian, Discrete)">
      <summary>EP message to <c>double</c>.</summary>
      <param name="Double">Incoming message from <c>double</c>.</param>
      <param name="Integer">Incoming message from <c>integer</c>.</param>
      <returns>The outgoing EP message to the <c>double</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>double</c> as the random arguments are varied. The formula is <c>proj[p(double) sum_(integer) p(integer) factor(double,integer)]/p(double)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="IntegerAverageConditional(Gaussian, Discrete)">
      <summary>EP message to <c>integer</c>.</summary>
      <param name="Double">Incoming message from <c>double</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>integer</c> as the random arguments are varied. The formula is <c>proj[p(integer) sum_(double) p(double) factor(double,integer)]/p(integer)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="EnumToIntOp{TEnum}">
    <doc>
      <summary>Provides outgoing messages for <see cref="EnumSupport.EnumToInt{TEnum}(TEnum)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(int, TEnum)">
      <summary>Evidence message for EP.</summary>
      <param name="Int">Constant value for <c>Int</c>.</param>
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Enum) p(Enum) factor(Int,Enum))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, TEnum)">
      <summary>Evidence message for EP.</summary>
      <param name="Int">Constant value for <c>Int</c>.</param>
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Enum) p(Enum) factor(Int,Enum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, TEnum)">
      <summary>Evidence message for VMP.</summary>
      <param name="Int">Constant value for <c>Int</c>.</param>
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, DiscreteEnum{TEnum})">
      <summary>Evidence message for EP.</summary>
      <param name="Int">Constant value for <c>Int</c>.</param>
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Enum) p(Enum) factor(Int,Enum))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, DiscreteEnum{TEnum})">
      <summary>Evidence message for EP.</summary>
      <param name="Int">Constant value for <c>Int</c>.</param>
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Enum) p(Enum) factor(Int,Enum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Discrete, TEnum)">
      <summary>Evidence message for EP.</summary>
      <param name="Int">Incoming message from <c>Int</c>.</param>
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Int,Enum) p(Int,Enum) factor(Int,Enum))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Discrete, DiscreteEnum{TEnum}, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="Int">Incoming message from <c>Int</c>.</param>
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <param name="to_Int">Outgoing message to <c>Int</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Int,Enum) p(Int,Enum) factor(Int,Enum))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="Int">Incoming message from <c>Int</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Int) p(Int) factor(Int,Enum) / sum_Int p(Int) messageTo(Int))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Int,Enum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="IntAverageConditional(DiscreteEnum{TEnum}, Discrete)">
      <summary>EP message to <c>Int</c>.</summary>
      <param name="Enum">Incoming message from <c>Enum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Int</c> as the random arguments are varied. The formula is <c>proj[p(Int) sum_(Enum) p(Enum) factor(Int,Enum)]/p(Int)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Enum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IntAverageConditionalInit(DiscreteEnum{TEnum})">
      <summary />
      <param name="Enum">Incoming message from <c>Enum</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="EnumAverageConditional(Discrete, DiscreteEnum{TEnum})">
      <summary>EP message to <c>Enum</c>.</summary>
      <param name="Int">Incoming message from <c>Int</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Enum</c> as the random arguments are varied. The formula is <c>proj[p(Enum) sum_(Int) p(Int) factor(Int,Enum)]/p(Enum)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Int" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="EnumAverageConditional(int, DiscreteEnum{TEnum})">
      <summary>EP message to <c>Enum</c>.</summary>
      <param name="Int">Constant value for <c>Int</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Enum</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="IntAverageLogarithm(DiscreteEnum{TEnum}, Discrete)">
      <summary>VMP message to <c>Int</c>.</summary>
      <param name="Enum">Incoming message from <c>Enum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Int</c> as the random arguments are varied. The formula is <c>proj[sum_(Enum) p(Enum) factor(Int,Enum)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Enum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="EnumAverageLogarithm(Discrete, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>Enum</c>.</summary>
      <param name="Int">Incoming message from <c>Int</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Enum</c> with <c>Int</c> integrated out. The formula is <c>sum_Int p(Int) factor(Int,Enum)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Int" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="EnumAverageLogarithm(int, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>Enum</c>.</summary>
      <param name="Int">Constant value for <c>Int</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Enum</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DiscreteEnumAreEqualOp{TEnum}">
    <doc>
      <summary>Provides outgoing messages for <see cref="EnumSupport.AreEqual{TEnum}(TEnum, TEnum)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AAverageConditional(Bernoulli, DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(areEqual,b) p(areEqual,b) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, TEnum, DiscreteEnum{TEnum})">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(areEqual,b) p(areEqual,b) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, TEnum, DiscreteEnum{TEnum})">
      <summary>EP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(areEqual,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, TEnum, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(areEqual,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, TEnum, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(areEqual,a) p(areEqual,a) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, TEnum, DiscreteEnum{TEnum})">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(areEqual,a) p(areEqual,a) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, TEnum, DiscreteEnum{TEnum})">
      <summary>EP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(areEqual,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, TEnum, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>areEqual</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_areEqual p(areEqual) factor(areEqual,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, TEnum, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(areEqual,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(a,b) p(a,b) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(TEnum, DiscreteEnum{TEnum})">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(a,b) p(a,b) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageConditional(DiscreteEnum{TEnum}, TEnum)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(a,b) p(a,b) factor(areEqual,a,b)]/p(areEqual)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(areEqual,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(TEnum, DiscreteEnum{TEnum})">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(areEqual,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AreEqualAverageLogarithm(DiscreteEnum{TEnum}, TEnum)">
      <summary>VMP message to <c>areEqual</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(areEqual,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, TEnum, TEnum)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual,a,b) p(areEqual,a,b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, TEnum, TEnum)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, TEnum, DiscreteEnum{TEnum})">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, DiscreteEnum{TEnum}, TEnum)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, DiscreteEnum{TEnum}, DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, TEnum, DiscreteEnum{TEnum}, DiscreteEnum{TEnum})">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Outgoing message to <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, DiscreteEnum{TEnum}, TEnum, DiscreteEnum{TEnum})">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, TEnum, TEnum)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,a,b) / sum_areEqual p(areEqual) messageTo(areEqual))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(areEqual,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ExpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Exp(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Constant value for <c>exp</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(exp,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Constant value for <c>exp</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(exp,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="exp">Constant value for <c>exp</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(exp,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(CanGetLogProb{double}, double)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp) p(exp) factor(exp,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Constant value for <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(d) p(d) factor(exp,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor_slow(Gamma, Gaussian)">
      <summary />
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, Gaussian, Gamma, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_exp">Outgoing message to <c>exp</c>.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d) / sum_exp p(exp) messageTo(exp))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Constant value for <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(d) p(d) factor(exp,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(GammaPower, Gaussian, GammaPower, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_exp">Outgoing message to <c>exp</c>.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d) / sum_exp p(exp) messageTo(exp))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(GammaPower, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExpAverageConditional(GammaPower, Gaussian, Gaussian)">
      <summary>EP message to <c>exp</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>exp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exp</c> as the random arguments are varied. The formula is <c>proj[p(exp) sum_(d) p(d) factor(exp,d)]/p(exp)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageConditional(GammaPower, Gaussian, Gaussian)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(exp) p(exp) factor(exp,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExpAverageConditional(Gamma, Gaussian, Gaussian)">
      <summary>EP message to <c>exp</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>exp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exp</c> as the random arguments are varied. The formula is <c>proj[p(exp) sum_(d) p(d) factor(exp,d)]/p(exp)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExpAverageConditionalInit(Gaussian)">
      <summary />
      <param name="d">Incoming message from <c>d</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DAverageConditional(double)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Constant value for <c>exp</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="DAverageConditional(Gamma, Gaussian, Gaussian)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(exp) p(exp) factor(exp,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(exp,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExpAverageLogarithmInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ExpAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>exp</c>.</summary>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>exp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exp</c> as the random arguments are varied. The formula is <c>proj[sum_(d) p(d) factor(exp,d)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExpAverageLogarithm(NonconjugateGaussian)">
      <summary>VMP message to <c>exp</c>.</summary>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>exp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exp</c> as the random arguments are varied. The formula is <c>proj[sum_(d) p(d) factor(exp,d)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExpAverageLogarithm(Gaussian, GammaPower)">
      <summary>VMP message to <c>exp</c>.</summary>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exp</c> as the random arguments are varied. The formula is <c>proj[sum_(d) p(d) factor(exp,d)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageLogarithm(Gamma, NonconjugateGaussian, NonconjugateGaussian)">
      <summary>VMP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> with <c>exp</c> integrated out. The formula is <c>sum_exp p(exp) factor(exp,d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DNonconjugateAverageLogarithm(Gamma, Gaussian, NonconjugateGaussian)">
      <summary />
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageLogarithm(Gamma, Gaussian, Gaussian)">
      <summary>VMP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>The outgoing VMP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> with <c>exp</c> integrated out. The formula is <c>sum_exp p(exp) factor(exp,d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageLogarithm(double)">
      <summary>VMP message to <c>d</c>.</summary>
      <param name="exp">Constant value for <c>exp</c>.</param>
      <returns>The outgoing VMP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ExpOp_Slow">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Exp(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="DAverageConditional(GammaPower, Gaussian)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(exp) p(exp) factor(exp,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageConditional(Gamma, double)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(exp) p(exp) factor(exp,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageConditional(Gamma, Gaussian)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(exp) p(exp) factor(exp,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="FindMaximum(Gamma, Gaussian)">
      <summary />
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetIntegrationBounds(Gamma, Gaussian, out double, out double, out double)">
      <summary />
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="dmode" />
      <param name="dminMinusMode" />
      <param name="dmaxMinusMode" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ExpOp_LaplaceProp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Exp(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Gamma, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, Gaussian, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <param name="to_exp">Previous outgoing message to <c>exp</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d) / sum_exp p(exp) messageTo(exp))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageConditional(Gamma, Gaussian, Gaussian)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(exp) p(exp) factor(exp,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExpAverageConditional(Gamma, Gaussian, Gaussian)">
      <summary>EP message to <c>exp</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>exp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exp</c> as the random arguments are varied. The formula is <c>proj[p(exp) sum_(d) p(d) factor(exp,d)]/p(exp)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ExpOp_Laplace">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Exp(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="XInit(Gaussian)">
      <summary>Initialize the buffer <c>x</c>.</summary>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>x</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="X2(Gamma, Gaussian, double)">
      <summary />
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Buffer <c>x</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="X(Gamma, Gaussian)">
      <summary>Update the buffer <c>x</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>New value of buffer <c>x</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Buffer <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, Gaussian, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Buffer <c>x</c>.</param>
      <param name="to_exp">Previous outgoing message to <c>exp</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(exp,d) p(exp,d) factor(exp,d) / sum_exp p(exp) messageTo(exp))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageConditional(Gamma, Gaussian, double)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Buffer <c>x</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(exp) p(exp) factor(exp,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExpAverageConditional(Gamma, Gaussian, double)">
      <summary>EP message to <c>exp</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="x">Buffer <c>x</c>.</param>
      <returns>The outgoing EP message to the <c>exp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>exp</c> as the random arguments are varied. The formula is <c>proj[p(exp) sum_(d) p(d) factor(exp,d)]/p(exp)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ExpOp_BFGS">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Exp(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="DAverageLogarithm(Gamma, Gaussian, Gaussian)">
      <summary>VMP message to <c>d</c>.</summary>
      <param name="exp">Incoming message from <c>exp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_d">Previous outgoing message to <c>d</c>.</param>
      <returns>The outgoing VMP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> with <c>exp</c> integrated out. The formula is <c>sum_exp p(exp) factor(exp,d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="exp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaFromShapeAndRateOpBase">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.GammaFromShapeAndRate(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,rate) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(rate) p(rate) factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(rate) p(rate) factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageConditional(double, double)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <returns>The outgoing EP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>rate</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,rate))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,shape,rate) p(sample,shape,rate) factor(sample,shape,rate))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,shape) p(sample,shape) factor(sample,shape,rate))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(shape,rate) p(shape,rate) factor(sample,shape,rate))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(shape) p(shape) factor(sample,shape,rate))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gamma, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(shape,rate) p(shape,rate) factor(sample,shape,rate)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gamma, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(shape) p(shape) factor(sample,shape,rate)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RateAverageConditional(Gamma, Gamma)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rate</c> as the random arguments are varied. The formula is <c>proj[p(rate) sum_(sample,shape) p(sample,shape) factor(sample,shape,rate)]/p(rate)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ShapeAverageConditional(Gamma, Gamma, double, Gamma)">
      <summary>EP message to <c>shape</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>shape</c> as the random arguments are varied. The formula is <c>proj[p(shape) sum_(sample) p(sample) factor(sample,shape,rate)]/p(shape)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ShapeAverageConditional(double, Gamma, Gamma, Gamma)">
      <summary>EP message to <c>shape</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>shape</c> as the random arguments are varied. The formula is <c>proj[p(shape) sum_(rate) p(rate) factor(sample,shape,rate)]/p(shape)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ShapeAverageConditional(double, Gamma, double, Gamma)">
      <summary>EP message to <c>shape</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>shape</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ShapeAverageConditional(Gamma, Gamma, Gamma, Gamma)">
      <summary>EP message to <c>shape</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>shape</c> as the random arguments are varied. The formula is <c>proj[p(shape) sum_(sample,rate) p(sample,rate) factor(sample,shape,rate)]/p(shape)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Gamma, Gamma, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,shape,rate) p(sample,shape,rate) log(factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Gamma, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(shape,rate) p(shape,rate) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(shape) p(shape) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(rate) p(rate) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>rate</c>. The formula is <c>exp(sum_(sample,shape) p(sample,shape) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RateAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>rate</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>rate</c>. The formula is <c>exp(sum_(shape) p(shape) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RateAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <returns>The outgoing VMP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>rate</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RateAverageLogarithm(double, double)">
      <summary>VMP message to <c>rate</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <returns>The outgoing VMP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>rate</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ShapeAverageLogarithm(Gamma, Gamma, Gamma, Gamma)">
      <summary>VMP message to <c>shape</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Incoming message from <c>shape</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_shape">Previous outgoing message to <c>shape</c>.</param>
      <returns>The outgoing VMP message to the <c>shape</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>shape</c>. The formula is <c>exp(sum_(sample,rate) p(sample,rate) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="shape" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="CalculateDerivatives(Gamma)">
      <summary />
      <param name="q" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CalculateDerivativesTrapezoid(Gamma)">
      <summary />
      <param name="q" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CalculateDerivativesNaive(Gamma)">
      <summary />
      <param name="q" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ELogGamma(Gamma)">
      <summary />
      <param name="q" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaFromShapeAndRateOp_Slow">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.GammaFromShapeAndRate(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Gamma, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,rate) p(sample,rate) factor(sample,shape,rate))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, double, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sample">Previous outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,rate) p(sample,rate) factor(sample,shape,rate) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gamma, double, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(rate) p(rate) factor(sample,shape,rate)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RateAverageConditional(Gamma, double, Gamma)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <returns>The outgoing EP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rate</c> as the random arguments are varied. The formula is <c>proj[p(rate) sum_(sample) p(sample) factor(sample,shape,rate)]/p(rate)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaFromShapeAndRateOp_Laplace">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.GammaFromShapeAndRate(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="QInit()">
      <summary>Initialize the buffer <c>Q</c>.</summary>
      <returns>Initial value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Q(Gamma, double, Gamma)">
      <summary>Update the buffer <c>Q</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>New value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, double, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,rate) p(sample,rate) factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, double, Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <param name="to_sample">Previous outgoing message to <c>sample</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,rate) p(sample,rate) factor(sample,shape,rate) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageConditional(Gamma, double, Gamma, Gamma)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rate</c> as the random arguments are varied. The formula is <c>proj[p(rate) sum_(sample) p(sample) factor(sample,shape,rate)]/p(rate)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gamma, double, Gamma, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(rate) p(rate) factor(sample,shape,rate)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaFromMeanAndVarianceOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gamma.SampleFromMeanAndVariance(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaFromShapeAndScaleOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gamma.Sample(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,scale))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,scale))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,scale) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,scale))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Gamma, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,shape,scale))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,scale))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaPowerProductOp_Laplace">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="QInit()">
      <summary>Initialize the buffer <c>Q</c>.</summary>
      <returns>Initial value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Q(GammaPower, GammaPower, GammaPower)">
      <summary>Update the buffer <c>Q</c>.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>New value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(GammaPower, GammaPower, GammaPower, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(GammaPower, GammaPower, GammaPower, GammaPower, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, GammaPower, GammaPower, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(GammaPower, GammaPower, GammaPower, Gamma, GammaPower)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(GammaPower, GammaPower, GammaPower, Gamma, GammaPower)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(GammaPower, GammaPower, GammaPower, Gamma, GammaPower)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaProductOp_Laplace">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="QInit()">
      <summary>Initialize the buffer <c>Q</c>.</summary>
      <returns>Initial value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Q(Gamma, Gamma, Gamma)">
      <summary>Update the buffer <c>Q</c>.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>New value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, Gamma, Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gamma, Gamma, Gamma, Gamma)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gamma, Gamma, Gamma, Gamma)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gamma, Gamma, Gamma, Gamma)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ToGamma(GammaPower)">
      <summary />
      <param name="gammaPower" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditionalInit(Gaussian, Gaussian)">
      <summary />
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ADerivatives(double, double, double, Gaussian, out double, out double)">
      <summary />
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="mB" />
      <param name="vB" />
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="dlogf" />
      <param name="ddlogf" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOpEvidenceBase">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <param name="to_product">Outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="to_product">Outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product) p(product) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product) p(product) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOpBase">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(double, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(double, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>product</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(double, TruncatedGaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(TruncatedGaussian, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(TruncatedGaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(TruncatedGaussian, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp_Slow">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="GetIntegrationBoundsForA(double, double, double, double, double, double, out double, out double, out double)">
      <summary />
      <param name="mProduct" />
      <param name="vProduct" />
      <param name="mA" />
      <param name="pA" />
      <param name="mB" />
      <param name="vB" />
      <param name="amode" />
      <param name="amin" />
      <param name="amax" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(double, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp_SHG09">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Product(double, double)" /></description></item><item><description><see cref="Factor.Product_SHG09(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional2(Gaussian, Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(double, Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, double, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp_LaplaceProp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional2(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp_Laplace">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AhatInit(Gaussian)">
      <summary>Initialize the buffer <c>ahat</c>.</summary>
      <param name="a">Incoming message from <c>a</c>.</param>
      <returns>Initial value of buffer <c>ahat</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Ahat(Gaussian, Gaussian, Gaussian, double)">
      <summary>Update the buffer <c>ahat</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="ahat">Buffer <c>ahat</c>.</param>
      <returns>New value of buffer <c>ahat</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, Gaussian, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="ahat">Buffer <c>ahat</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="ahat">Buffer <c>ahat</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="ahat">Buffer <c>ahat</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="GetMoments(int, Gaussian, Gaussian, Gaussian, double)">
      <summary />
      <param name="index" />
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="ahat">Buffer <c>ahat</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp_Laplace2">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp6">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp3">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="Weights(double, Gaussian)">
      <summary>Update the buffer <c>weights</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>New value of buffer <c>weights</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Weights(Gaussian, double)">
      <summary>Update the buffer <c>weights</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>New value of buffer <c>weights</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Weights(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Update the buffer <c>weights</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>New value of buffer <c>weights</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, Vector)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="weights">Buffer <c>weights</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(double, Gaussian, Vector)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="weights">Buffer <c>weights</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, double, Vector)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="weights">Buffer <c>weights</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Vector)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="weights">Buffer <c>weights</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, double, Vector)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="weights">Buffer <c>weights</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Vector)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="weights">Buffer <c>weights</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, double, Vector)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="weights">Buffer <c>weights</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp4">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(double, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, double, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp5">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="GetExpMoments(Gaussian)">
      <summary />
      <param name="x" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetLogMoments(Gaussian)">
      <summary />
      <param name="x" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, double, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, double, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp_EM">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="to_A">Outgoing message to <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional2(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional2(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_product">Previous outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductOp_PointB">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gaussian, TruncatedGaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, TruncatedGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, TruncatedGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, TruncatedGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, TruncatedGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianProductVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductDeriv(Gaussian, Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductDeriv(Gaussian, Gaussian, double, Gaussian)">
      <summary />
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductDeriv(Gaussian, double, Gaussian, Gaussian)">
      <summary />
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double, TruncatedGaussian)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(TruncatedGaussian, double)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaProductOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageConditional(double, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>product</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(double, Gamma)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Gamma, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(double, GammaPower)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(GammaPower, double)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gamma, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(GammaPower, double, GammaPower)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, double, GammaPower)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(double, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(double, Gamma)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(double, Gamma)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gamma, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(GammaPower, double, GammaPower)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(double, double, GammaPower)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(GammaPower, GammaPower, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(GammaPower, double, GammaPower)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, GammaPower)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, GammaPower, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(GammaPower, GammaPower, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(GammaPower, double, GammaPower)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, GammaPower, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, GammaPower)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaProductVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(double, Gamma, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, GammaPower, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, GammaPower)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(GammaPower)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double, GammaPower)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(GammaPower, double)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(GammaPower, double, GammaPower)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double, GammaPower)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(GammaPower, double, GammaPower)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double, GammaPower)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ProductGaussianBetaVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageLogarithm(Gaussian, Beta)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double, Beta)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Beta)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Beta)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Gaussian, Beta, Beta)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(product,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, double, Beta, Beta)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianBetaProductOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProposalDistribution(Gaussian, Gaussian, Beta)">
      <summary />
      <param name="y" />
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogisticProposalDistribution(Beta, Gaussian)">
      <summary />
      <param name="beta" />
      <param name="gauss" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ProductGaussianGammaVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductAverageLogarithm(Gaussian, Gamma)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>product</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Gamma)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(product,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, double, Gamma, Gamma)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="WrappedGaussianProductOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Product(double, double)" /></description></item><item><description><see cref="Factor.Ratio(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AAverageConditional(WrappedGaussian, double, WrappedGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(WrappedGaussian, double, WrappedGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, double, WrappedGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(WrappedGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(WrappedGaussian, double, WrappedGaussian)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double, WrappedGaussian, WrappedGaussian)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(WrappedGaussian, double, WrappedGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(WrappedGaussian, double, WrappedGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double, WrappedGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="CasesOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.Cases(bool)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="CasesAverageConditional{BernoulliList}(Bernoulli, BernoulliList)">
      <summary>EP message to <c>cases</c>.</summary>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>cases</c> as the random arguments are varied. The formula is <c>proj[p(cases) sum_(b) p(b) factor(cases,b)]/p(cases)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(IList{Bernoulli})">
      <summary>EP message to <c>b</c>.</summary>
      <param name="cases">Incoming message from <c>cases</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(cases) p(cases) factor(cases,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="cases" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{Bernoulli}, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(cases,b) p(cases,b) factor(cases,b) / sum_cases p(cases) messageTo(cases))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{Bernoulli}, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(cases) p(cases) factor(cases,b) / sum_cases p(cases) messageTo(cases))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageLogarithm{BernoulliList}(Bernoulli, BernoulliList)">
      <summary>VMP message to <c>cases</c>.</summary>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>cases</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(cases,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageLogarithmInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CasesDeriv{DistributionType}(DistributionType)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(IList{Bernoulli})">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="cases">Incoming message from <c>cases</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>cases</c> integrated out. The formula is <c>sum_cases p(cases) factor(cases,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="cases" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{Bernoulli}, Bernoulli)">
      <summary>Evidence message for VMP.</summary>
      <param name="cases">Incoming message from <c>cases</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="cases" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="CasesBoolOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.CasesBool(bool, out bool, out bool)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="Case0AverageConditional(Bernoulli)">
      <summary>EP message to <c>case0</c>.</summary>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>case0</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>case0</c> as the random arguments are varied. The formula is <c>proj[p(case0) sum_(b) p(b) factor(b,case0,case1)]/p(case0)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="Case1AverageConditional(Bernoulli)">
      <summary>EP message to <c>case1</c>.</summary>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>case1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>case1</c> as the random arguments are varied. The formula is <c>proj[p(case1) sum_(b) p(b) factor(b,case0,case1)]/p(case1)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(case0,case1) p(case0,case1) factor(b,case0,case1)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(case0,case1,b) p(case0,case1,b) factor(b,case0,case1))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="Case0AverageLogarithm(Bernoulli)">
      <summary>VMP message to <c>case0</c>.</summary>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>case0</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>case0</c>. The formula is <c>exp(sum_(b) p(b) log(factor(b,case0,case1)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="Case1AverageLogarithm(Bernoulli)">
      <summary>VMP message to <c>case1</c>.</summary>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>case1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>case1</c>. The formula is <c>exp(sum_(b) p(b) log(factor(b,case0,case1)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(case0,case1) p(case0,case1) log(factor(b,case0,case1)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, Bernoulli, Bernoulli)">
      <summary>Evidence message for VMP.</summary>
      <param name="case0">Incoming message from <c>case0</c>.</param>
      <param name="case1">Incoming message from <c>case1</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IntCasesOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.CasesInt(int, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="CasesAverageConditional(Discrete, int)">
      <summary>EP message to <c>casesInt</c>.</summary>
      <param name="i">Incoming message from <c>i</c>.</param>
      <param name="resultIndex">Index of the <c>casesInt</c> for which a message is desired.</param>
      <returns>The outgoing EP message to the <c>casesInt</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>casesInt</c> as the random arguments are varied. The formula is <c>proj[p(casesInt) sum_(i) p(i) factor(casesInt,i,count)]/p(casesInt)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="IAverageConditional(IList{Bernoulli}, Discrete)">
      <summary>EP message to <c>i</c>.</summary>
      <param name="cases">Incoming message from <c>casesInt</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>i</c> as the random arguments are varied. The formula is <c>proj[p(i) sum_(casesInt) p(casesInt) factor(casesInt,i,count)]/p(i)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="cases" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{Bernoulli}, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="cases">Incoming message from <c>casesInt</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="i">Incoming message from <c>i</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(casesInt,i) p(casesInt,i) factor(casesInt,i,count) / sum_casesInt p(casesInt) messageTo(casesInt))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="cases" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{Bernoulli}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="cases">Incoming message from <c>casesInt</c>.</param>
      <param name="i">Constant value for <c>i</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(casesInt) p(casesInt) factor(casesInt,i,count) / sum_casesInt p(casesInt) messageTo(casesInt))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageLogarithm(Discrete, int)">
      <summary>VMP message to <c>casesInt</c>.</summary>
      <param name="i">Incoming message from <c>i</c>.</param>
      <param name="resultIndex">Index of the <c>casesInt</c> for which a message is desired.</param>
      <returns>The outgoing VMP message to the <c>casesInt</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>casesInt</c> as the random arguments are varied. The formula is <c>proj[sum_(i) p(i) factor(casesInt,i,count)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageLogarithmInit(Discrete)">
      <summary />
      <param name="i">Incoming message from <c>i</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="IAverageLogarithm(IList{Bernoulli}, Discrete)">
      <summary>VMP message to <c>i</c>.</summary>
      <param name="cases">Incoming message from <c>casesInt</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>i</c> with <c>casesInt</c> integrated out. The formula is <c>sum_casesInt p(casesInt) factor(casesInt,i,count)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="cases" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{Bernoulli}, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="cases">Incoming message from <c>casesInt</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="i">Incoming message from <c>i</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="cases" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ExitingVariableOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.ExitingVariable{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Use,Def,Marginal))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{T}(T)">
      <summary>VMP message to <c>Marginal</c>.</summary>
      <param name="Use">Incoming message from <c>Use</c>.</param>
      <returns>The outgoing VMP message to the <c>Marginal</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Marginal</c> with <c>Use</c> integrated out. The formula is <c>sum_Use p(Use) factor(Use,Def,Marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithmInit{T}(T)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithm{T}(T)">
      <summary>VMP message to <c>Use</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns>The outgoing VMP message to the <c>Use</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Use</c> as the random arguments are varied. The formula is <c>proj[sum_(Def) p(Def) factor(Use,Def,Marginal)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{T}(T)">
      <summary>VMP message to <c>Def</c>.</summary>
      <param name="Use">Incoming message from <c>Use</c>.</param>
      <returns>The outgoing VMP message to the <c>Def</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Def</c> with <c>Use</c> integrated out. The formula is <c>sum_Use p(Use) factor(Use,Def,Marginal)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateExitingOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.ReplicateExiting{T}(T, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Uses,Def,count))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageLogarithm{T}(IReadOnlyList{T}, T, int, T)">
      <summary>VMP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[sum_(Def) p(Def) factor(Uses,Def,count)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageLogarithmInit{T}(T, int)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{T}(IList{T}, T)">
      <summary>VMP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Def</c> with <c>Uses</c> integrated out. The formula is <c>sum_Uses p(Uses) factor(Uses,Def,count)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GateExitRandomOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Gate.ExitRandom{T}(bool[], T[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Exit,cases,values))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValuesAverageConditional{TExit}(TExit, TExit[])">
      <summary>EP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>Exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>values</c> as the random arguments are varied. The formula is <c>proj[p(values) sum_(Exit) p(Exit) factor(Exit,cases,values)]/p(values)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValuesAverageConditional{TExit, TResultList}(TExit, TResultList)">
      <summary>EP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>Exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>values</c> as the random arguments are varied. The formula is <c>proj[p(values) sum_(Exit) p(Exit) factor(Exit,cases,values)]/p(values)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageConditional{TResultList}(TResultList)">
      <summary>EP message to <c>cases</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>cases</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExitAverageConditional{TExit}(bool[], IList{TExit})">
      <summary>EP message to <c>Exit</c>.</summary>
      <param name="cases">Constant value for <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>Exit</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Exit</c> as the random arguments are varied. The formula is <c>proj[p(Exit) sum_(values) p(values) factor(Exit,cases,values)]/p(Exit)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Exit,cases,values))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValuesAverageLogarithm{TExit}(TExit, TExit[])">
      <summary>VMP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>Exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>values</c>. The formula is <c>exp(sum_(Exit) p(Exit) log(factor(Exit,cases,values)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValuesAverageLogarithm{TExit, TResultList}(TExit, TResultList)">
      <summary>VMP message to <c>values</c>.</summary>
      <param name="exit">Incoming message from <c>Exit</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>values</c>. The formula is <c>exp(sum_(Exit) p(Exit) log(factor(Exit,cases,values)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CasesAverageLogarithm{TResultList}(TResultList)">
      <summary>VMP message to <c>cases</c>.</summary>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>cases</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExitAverageLogarithm{TExit}(IList{Bernoulli}, IList{TExit}, TExit)">
      <summary>VMP message to <c>Exit</c>.</summary>
      <param name="cases">Incoming message from <c>cases</c>.</param>
      <param name="values">Incoming message from <c>values</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>Exit</c>. The formula is <c>exp(sum_(cases,values) p(cases,values) log(factor(Exit,cases,values)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="values" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ExitAverageLogarithmInit{TExit}(IList{TExit})">
      <summary />
      <param name="values">Incoming message from <c>values</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianFromMeanAndVarianceOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.GaussianFromMeanAndVariance(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleAverageConditional(double, double, TruncatedGaussian)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(double, double, TruncatedGaussian)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean,variance))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean,variance))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,variance))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean,variance) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,variance) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean) p(mean) factor(sample,mean,variance)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="variance">Incoming message from <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,variance) p(sample,mean,variance) factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gamma, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="variance">Incoming message from <c>variance</c>.</param>
      <param name="to_sample">Previous outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,variance) p(sample,mean,variance) factor(sample,mean,variance) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, double, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(variance) p(variance) factor(sample,mean,variance)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LaplacianTimesGaussianMoments(double, double, out double, out double, out double)">
      <summary />
      <param name="m" />
      <param name="v" />
      <param name="logZ" />
      <param name="mu" />
      <param name="vu" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,variance) p(mean,variance) factor(sample,mean,variance)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VarianceGammaTimesGaussianMoments2(double, double, double, out double, out double)">
      <summary />
      <param name="a" />
      <param name="m" />
      <param name="v" />
      <param name="mu" />
      <param name="vu" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="VarianceGammaTimesGaussianMoments3(double, double, double, out double, out double)">
      <summary />
      <param name="a" />
      <param name="m" />
      <param name="v" />
      <param name="mu" />
      <param name="vu" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="VarianceGammaTimesGaussianMoments4(double, double, double, out double, out double)">
      <summary />
      <param name="a" />
      <param name="m" />
      <param name="v" />
      <param name="mu" />
      <param name="vu" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="VarianceGammaTimesGaussianMoments5(double, double, double, out double, out double)">
      <summary />
      <param name="a" />
      <param name="m" />
      <param name="v" />
      <param name="mu" />
      <param name="vu" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InterpolateBesselKMoment(double, double[])">
      <summary />
      <param name="a" />
      <param name="binomt" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BinomialTransform(double[])">
      <summary />
      <param name="x" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalCdfMoment(int, double, double)">
      <summary />
      <param name="n" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalCdfMomentRecurrence(int, double, double)">
      <summary />
      <param name="n" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalCdfMomentRatios(int, double, double)">
      <summary />
      <param name="nMax" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalVGMomentRatio(int, int, double, double)">
      <summary />
      <param name="n" />
      <param name="a" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalCdfMoments(int, double, double)">
      <summary />
      <param name="nMax" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalVGMoments(int, int, double, double)">
      <summary />
      <param name="nMax" />
      <param name="aMax" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalVGMomentRatios(int, int, double, double)">
      <summary />
      <param name="nMax" />
      <param name="aMax" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="NormalVGMomentTable(int, int, double, double, double[])">
      <summary />
      <param name="nMax" />
      <param name="aMax" />
      <param name="m" />
      <param name="v" />
      <param name="moments1" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(double, double)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, double)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample) p(sample) factor(sample,mean,variance)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(double, Gaussian, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(variance) p(variance) factor(sample,mean,variance)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,variance) p(sample,variance) factor(sample,mean,variance)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VarianceAverageConditional(double, double)">
      <summary>EP message to <c>variance</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>The outgoing EP message to the <c>variance</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>variance</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="VarianceAverageConditional(double, Gaussian, Gamma)">
      <summary>EP message to <c>variance</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>variance</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>variance</c> as the random arguments are varied. The formula is <c>proj[p(variance) sum_(mean) p(mean) factor(sample,mean,variance)]/p(variance)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VarianceAverageConditional(Gaussian, double, Gamma)">
      <summary>EP message to <c>variance</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>variance</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>variance</c> as the random arguments are varied. The formula is <c>proj[p(variance) sum_(sample) p(sample) factor(sample,mean,variance)]/p(variance)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VarianceAverageConditional(double, double, Gamma)">
      <summary>EP message to <c>variance</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>variance</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>variance</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VarianceAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>variance</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>variance</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>variance</c> as the random arguments are varied. The formula is <c>proj[p(variance) sum_(sample,mean) p(sample,mean) factor(sample,mean,variance)]/p(variance)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VarianceGammaTimesGaussianIntegral(double, double, double)">
      <summary />
      <param name="a" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, Gaussian, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,mean) p(sample,mean) log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(double, Gaussian, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean) p(mean) log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(sample,mean,variance)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,mean,variance)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(double, double)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianFromMeanAndVarianceOp_PointVariance">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.GaussianFromMeanAndVariance(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,variance) p(mean,variance) factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,variance) p(sample,mean,variance) factor(sample,mean,variance) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VarianceAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>variance</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>variance</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>variance</c> as the random arguments are varied. The formula is <c>proj[p(variance) sum_(sample,mean) p(sample,mean) factor(sample,mean,variance)]/p(variance)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,variance) p(mean,variance) factor(sample,mean,variance)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variance">Incoming message from <c>variance</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,variance) p(sample,variance) factor(sample,mean,variance)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="variance" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gaussian.Sample(double, double)" /></description></item><item><description><see cref="Factor.Gaussian(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleAverageConditional(double, double, TruncatedGaussian)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(double, double, TruncatedGaussian)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogFactorValue(double, double, double)">
      <summary>Evidence message for Gibbs.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's value at the given arguments.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GaussianFromAlphaBeta(Gaussian, double, double, bool)">
      <summary />
      <param name="prior" />
      <param name="alpha" />
      <param name="beta" />
      <param name="forceProper" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,precision) p(mean,precision) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional_slow(Gaussian, Gaussian, Gamma)">
      <summary />
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional_slow(Gaussian, Gaussian, Gamma)">
      <summary />
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, double, Gamma, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(precision) p(precision) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,precision) p(sample,precision) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(double, Gaussian, Gamma, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(precision) p(precision) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional_slow(Gaussian, Gaussian, Gamma)">
      <summary />
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional_Point(double, double, double)">
      <summary />
      <param name="ym" />
      <param name="yv" />
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precision</c> as the random arguments are varied. The formula is <c>proj[p(precision) sum_(sample,mean) p(sample,mean) factor(sample,mean,precision)]/p(precision)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="GammaFromAlphaBeta(Gamma, double, double, bool)">
      <summary />
      <param name="prior" />
      <param name="alpha" />
      <param name="beta" />
      <param name="forceProper" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="QuadratureNodesAndWeights(Gamma, double[], double[])">
      <summary />
      <param name="precision">Incoming message from <c>precision</c>.</param>
      <param name="nodes" />
      <param name="logWeights" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,precision) p(mean,precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,precision) p(sample,precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor_slow(Gaussian, Gaussian, Gamma)">
      <summary />
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,precision) p(mean,precision) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gamma, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, Gamma, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,precision) p(sample,precision) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(double, double)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Gaussian, Gamma)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(mean,precision) p(mean,precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Gaussian, Gamma)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(sample,precision) p(sample,precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(precision) p(precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(precision) p(precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(double, double)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>The outgoing VMP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precision</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precision</c>. The formula is <c>exp(sum_(sample,mean) p(sample,mean) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>The outgoing VMP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precision</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precision</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, Gaussian, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,mean,precision) p(sample,mean,precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(precision) p(precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(double, Gaussian, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean) p(mean) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(double, Gaussian, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean,precision) p(mean,precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, double, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,precision) p(sample,precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, Gaussian, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,mean) p(sample,mean) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianOpBase">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gaussian.Sample(double, double)" /></description></item><item><description><see cref="Factor.Gaussian(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleAverageConditional(double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(double, double)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(double, double)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>The outgoing EP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precision</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean) p(mean) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, double)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample) p(sample) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(precision) p(precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="TPdfLn(double, double, double)">
      <summary />
      <param name="x" />
      <param name="v" />
      <param name="n" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(precision) p(precision) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianOp_Slow">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gaussian.Sample(double, double)" /></description></item><item><description><see cref="Factor.Gaussian(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,precision) p(mean,precision) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precision</c> as the random arguments are varied. The formula is <c>proj[p(precision) sum_(sample,mean) p(sample,mean) factor(sample,mean,precision)]/p(precision)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gamma, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,precision) p(mean,precision) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,precision) p(sample,precision) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="GetIntegrationBoundsForPrecision(double, double, double, double, out double, out double, out double)">
      <summary />
      <param name="m" />
      <param name="v" />
      <param name="a" />
      <param name="b" />
      <param name="logrmin" />
      <param name="logrmax" />
      <param name="logrmode" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="FindZeroes(Func{double, double}, Func{double, double}, IList{double}, IList{double})">
      <summary />
      <param name="func" />
      <param name="deriv" />
      <param name="stationaryPoints" />
      <param name="inflectionPoints" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetRoots(IList{double}, out double[], out double[])">
      <summary />
      <param name="coeffs" />
      <param name="rootsReal" />
      <param name="rootsImag" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetRealRoots(IList{double}, out List{double}, Predicate{double})">
      <summary />
      <param name="coeffs" />
      <param name="roots" />
      <param name="filter" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianOp_Laplace">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gaussian.Sample(double, double)" /></description></item><item><description><see cref="Factor.Gaussian(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LaplaceMoments(Gamma, double[], double[], out double, out double)">
      <summary />
      <param name="q">Buffer <c>q</c>.</param>
      <param name="g" />
      <param name="dlogf" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LaplaceMoments2(Gamma, double[], double[], out double, out double)">
      <summary />
      <param name="q">Buffer <c>q</c>.</param>
      <param name="xg" />
      <param name="xdlogf" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="QInit()">
      <summary>Initialize the buffer <c>Q</c>.</summary>
      <returns>Initial value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Q_Slow(Gaussian, Gaussian, Gamma)">
      <summary />
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Q(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>Update the buffer <c>Q</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>New value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gamma, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,precision) p(mean,precision) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="dlogfs(double, double, double)">
      <summary />
      <param name="x" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="xdlogfs(double, double, double)">
      <summary />
      <param name="x" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precision</c> as the random arguments are varied. The formula is <c>proj[p(precision) sum_(sample,mean) p(sample,mean) factor(sample,mean,precision)]/p(precision)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional_slow(Gaussian, Gaussian, Gamma)">
      <summary />
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="dlogfxs(double, Gamma)">
      <summary />
      <param name="x" />
      <param name="precision">Incoming message from <c>precision</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Qx(Gaussian, Gamma, Gaussian)">
      <summary />
      <param name="y" />
      <param name="precision">Incoming message from <c>precision</c>.</param>
      <param name="qx" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LaplaceMoments(Gaussian, double[], out double, out double)">
      <summary />
      <param name="q">Buffer <c>q</c>.</param>
      <param name="dlogfx" />
      <param name="m" />
      <param name="v" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,precision) p(mean,precision) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, Gaussian, Gamma, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,precision) p(sample,precision) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianOp_EM">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gaussian.Sample(double, double)" /></description></item><item><description><see cref="Factor.Gaussian(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precision</c> as the random arguments are varied. The formula is <c>proj[p(precision) sum_(sample,mean) p(sample,mean) factor(sample,mean,precision)]/p(precision)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,precision) p(mean,precision) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,precision) p(sample,precision) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GaussianOp_PointPrecision">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Gaussian.Sample(double, double)" /></description></item><item><description><see cref="Factor.Gaussian(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,precision) p(mean,precision) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(Gaussian, Gaussian, Gamma)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>precision</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precision</c> as the random arguments are varied. The formula is <c>proj[p(precision) sum_(sample,mean) p(sample,mean) factor(sample,mean,precision)]/p(precision)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Gaussian, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,precision) p(mean,precision) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(Gaussian, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,precision) p(sample,precision) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetDeepJaggedItemsOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetDeepJaggedItems{T}(IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{IReadOnlyList{int}}})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IList{IList{IList{T}}}, IList{T}, IList{IList{IList{int}}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{IList{IList{T}}}, IList{T}, IList{IList{IList{int}}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{IList{IList{T}}}, IList{T}, IList{IList{IList{int}}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{ItemType, ItemType2, DistributionType}(IList{ItemType}, IList{DistributionType}, IList{IList{IList{int}}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType, ItemType2, DistributionType}(IList{ItemType}, IList{DistributionType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IList{IList{IList{T}}}, IList{DistributionType}, IList{IList{IList{int}}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IList{IList{IList{T}}}, IList{DistributionType}, IList{IList{IList{int}}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IList{IList{IList{T}}}, IList{DistributionType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{ItemType, ItemType2, DistributionType}(IList{ItemType}, IList{T}, IList{IList{IList{int}}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType, ItemType2, DistributionType}(IList{ItemType}, IList{T}, IList{IList{IList{int}}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType, ItemType2, DistributionType}(IList{ItemType}, IList{T})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType, ItemType2, DistributionType}(IList{ItemType}, IList{DistributionType}, IList{IList{IList{int}}}, IList{ItemType})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(ArrayType, ArrayType, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, ItemType, ItemType2, DistributionType}(ArrayType, ItemType, ItemType, IList{IList{IList{int}}}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, ItemType, ItemType2, DistributionType}(ItemType, ArrayType, ArrayType, IList{IList{IList{int}}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ItemType, ItemType2, DistributionType, ArrayType}(IList{ItemType}, IList{IList{IList{int}}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices) p(items,indices) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IList{IList{IList{T}}}, IList{IList{IList{int}}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices) p(items,indices) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{ItemType, ItemType2, DistributionType}(IList{DistributionType}, IList{IList{IList{int}}}, int, ItemType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array,indices) p(array,indices) factor(items,array,indices)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ItemType, ItemType2, DistributionType, ArrayType}(IList{ItemType}, IList{IList{IList{int}}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IList{IList{IList{T}}}, IList{IList{IList{int}}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetDeepJaggedItemsPointOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetDeepJaggedItems{T}(IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{IReadOnlyList{int}}})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{ItemType, ItemType2, DistributionType}(IList{DistributionType}, IList{IList{IList{int}}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItem{T}(IReadOnlyList{T}, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(T, IList{T}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item,array) p(item,array) factor(item,array,index))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(T, IList{T}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item,array) p(item,array) factor(item,array,index) / sum_item p(item) messageTo(item))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(T, IList{T}, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{Distribution}(Distribution, Distribution)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="to_item">Outgoing message to <c>item</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item) p(item) factor(item,array,index))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{Distribution}(T, IList{Distribution}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item,array) p(item,array) factor(item,array,index))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{Distribution}(Distribution)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item) p(item) factor(item,array,index) / sum_item p(item) messageTo(item))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{Distribution}(T, IList{Distribution}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item,array) p(item,array) factor(item,array,index) / sum_item p(item) messageTo(item))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageConditional{Distribution}(IList{Distribution}, int, Distribution)">
      <summary>EP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[p(item) sum_(array) p(array) factor(item,array,index)]/p(item)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemAverageConditionalInit{Distribution}(IList{Distribution})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{Distribution, DistributionArray}(Distribution, int, DistributionArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(item) p(item) factor(item,array,index)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{Distribution, DistributionArray}(T, int, DistributionArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(item) p(item) factor(item,array,index)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(item,array,index))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageLogarithm{Distribution}(IList{Distribution}, int, Distribution)">
      <summary>VMP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(item,array,index)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemAverageLogarithmInit{Distribution}(IList{Distribution})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{Distribution, DistributionArray}(Distribution, int, DistributionArray)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>item</c> integrated out. The formula is <c>sum_item p(item) factor(item,array,index)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{Distribution, DistributionArray}(T, int, DistributionArray)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>item</c> integrated out. The formula is <c>sum_item p(item) factor(item,array,index)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItem2DOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItem2D{T}(T[,], int, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor{Distribution}(Distribution, Distribution)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="to_item">Outgoing message to <c>item</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item) p(item) factor(item,array,index1,index2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{Distribution}(T, IArray2D{Distribution}, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item,array) p(item,array) factor(item,array,index1,index2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{Distribution}(Distribution)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item) p(item) factor(item,array,index1,index2) / sum_item p(item) messageTo(item))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{Distribution}(T, IArray2D{Distribution}, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item,array) p(item,array) factor(item,array,index1,index2) / sum_item p(item) messageTo(item))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageConditional{Distribution}(IArray2D{Distribution}, int, int, Distribution)">
      <summary>EP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[p(item) sum_(array) p(array) factor(item,array,index1,index2)]/p(item)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{Distribution, DistributionArray}(Distribution, int, int, DistributionArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(item) p(item) factor(item,array,index1,index2)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{Distribution, DistributionArray}(T, int, int, DistributionArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(item) p(item) factor(item,array,index1,index2)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(item,array,index1,index2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageLogarithm{Distribution}(IArray2D{Distribution}, int, int, Distribution)">
      <summary>VMP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(item,array,index1,index2)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{Distribution, DistributionArray}(Distribution, int, int, DistributionArray)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>item</c> integrated out. The formula is <c>sum_item p(item) factor(item,array,index1,index2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{Distribution, DistributionArray}(T, int, int, DistributionArray)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="index1">Constant value for <c>index1</c>.</param>
      <param name="index2">Constant value for <c>index2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>item</c> integrated out. The formula is <c>sum_item p(item) factor(item,array,index1,index2)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItems{T}(IReadOnlyList{T}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IReadOnlyList{T}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IReadOnlyList{T}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IReadOnlyList{T}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{DistributionType}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{DistributionType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{T}, IReadOnlyList{DistributionType}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{T}, IReadOnlyList{DistributionType}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IReadOnlyList{T}, IReadOnlyList{DistributionType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{T})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{DistributionType}, IReadOnlyList{int}, IReadOnlyList{DistributionType})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal2{ArrayType, DistributionType}(ArrayType, IReadOnlyList{DistributionType}, IReadOnlyList{int}, ArrayType)">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{DistributionType}, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, DistributionType}(ArrayType, DistributionType, DistributionType, IReadOnlyList{int}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, DistributionType}(DistributionType, ArrayType, ArrayType, IReadOnlyList{int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array) p(array) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IReadOnlyList{T}, IReadOnlyList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, int, DistributionType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(items,array,indices)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm2{DistributionType, ResultType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, ResultType)">
      <summary />
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(DistributionStructArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(DistributionRefArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IReadOnlyList{T}, IReadOnlyList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsOp2{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItems{T}(IReadOnlyList{T}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditionalInit{TDist}(DistributionStructArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditionalInit{TDist}(DistributionRefArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional2{DistributionType}(DistributionType, IReadOnlyList{DistributionType}, IReadOnlyList{DistributionType}, IReadOnlyList{int}, int, DistributionType)">
      <summary />
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="to_array">Outgoing message to <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageConditional{DistributionType}(DistributionType, IReadOnlyList{DistributionType}, IReadOnlyList{int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="partial">Buffer <c>partial</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array) p(array) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayIncrement{DistributionType}(DistributionType, DistributionType, DistributionType)">
      <summary />
      <param name="partial">Buffer <c>partial</c>.</param>
      <param name="item" />
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="PartialInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>partial</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <returns>Initial value of buffer <c>partial</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Partial{DistributionType}(DistributionType, IReadOnlyList{DistributionType}, IReadOnlyList{int}, int, DistributionType)">
      <summary>Update the buffer <c>partial</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="to_array">Outgoing message to <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>partial</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsPointOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItems{T}(IReadOnlyList{T}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{DistributionType}(IList{DistributionType}, IList{int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsFromDeepJaggedOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItemsFromDeepJagged{T}(IReadOnlyList{IReadOnlyList{IReadOnlyList{T}}}, IReadOnlyList{int}, IReadOnlyList{int}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IList{T}, IList{IList{IList{T}}}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{T}, IList{IList{IList{T}}}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{T}, IList{IList{IList{T}}}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{DistributionType}, IList{DistributionArrayArrayType}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{IList{DistributionArrayType}, DistributionArrayType, DistributionType}(IList{DistributionType}, IList{DistributionArrayType}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{T}, IList{DistributionArrayArrayType}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{T}, IList{DistributionArrayArrayType}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{IList{DistributionArrayType}, DistributionArrayType, DistributionType}(IList{T}, IList{DistributionArrayType}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IList{DistributionType}, IList{IList{IList{T}}}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IList{DistributionType}, IList{IList{IList{T}}}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IList{DistributionType}, IList{IList{IList{T}}}, IList{int}, IList{int}, IList{int})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{DistributionType}, IList{DistributionArrayArrayType}, IList{int}, IList{int}, IList{int}, IList{DistributionType})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2,indices3) p(items,array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(ArrayType, ArrayType, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, DistributionArrayArrayType, DistributionArrayType, DistributionType}(ArrayType, DistributionType, DistributionType, IList{int}, IList{int}, IList{int}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, DistributionArrayArrayType, DistributionArrayType, DistributionType}(DistributionType, ArrayType, ArrayType, IList{int}, IList{int}, IList{int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices,indices2,indices3) p(array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{DistributionType}, IList{int}, IList{int}, IList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices,indices2,indices3) p(items,indices,indices2,indices3) factor(items,array,indices,indices2,indices3)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{T}, IList{int}, IList{int}, IList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices,indices2,indices3) p(items,indices,indices2,indices3) factor(items,array,indices,indices2,indices3)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{DistributionArrayArrayType}, IList{int}, IList{int}, IList{int}, int, DistributionType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array,indices,indices2,indices3) p(array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(IList{IList{DistributionStructArray{TDist, T}}}, IList{int}, IList{int}, IList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(IList{IList{DistributionRefArray{TDist, T}}}, IList{int}, IList{int}, IList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionArrayArrayType, DistributionArrayType, DistributionType, ArrayType}(IList{DistributionType}, IList{int}, IList{int}, IList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices,indices2,indices3) p(indices,indices2,indices3) log(sum_items p(items) factor(items,array,indices,indices2,indices3)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ArrayType, DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{T}, IList{int}, IList{int}, IList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices,indices2,indices3) p(indices,indices2,indices3) log(sum_items p(items) factor(items,array,indices,indices2,indices3)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsFromDeepJaggedPointOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItemsFromDeepJagged{T}(IReadOnlyList{IReadOnlyList{IReadOnlyList{T}}}, IReadOnlyList{int}, IReadOnlyList{int}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{DistributionArrayArrayType, DistributionArrayType, DistributionType}(IList{DistributionArrayArrayType}, IList{int}, IList{int}, IList{int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="indices3">Incoming message from <c>indices3</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices,indices2,indices3) p(array,indices,indices2,indices3) factor(items,array,indices,indices2,indices3)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsFromJaggedOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItemsFromJagged{T}(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{int}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IList{T}, IList{IList{T}}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{T}, IList{IList{T}}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{T}, IList{IList{T}}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionArrayType, DistributionType}(IList{DistributionType}, IList{DistributionArrayType}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionArrayType, DistributionType}(IList{DistributionType}, IList{DistributionArrayType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionArrayType, DistributionType}(IList{T}, IList{DistributionArrayType}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionArrayType, DistributionType}(IList{T}, IList{DistributionArrayType}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionArrayType, DistributionType}(IList{T}, IList{DistributionArrayType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IList{DistributionType}, IList{IList{T}}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IList{DistributionType}, IList{IList{T}}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IList{DistributionType}, IList{IList{T}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionArrayType, DistributionType}(IList{DistributionType}, IList{DistributionArrayType}, IReadOnlyList{int}, IReadOnlyList{int}, IList{DistributionType})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(ArrayType, ArrayType, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, DistributionArrayType, DistributionType}(ArrayType, DistributionType, DistributionType, IReadOnlyList{int}, IReadOnlyList{int}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, DistributionArrayType, DistributionType}(DistributionType, ArrayType, ArrayType, IReadOnlyList{int}, IReadOnlyList{int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array) p(array) factor(items,array,indices,indices2)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, DistributionArrayType, DistributionType}(IList{DistributionType}, IReadOnlyList{int}, IReadOnlyList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices,indices2)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, DistributionArrayType, DistributionType}(IList{T}, IReadOnlyList{int}, IReadOnlyList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices,indices2)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{DistributionArrayType, DistributionType}(IList{DistributionArrayType}, IReadOnlyList{int}, IReadOnlyList{int}, int, DistributionType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(items,array,indices,indices2)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(IList{DistributionStructArray{TDist, T}}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(IList{DistributionRefArray{TDist, T}}, IReadOnlyList{int}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionArrayType, DistributionType, ArrayType}(IList{DistributionType}, IReadOnlyList{int}, IReadOnlyList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices,indices2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ArrayType, DistributionArrayType, DistributionType}(IList{T}, IReadOnlyList{int}, IReadOnlyList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="indices2">Constant value for <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices,indices2)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsFromJaggedPointOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItemsFromJagged{T}(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{int}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{DistributionArrayType, DistributionType}(IList{DistributionArrayType}, IList{int}, IList{int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices,indices2) p(array,indices,indices2) factor(items,array,indices,indices2)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetJaggedItemsPointOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetJaggedItems{T}(IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{ItemType, DistributionType}(IList{DistributionType}, IList{IList{int}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetJaggedItemsOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetJaggedItems{T}(IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IList{IList{T}}, IList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{IList{T}}, IList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{IList{T}}, IList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{ItemType, DistributionType}(IList{ItemType}, IList{DistributionType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType, DistributionType}(IList{ItemType}, IList{DistributionType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IList{IList{T}}, IList{DistributionType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IList{IList{T}}, IList{DistributionType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IList{IList{T}}, IList{DistributionType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{ItemType, DistributionType}(IList{ItemType}, IList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType, DistributionType}(IList{ItemType}, IList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType, DistributionType}(IList{ItemType}, IList{T})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType, DistributionType}(IList{ItemType}, IList{DistributionType}, IReadOnlyList{IReadOnlyList{int}}, IList{ItemType})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(ArrayType, ArrayType, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, ItemType, DistributionType}(ArrayType, ItemType, ItemType, IReadOnlyList{IReadOnlyList{int}}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, ItemType, DistributionType}(ItemType, ArrayType, ArrayType, IReadOnlyList{IReadOnlyList{int}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array) p(array) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ItemType, DistributionType, ArrayType}(IList{ItemType}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IList{IList{T}}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{ItemType, DistributionType}(IList{DistributionType}, IReadOnlyList{IReadOnlyList{int}}, int, ItemType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(items,array,indices)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ItemType, DistributionType, ArrayType}(IList{ItemType}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IList{IList{T}}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetJaggedItemsFromJaggedPointOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetJaggedItemsFromJagged{T}(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{IReadOnlyList{int}}, IReadOnlyList{IReadOnlyList{int}})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{ItemType, DistributionType}(IList{ItemType}, IList{IList{int}}, IList{IList{int}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices,indices2) p(array,indices,indices2) factor(items,array,indices,indices2)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetJaggedItemsFromJaggedOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetJaggedItemsFromJagged{T}(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{IReadOnlyList{int}}, IReadOnlyList{IReadOnlyList{int}})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IList{IList{T}}, IList{IList{T}}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{IList{T}}, IList{IList{T}}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{IList{T}}, IList{IList{T}}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{ItemType, DistributionType}(IList{ItemType}, IList{ItemType}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType, DistributionType}(IList{ItemType}, IList{ItemType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{ItemType, DistributionType}(IList{IList{T}}, IList{ItemType}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType, DistributionType}(IList{IList{T}}, IList{ItemType}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType, DistributionType}(IList{IList{T}}, IList{ItemType})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{ItemType, DistributionType}(IList{ItemType}, IList{IList{T}}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType, DistributionType}(IList{ItemType}, IList{IList{T}}, IList{IList{int}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType, DistributionType}(IList{ItemType}, IList{IList{T}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType, DistributionType}(IList{ItemType}, IList{ItemType}, IList{IList{int}}, IList{IList{int}}, IList{ItemType})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices,indices2) p(items,array,indices,indices2) factor(items,array,indices,indices2) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(ArrayType, ArrayType, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, ItemType, DistributionType}(ArrayType, ItemType, ItemType, IList{IList{int}}, IList{IList{int}}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, ItemType, DistributionType}(ItemType, ArrayType, ArrayType, IList{IList{int}}, IList{IList{int}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices,indices2) p(array,indices,indices2) factor(items,array,indices,indices2)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ItemType, DistributionType, ArrayType}(IList{ItemType}, IList{IList{int}}, IList{IList{int}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices,indices2) p(items,indices,indices2) factor(items,array,indices,indices2)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ItemType, DistributionType, ArrayType}(IList{IList{T}}, IList{IList{int}}, IList{IList{int}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices,indices2) p(items,indices,indices2) factor(items,array,indices,indices2)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{ItemType, DistributionType}(IList{ItemType}, IList{IList{int}}, IList{IList{int}}, int, ItemType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array,indices,indices2) p(array,indices,indices2) factor(items,array,indices,indices2)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ItemType, DistributionType, ArrayType}(IList{ItemType}, IList{IList{int}}, IList{IList{int}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices,indices2) p(indices,indices2) log(sum_items p(items) factor(items,array,indices,indices2)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ItemType, DistributionType, ArrayType}(IList{IList{T}}, IList{IList{int}}, IList{IList{int}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="indices2">Incoming message from <c>indices2</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices,indices2) p(indices,indices2) log(sum_items p(items) factor(items,array,indices,indices2)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemsWithDictionaryOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="ExperimentalFactor.GetItemsWithDictionary{T}(IList{T}, IList{String}, IDictionary{String, int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(ArrayType, IList{DistributionType}, IList{String}, IDictionary{String, int}, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="dict">Constant value for <c>dict</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, DistributionType}(ArrayType, DistributionType, DistributionType, IList{String}, IDictionary{String, int}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="dict">Constant value for <c>dict</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, DistributionType}(DistributionType, ArrayType, ArrayType, IList{String}, IDictionary{String, int}, int, DistributionType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="dict">Constant value for <c>dict</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array) p(array) factor(items,array,indices,dict)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IList{DistributionType}, IList{String}, IDictionary{String, int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="dict">Constant value for <c>dict</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices,dict)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IList{T}, IList{String}, IDictionary{String, int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="dict">Constant value for <c>dict</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices,dict)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="IndexOfMaximumOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.IndexOfMaximumDouble(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="BufferInit{GaussianList}(GaussianList)">
      <summary>Initialize the buffer <c>Buffer</c>.</summary>
      <param name="list">Incoming message from <c>list</c>.</param>
      <returns>Initial value of buffer <c>Buffer</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Buffer{GaussianList}(IndexOfMaximumBuffer, GaussianList, int)">
      <summary>Update the buffer <c>Buffer</c>.</summary>
      <param name="Buffer">Buffer <c>Buffer</c>.</param>
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="IndexOfMaximumDouble">Constant value for <c>indexOfMaximumDouble</c>.</param>
      <returns>New value of buffer <c>Buffer</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="listAverageConditional{GaussianList}(IndexOfMaximumBuffer, GaussianList, int)">
      <summary>EP message to <c>list</c>.</summary>
      <param name="Buffer">Buffer <c>Buffer</c>.</param>
      <param name="to_list">Previous outgoing message to <c>list</c>.</param>
      <param name="IndexOfMaximumDouble">Constant value for <c>indexOfMaximumDouble</c>.</param>
      <returns>The outgoing EP message to the <c>list</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>list</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{GaussianList}(IndexOfMaximumBuffer, GaussianList, int)">
      <summary>Evidence message for EP.</summary>
      <param name="Buffer">Buffer <c>Buffer</c>.</param>
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="IndexOfMaximumDouble">Constant value for <c>indexOfMaximumDouble</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(list) p(list) factor(indexOfMaximumDouble,list))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{GaussianList}(IndexOfMaximumBuffer, GaussianList, int)">
      <summary>Evidence message for EP.</summary>
      <param name="Buffer">Buffer <c>Buffer</c>.</param>
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="IndexOfMaximumDouble">Constant value for <c>indexOfMaximumDouble</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(list) p(list) factor(indexOfMaximumDouble,list))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IndexOfMaximumStochasticOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.IndexOfMaximumDouble(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="BuffersInit{GaussianList}(GaussianList, Discrete)">
      <summary>Initialize the buffer <c>Buffers</c>.</summary>
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="IndexOfMaximumDouble">Incoming message from <c>indexOfMaximumDouble</c>.</param>
      <returns>Initial value of buffer <c>Buffers</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Buffers{GaussianList}(IndexOfMaximumBuffer[], GaussianList, Discrete)">
      <summary>Update the buffer <c>Buffers</c>.</summary>
      <param name="Buffers">Buffer <c>Buffers</c>.</param>
      <param name="list">Incoming message from <c>list</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="IndexOfMaximumDouble">Incoming message from <c>indexOfMaximumDouble</c>.</param>
      <returns>New value of buffer <c>Buffers</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="list" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ListAverageConditional{GaussianList}(IndexOfMaximumBuffer[], GaussianList, Discrete, GaussianList)">
      <summary>EP message to <c>list</c>.</summary>
      <param name="Buffers">Buffer <c>Buffers</c>.</param>
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="IndexOfMaximumDouble">Incoming message from <c>indexOfMaximumDouble</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>list</c> as the random arguments are varied. The formula is <c>proj[p(list) sum_(indexOfMaximumDouble) p(indexOfMaximumDouble) factor(indexOfMaximumDouble,list)]/p(list)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="IndexOfMaximumDouble" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IndexOfMaximumDoubleAverageConditional{GaussianList}(GaussianList, IndexOfMaximumBuffer[])">
      <summary>EP message to <c>indexOfMaximumDouble</c>.</summary>
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="Buffers">Buffer <c>Buffers</c>.</param>
      <returns>The outgoing EP message to the <c>indexOfMaximumDouble</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>indexOfMaximumDouble</c> as the random arguments are varied. The formula is <c>proj[p(indexOfMaximumDouble) sum_(list) p(list) factor(indexOfMaximumDouble,list)]/p(indexOfMaximumDouble)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{GaussianList}(GaussianList, GaussianList, IndexOfMaximumBuffer[], Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="list">Incoming message from <c>list</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_list">Previous outgoing message to <c>list</c>.</param>
      <param name="Buffers">Buffer <c>Buffers</c>.</param>
      <param name="IndexOfMaximumDouble">Incoming message from <c>indexOfMaximumDouble</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(list,indexOfMaximumDouble) p(list,indexOfMaximumDouble) factor(indexOfMaximumDouble,list))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="list" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio{GaussianList}(GaussianList, GaussianList, Discrete, Discrete, IndexOfMaximumBuffer[])">
      <summary>Evidence message for EP.</summary>
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="to_list">Previous outgoing message to <c>list</c>.</param>
      <param name="IndexOfMaximumDouble">Incoming message from <c>indexOfMaximumDouble</c>.</param>
      <param name="to_IndexOfMaximumDouble">Previous outgoing message to <c>IndexOfMaximumDouble</c>.</param>
      <param name="Buffers">Buffer <c>Buffers</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(list,indexOfMaximumDouble) p(list,indexOfMaximumDouble) factor(indexOfMaximumDouble,list) / sum_indexOfMaximumDouble p(indexOfMaximumDouble) messageTo(indexOfMaximumDouble))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IndexOfMaximumOp_Fast">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.IndexOfMaximumDouble(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="IndexOfMaximumDoubleAverageConditional(IList{Gaussian}, Discrete)">
      <summary>EP message to <c>indexOfMaximumDouble</c>.</summary>
      <param name="list">Incoming message from <c>list</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>indexOfMaximumDouble</c> as the random arguments are varied. The formula is <c>proj[p(indexOfMaximumDouble) sum_(list) p(list) factor(indexOfMaximumDouble,list)]/p(indexOfMaximumDouble)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="list" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IndexOfMaximumDoubleAverageConditional2(IList{Gaussian}, Discrete)">
      <summary />
      <param name="list">Incoming message from <c>list</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="MaxOfOthersOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.MaxOfOthers(double[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MaxOfOthersAverageConditional{ArrayType}(ArrayType, IList{Gaussian}, ArrayType)">
      <summary>EP message to <c>maxOfOthers</c>.</summary>
      <param name="maxOfOthers">Incoming message from <c>maxOfOthers</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>maxOfOthers</c> as the random arguments are varied. The formula is <c>proj[p(maxOfOthers) sum_(array) p(array) factor(maxOfOthers,array)]/p(maxOfOthers)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType}(IList{Gaussian}, ArrayType, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="maxOfOthers">Incoming message from <c>maxOfOthers</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(maxOfOthers) p(maxOfOthers) factor(maxOfOthers,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="maxOfOthers" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MaxOfOthers(IList{Gaussian}, IList{Gaussian})">
      <summary>Update the buffer <c>maxOfOthers</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Unpermute{T}(IList{T}, int[])">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MaxOfOthers_MonteCarlo(IList{Gaussian}, IList{Gaussian})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MaxOfOthers_Quadratic(IList{Gaussian}, IList{Gaussian})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MaxOfOthers_Linear(IList{Gaussian}, IList{Gaussian})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="InnerProductOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Vector.InnerProduct(Vector, Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="InnerProductAverageConditional(VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>innerProduct</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[p(innerProduct) sum_(a,b) p(a,b) factor(innerProduct,a,b)]/p(innerProduct)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(innerProduct,b) p(innerProduct,b) factor(innerProduct,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, VectorGaussian, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(innerProduct,a) p(innerProduct,a) factor(innerProduct,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,a,b) p(innerProduct,a,b) factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,a,b) p(innerProduct,a,b) factor(innerProduct,a,b) / sum_innerProduct p(innerProduct) messageTo(innerProduct))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="InnerProductOpBase">
    <doc>
      <summary>Provides outgoing messages for <see cref="Vector.InnerProduct(Vector, Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AAverageLogarithm(double, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(innerProduct,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(innerProduct,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, Vector, VectorGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(double, Vector, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Vector, VectorGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Vector, VectorGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithm(DenseVector, PositiveDefiniteMatrix, DenseVector, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>innerProduct</c>.</summary>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>The outgoing VMP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>innerProduct</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithm(Vector, DenseVector, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>innerProduct</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>The outgoing VMP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>innerProduct</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithmInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithm(DenseVector, PositiveDefiniteMatrix, Vector)">
      <summary>VMP message to <c>innerProduct</c>.</summary>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>innerProduct</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>BVariance</c>.</summary>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Initial value of buffer <c>BVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>BVariance</c>.</summary>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>BMean</c>.</summary>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Initial value of buffer <c>BMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMean(VectorGaussian, PositiveDefiniteMatrix, DenseVector)">
      <summary>Update the buffer <c>BMean</c>.</summary>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>AVariance</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>Initial value of buffer <c>AVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>AVariance</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>AMean</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>Initial value of buffer <c>AMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AMean(VectorGaussian, PositiveDefiniteMatrix, DenseVector)">
      <summary>Update the buffer <c>AMean</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, VectorGaussian, DenseVector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>innerProduct</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_innerProduct p(innerProduct) factor(innerProduct,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>innerProduct</c> integrated out. The formula is <c>sum_innerProduct p(innerProduct) factor(innerProduct,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, VectorGaussian, DenseVector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>innerProduct</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_innerProduct p(innerProduct) factor(innerProduct,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>innerProduct</c> integrated out. The formula is <c>sum_innerProduct p(innerProduct) factor(innerProduct,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="InnerProductAverageConditional(Vector, DenseVector, PositiveDefiniteMatrix)">
      <summary>EP message to <c>innerProduct</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>The outgoing EP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>innerProduct</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageConditional(DenseVector, PositiveDefiniteMatrix, Vector)">
      <summary>EP message to <c>innerProduct</c>.</summary>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>innerProduct</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(innerProduct) p(innerProduct) factor(innerProduct,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Vector, DenseVector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(innerProduct) p(innerProduct) factor(innerProduct,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(innerProduct) p(innerProduct) factor(innerProduct,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Vector, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,b) p(innerProduct,b) factor(innerProduct,a,b) / sum_innerProduct p(innerProduct) messageTo(innerProduct))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Vector, DenseVector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, VectorGaussian, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,a) p(innerProduct,a) factor(innerProduct,a,b) / sum_innerProduct p(innerProduct) messageTo(innerProduct))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, DenseVector, PositiveDefiniteMatrix, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="to_innerProduct">Outgoing message to <c>innerProduct</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct) p(innerProduct) factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Vector, DenseVector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, DenseVector, PositiveDefiniteMatrix, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="InnerProductOp_PointB">
    <doc>
      <summary>Provides outgoing messages for <see cref="Vector.InnerProduct(Vector, Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="InnerProductAverageConditional(DenseVector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>innerProduct</c>.</summary>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[p(innerProduct) sum_(b) p(b) factor(innerProduct,a,b)]/p(innerProduct)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(innerProduct,b) p(innerProduct,b) factor(innerProduct,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, DenseVector, PositiveDefiniteMatrix, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="AMean">Buffer <c>AMean</c>.</param>
      <param name="AVariance">Buffer <c>AVariance</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(innerProduct) p(innerProduct) factor(innerProduct,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="InnerProductArrayOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.InnerProduct(double[], double[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithm(IList{Gaussian}, IList{Gaussian}, Gaussian)">
      <summary>VMP message to <c>innerProduct</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(innerProduct,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithmInit(IList{Gaussian}, IList{Gaussian})">
      <summary />
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithmInit(double[], IList{Gaussian})">
      <summary />
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithmInit(IList{Gaussian}, double[])">
      <summary />
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithm(double[], IList{Gaussian})">
      <summary>VMP message to <c>innerProduct</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(innerProduct,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="InnerProductAverageLogarithm(IList{Gaussian}, double[])">
      <summary>VMP message to <c>innerProduct</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(innerProduct,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm{GaussianList}(Gaussian, IList{Gaussian}, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>innerProduct</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_innerProduct p(innerProduct) factor(innerProduct,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm{GaussianList}(Gaussian, IList{Gaussian}, double[], GaussianList)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>innerProduct</c> integrated out. The formula is <c>sum_innerProduct p(innerProduct) factor(innerProduct,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm{GaussianList}(Gaussian, IList{Gaussian}, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>innerProduct</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_innerProduct p(innerProduct) factor(innerProduct,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm{GaussianList}(Gaussian, double[], IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>innerProduct</c> integrated out. The formula is <c>sum_innerProduct p(innerProduct) factor(innerProduct,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm{IList{Gaussian}}(double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageConditional(IList{Gaussian}, IList{Gaussian}, IList{Gaussian})">
      <summary>EP message to <c>innerProduct</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[p(innerProduct) sum_(a,b) p(a,b) factor(innerProduct,a,b)]/p(innerProduct)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(innerProduct,b) p(innerProduct,b) factor(innerProduct,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(innerProduct,a) p(innerProduct,a) factor(innerProduct,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double[], double[])">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double[], double[])">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double[], double[])">
      <summary>Evidence message for VMP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double[], IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,b) p(innerProduct,b) factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double[], IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, IList{Gaussian}, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,a) p(innerProduct,a) factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, IList{Gaussian}, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(innerProduct,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double[], IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,b) p(innerProduct,b) factor(innerProduct,a,b) / sum_innerProduct p(innerProduct) messageTo(innerProduct))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, IList{Gaussian}, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(innerProduct,a) p(innerProduct,a) factor(innerProduct,a,b) / sum_innerProduct p(innerProduct) messageTo(innerProduct))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double[], IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, IList{Gaussian}, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(innerProduct,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="InnerProductAverageConditional(double[], IList{Gaussian})">
      <summary>EP message to <c>innerProduct</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[p(innerProduct) sum_(b) p(b) factor(innerProduct,a,b)]/p(innerProduct)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="InnerProductAverageConditional(IList{Gaussian}, double[])">
      <summary>EP message to <c>innerProduct</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>innerProduct</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>innerProduct</c> as the random arguments are varied. The formula is <c>proj[p(innerProduct) sum_(a) p(a) factor(innerProduct,a,b)]/p(innerProduct)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional{GaussianList}(Gaussian, IList{Gaussian}, double[], Gaussian, GaussianList)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="to_innerProduct">Outgoing message to <c>innerProduct</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(innerProduct) p(innerProduct) factor(innerProduct,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional{GaussianList}(Gaussian, double[], IList{Gaussian}, Gaussian, GaussianList)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="innerProduct">Incoming message from <c>innerProduct</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_innerProduct">Previous outgoing message to <c>innerProduct</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(innerProduct) p(innerProduct) factor(innerProduct,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="innerProduct" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional{GaussianList}(double, double[], GaussianList)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional{GaussianList}(double, double[], GaussianList)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="innerProduct">Constant value for <c>innerProduct</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="InnerProductPartialCovarianceOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.InnerProduct(double[], Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(X,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="EbbtInit(VectorGaussian)">
      <summary />
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Ebbt(PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix)">
      <summary />
      <param name="CovarianceOfB">Buffer <c>CovarianceOfB</c>.</param>
      <param name="MeanOfB">Buffer <c>MeanOfB</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="EaatInit(DistributionStructArray{Gaussian, double})">
      <summary />
      <param name="A">Incoming message from <c>A</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Eaat(DistributionStructArray{Gaussian, double}, PositiveDefiniteMatrix)">
      <summary />
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CovarianceOfBInit(VectorGaussian)">
      <summary>Initialize the buffer <c>CovarianceOfB</c>.</summary>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns>Initial value of buffer <c>CovarianceOfB</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="CovarianceOfB(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>CovarianceOfB</c>.</summary>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanOfBInit(VectorGaussian)">
      <summary>Initialize the buffer <c>MeanOfB</c>.</summary>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns>Initial value of buffer <c>MeanOfB</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MeanOfB(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>MeanOfB</c>.</summary>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="CovarianceOfB">Buffer <c>CovarianceOfB</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, DistributionStructArray{Gaussian, double}, VectorGaussian, Vector, PositiveDefiniteMatrix, DistributionStructArray{Gaussian, double})">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="X">Incoming message from <c>X</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanOfB">Buffer <c>MeanOfB</c>.</param>
      <param name="CovarianceOfB">Buffer <c>CovarianceOfB</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. Because the factor is deterministic, <c>X</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(B) p(B) log(sum_X p(X) factor(X,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="X" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, double[], VectorGaussian)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="X">Incoming message from <c>X</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> with <c>X</c> integrated out. The formula is <c>sum_X p(X) factor(X,A,B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="X" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, DistributionStructArray{Gaussian, double}, VectorGaussian)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="X">Incoming message from <c>X</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. Because the factor is deterministic, <c>X</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(A) p(A) log(sum_X p(X) factor(X,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="X" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(double[], VectorGaussian, Vector, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>X</c>.</summary>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="MeanOfB">Buffer <c>MeanOfB</c>.</param>
      <param name="CovarianceOfB">Buffer <c>CovarianceOfB</c>.</param>
      <returns>The outgoing VMP message to the <c>X</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>X</c> as the random arguments are varied. The formula is <c>proj[sum_(B) p(B) factor(X,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(DistributionStructArray{Gaussian, double}, VectorGaussian, Vector, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>X</c>.</summary>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="MeanOfB">Buffer <c>MeanOfB</c>.</param>
      <param name="CovarianceOfB">Buffer <c>CovarianceOfB</c>.</param>
      <returns>The outgoing VMP message to the <c>X</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>X</c> as the random arguments are varied. The formula is <c>proj[sum_(A,B) p(A,B) factor(X,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithmInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IntegralOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Integral(double, double, Func{double, double}, ITruncatableDistribution{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="IntegralAverageConditional(Gaussian, Gaussian, Func{double, double}, ITruncatableDistribution{double})">
      <summary>EP message to <c>integral</c>.</summary>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="distribution">Constant value for <c>distribution</c>.</param>
      <returns>The outgoing EP message to the <c>integral</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>integral</c> as the random arguments are varied. The formula is <c>proj[p(integral) sum_(lowerBound,upperBound) p(lowerBound,upperBound) factor(integral,lowerBound,upperBound,func,distribution)]/p(integral)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LowerBoundAverageConditional(Gaussian, double, Func{double, double}, ITruncatableDistribution{double})">
      <summary>EP message to <c>lowerBound</c>.</summary>
      <param name="integral">Incoming message from <c>integral</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="distribution">Constant value for <c>distribution</c>.</param>
      <returns>The outgoing EP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>lowerBound</c> as the random arguments are varied. The formula is <c>proj[p(lowerBound) sum_(integral) p(integral) factor(integral,lowerBound,upperBound,func,distribution)]/p(lowerBound)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LowerBoundAverageConditional(Gaussian, Gaussian, Func{double, double}, ITruncatableDistribution{double})">
      <summary>EP message to <c>lowerBound</c>.</summary>
      <param name="integral">Incoming message from <c>integral</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="distribution">Constant value for <c>distribution</c>.</param>
      <returns>The outgoing EP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>lowerBound</c> as the random arguments are varied. The formula is <c>proj[p(lowerBound) sum_(integral) p(integral) factor(integral,lowerBound,upperBound,func,distribution)]/p(lowerBound)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional(Gaussian, double, Func{double, double}, ITruncatableDistribution{double})">
      <summary>EP message to <c>upperBound</c>.</summary>
      <param name="integral">Incoming message from <c>integral</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="distribution">Constant value for <c>distribution</c>.</param>
      <returns>The outgoing EP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>upperBound</c> as the random arguments are varied. The formula is <c>proj[p(upperBound) sum_(integral) p(integral) factor(integral,lowerBound,upperBound,func,distribution)]/p(upperBound)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional(Gaussian, Gaussian, Func{double, double}, ITruncatableDistribution{double})">
      <summary>EP message to <c>upperBound</c>.</summary>
      <param name="integral">Incoming message from <c>integral</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="distribution">Constant value for <c>distribution</c>.</param>
      <returns>The outgoing EP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>upperBound</c> as the random arguments are varied. The formula is <c>proj[p(upperBound) sum_(integral) p(integral) factor(integral,lowerBound,upperBound,func,distribution)]/p(upperBound)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IsBetweenGaussianOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.IsBetween(double, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LowerBoundAverageConditional(bool, double)">
      <summary>EP message to <c>lowerBound</c>.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>The outgoing EP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>lowerBound</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional(bool, double)">
      <summary>EP message to <c>upperBound</c>.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>The outgoing EP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>upperBound</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageConditional(Bernoulli, Gaussian, TruncatedGaussian, TruncatedGaussian)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(isBetween,lowerBound,upperBound) p(isBetween,lowerBound,upperBound) factor(isBetween,x,lowerBound,upperBound)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LowerBoundAverageConditional(Bernoulli, Gaussian, TruncatedGaussian, TruncatedGaussian, double)">
      <summary>EP message to <c>lowerBound</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="logZ">Buffer <c>logZ</c>.</param>
      <returns>The outgoing EP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>lowerBound</c> as the random arguments are varied. The formula is <c>proj[p(lowerBound) sum_(isBetween,x,upperBound) p(isBetween,x,upperBound) factor(isBetween,x,lowerBound,upperBound)]/p(lowerBound)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional(Bernoulli, Gaussian, TruncatedGaussian, TruncatedGaussian, double)">
      <summary>EP message to <c>upperBound</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="logZ">Buffer <c>logZ</c>.</param>
      <returns>The outgoing EP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>upperBound</c> as the random arguments are varied. The formula is <c>proj[p(upperBound) sum_(isBetween,x,lowerBound) p(isBetween,x,lowerBound) factor(isBetween,x,lowerBound,upperBound)]/p(upperBound)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogProbBetween(Gaussian, double, double)">
      <summary />
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="L" />
      <param name="U" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isBetween,x) p(isBetween,x) factor(isBetween,x,lowerBound,upperBound))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x) p(x) factor(isBetween,x,lowerBound,upperBound))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x) p(x) factor(isBetween,x,lowerBound,upperBound))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli, Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isBetween,x) p(isBetween,x) factor(isBetween,x,lowerBound,upperBound) / sum_isBetween p(isBetween) messageTo(isBetween))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsBetweenAverageConditional(Gaussian, double, double)">
      <summary>EP message to <c>isBetween</c>.</summary>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>isBetween</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isBetween</c> as the random arguments are varied. The formula is <c>proj[p(isBetween) sum_(x) p(x) factor(isBetween,x,lowerBound,upperBound)]/p(isBetween)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageConditional(Bernoulli, Gaussian, double, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(isBetween) p(isBetween) factor(isBetween,x,lowerBound,upperBound)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="NormalCdfRatioSqrMinusDerivative(double, double, double, double)">
      <summary />
      <param name="z" />
      <param name="r" />
      <param name="r1" />
      <param name="r3" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XAverageConditional(bool, Gaussian, double, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogProbBetween(Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="L" />
      <param name="U" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogZ(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary>Update the buffer <c>logZ</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>New value of buffer <c>logZ</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogZ(Bernoulli, Gaussian, TruncatedGaussian, TruncatedGaussian)">
      <summary>Update the buffer <c>logZ</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>New value of buffer <c>logZ</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isBetween,x,lowerBound,upperBound) p(isBetween,x,lowerBound,upperBound) factor(isBetween,x,lowerBound,upperBound))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Gaussian, Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="logZ">Buffer <c>logZ</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x,lowerBound,upperBound) p(x,lowerBound,upperBound) factor(isBetween,x,lowerBound,upperBound))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isBetween,x,lowerBound,upperBound) p(isBetween,x,lowerBound,upperBound) factor(isBetween,x,lowerBound,upperBound) / sum_isBetween p(isBetween) messageTo(isBetween))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsBetweenAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>isBetween</c>.</summary>
      <param name="X">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isBetween</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isBetween</c> as the random arguments are varied. The formula is <c>proj[p(isBetween) sum_(x,lowerBound,upperBound) p(x,lowerBound,upperBound) factor(isBetween,x,lowerBound,upperBound)]/p(isBetween)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="X" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="lowerBound" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="upperBound" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LowerBoundAverageConditional_Slow(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LowerBoundAverageConditional(Bernoulli, Gaussian, Gaussian, Gaussian, double)">
      <summary>EP message to <c>lowerBound</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="logZ">Buffer <c>logZ</c>.</param>
      <returns>The outgoing EP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>lowerBound</c> as the random arguments are varied. The formula is <c>proj[p(lowerBound) sum_(isBetween,x,upperBound) p(isBetween,x,upperBound) factor(isBetween,x,lowerBound,upperBound)]/p(lowerBound)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional_Slow(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional(Bernoulli, Gaussian, Gaussian, Gaussian, double)">
      <summary>EP message to <c>upperBound</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="logZ">Buffer <c>logZ</c>.</param>
      <returns>The outgoing EP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>upperBound</c> as the random arguments are varied. The formula is <c>proj[p(upperBound) sum_(isBetween,x,lowerBound) p(isBetween,x,lowerBound) factor(isBetween,x,lowerBound,upperBound)]/p(upperBound)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional_Slow(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(Bernoulli, Gaussian, Gaussian, Gaussian, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <param name="logZ">Buffer <c>logZ</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(isBetween,lowerBound,upperBound) p(isBetween,lowerBound,upperBound) factor(isBetween,x,lowerBound,upperBound)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isBetween" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsBetweenAverageLogarithm(Gaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>isBetween</c>.</summary>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>isBetween</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isBetween</c> as the random arguments are varied. The formula is <c>proj[sum_(x,lowerBound,upperBound) p(x,lowerBound,upperBound) factor(isBetween,x,lowerBound,upperBound)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>x</c>. Because the factor is deterministic, <c>isBetween</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(lowerBound,upperBound) p(lowerBound,upperBound) log(sum_isBetween p(isBetween) factor(isBetween,x,lowerBound,upperBound)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LowerBoundAverageLogarithm(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>lowerBound</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>lowerBound</c>. Because the factor is deterministic, <c>isBetween</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(x,upperBound) p(x,upperBound) log(sum_isBetween p(isBetween) factor(isBetween,x,lowerBound,upperBound)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageLogarithm(Bernoulli, Gaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>upperBound</c>.</summary>
      <param name="isBetween">Incoming message from <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>upperBound</c>. Because the factor is deterministic, <c>isBetween</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(x,lowerBound) p(x,lowerBound) log(sum_isBetween p(isBetween) factor(isBetween,x,lowerBound,upperBound)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm(bool, Gaussian, double, double, Gaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, Gaussian, double, double, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="X">Incoming message from <c>x</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LowerBoundAverageLogarithm()">
      <summary>VMP message to <c>lowerBound</c>.</summary>
      <returns>The outgoing VMP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>lowerBound</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageLogarithm()">
      <summary>VMP message to <c>upperBound</c>.</summary>
      <returns>The outgoing VMP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>upperBound</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IsBetweenTruncatedGaussianOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.IsBetween(double, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(TruncatedGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="X">Incoming message from <c>x</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, TruncatedGaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x) p(x) factor(isBetween,x,lowerBound,upperBound))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(bool, double, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm(bool, double, double)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="isBetween">Constant value for <c>isBetween</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IsGreaterThanOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.IsGreaterThan(int, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(isGreaterThan,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(isGreaterThan,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, int, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(isGreaterThan,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isGreaterThan) p(isGreaterThan) factor(isGreaterThan,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Discrete, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="to_isGreaterThan">Outgoing message to <c>isGreaterThan</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isGreaterThan,a) p(isGreaterThan,a) factor(isGreaterThan,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, int, Discrete, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="to_isGreaterThan">Outgoing message to <c>isGreaterThan</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isGreaterThan,b) p(isGreaterThan,b) factor(isGreaterThan,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isGreaterThan) p(isGreaterThan) factor(isGreaterThan,a,b) / sum_isGreaterThan p(isGreaterThan) messageTo(isGreaterThan))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(isGreaterThan,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(isGreaterThan,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Discrete, int)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(isGreaterThan,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(isGreaterThan,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(isGreaterThan,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Discrete, int)">
      <summary>Evidence message for EP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(isGreaterThan,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(int, Discrete)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(b) p(b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(Discrete, int)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a) p(a) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(Discrete, Discrete)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a,b) p(a,b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Discrete, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(isGreaterThan,b) p(isGreaterThan,b) factor(isGreaterThan,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, int, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(isGreaterThan) p(isGreaterThan) factor(isGreaterThan,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, Discrete, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(isGreaterThan,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(bool, int, Discrete)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Discrete, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(isGreaterThan,a) p(isGreaterThan,a) factor(isGreaterThan,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, int, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(isGreaterThan) p(isGreaterThan) factor(isGreaterThan,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, Discrete, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(isGreaterThan,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(bool, int, Discrete)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(Binomial, int)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a) p(a) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(int, Binomial)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(b) p(b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(Poisson, int)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a) p(a) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(int, Poisson)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(b) p(b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Poisson, int)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(isGreaterThan) p(isGreaterThan) factor(isGreaterThan,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, int, Poisson)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(isGreaterThan) p(isGreaterThan) factor(isGreaterThan,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, Discrete, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, int, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, Discrete, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, int, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsGreaterThanAverageLogarithm(int, Discrete)">
      <summary>VMP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(isGreaterThan,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsGreaterThanAverageLogarithm(Discrete, int)">
      <summary>VMP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(isGreaterThan,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsGreaterThanAverageLogarithm(Discrete, Discrete)">
      <summary>VMP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(isGreaterThan,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, Discrete, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>isGreaterThan</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_isGreaterThan p(isGreaterThan) factor(isGreaterThan,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, Discrete, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>isGreaterThan</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_isGreaterThan p(isGreaterThan) factor(isGreaterThan,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, int, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>isGreaterThan</c> integrated out. The formula is <c>sum_isGreaterThan p(isGreaterThan) factor(isGreaterThan,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, int, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>isGreaterThan</c> integrated out. The formula is <c>sum_isGreaterThan p(isGreaterThan) factor(isGreaterThan,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, Discrete, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, int, Discrete)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, Discrete, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, Discrete, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(isGreaterThan,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, Discrete, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(isGreaterThan,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, int, Discrete)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, int, Discrete)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IsGreaterThanDoubleOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.IsGreaterThan(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="IsGreaterThanAverageConditional(Beta, double)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a) p(a) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(double, Beta)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(b) p(b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(Beta, Beta)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a,b) p(a,b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, Beta, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Beta, Beta)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(isGreaterThan,b) p(isGreaterThan,b) factor(isGreaterThan,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, double, Beta)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Beta, Beta)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(isGreaterThan,a) p(isGreaterThan,a) factor(isGreaterThan,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(Gamma, double)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a) p(a) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(double, Gamma)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(b) p(b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsGreaterThanAverageConditional(Gamma, Gamma)">
      <summary>EP message to <c>isGreaterThan</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isGreaterThan</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isGreaterThan</c> as the random arguments are varied. The formula is <c>proj[p(isGreaterThan) sum_(a,b) p(a,b) factor(isGreaterThan,a,b)]/p(isGreaterThan)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, Gamma, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Gamma, Gamma)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(isGreaterThan,b) p(isGreaterThan,b) factor(isGreaterThan,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, double, Gamma)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Gamma, Gamma)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Incoming message from <c>isGreaterThan</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(isGreaterThan,a) p(isGreaterThan,a) factor(isGreaterThan,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isGreaterThan" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(bool, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="isGreaterThan">Constant value for <c>isGreaterThan</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IsPositiveOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.IsPositive(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(isPositive,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, double)">
      <summary>Evidence message for EP.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(isPositive,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(isPositive,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x) p(x) factor(isPositive,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isPositive,x) p(isPositive,x) factor(isPositive,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(isPositive,x) p(isPositive,x) factor(isPositive,x) / sum_isPositive p(isPositive) messageTo(isPositive))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x) p(x) factor(isPositive,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="IsPositiveAverageConditional(Gaussian)">
      <summary>EP message to <c>isPositive</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>isPositive</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isPositive</c> as the random arguments are varied. The formula is <c>proj[p(isPositive) sum_(x) p(x) factor(isPositive,x)]/p(isPositive)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsPositiveAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XAverageConditional(Bernoulli, Gaussian)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(isPositive) p(isPositive) factor(isPositive,x)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isPositive" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional_Helper(Bernoulli, Gaussian, bool)">
      <summary />
      <param name="isPositive">Incoming message from <c>isPositive</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="forceProper" />
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isPositive" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(Bernoulli, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(isPositive) p(isPositive) factor(isPositive,x)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isPositive" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(bool, Gaussian)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm(bool, Gaussian, Gaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(Bernoulli, Gaussian, Gaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>isPositive</c> integrated out. The formula is <c>sum_isPositive p(isPositive) factor(isPositive,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isPositive" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Bernoulli, Gaussian, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>.</param>
      <param name="X">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="X" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, Gaussian, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(bool)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageConditional(bool)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isPositive">Constant value for <c>isPositive</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageConditional(Bernoulli)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(isPositive) p(isPositive) factor(isPositive,x)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isPositive" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="IsPositiveAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>isPositive</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>isPositive</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>isPositive</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(isPositive,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor_helper(Gaussian, Gaussian)">
      <summary />
      <param name="X">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="X" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(TruncatedGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="X">Incoming message from <c>x</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IsPositiveOp_Proper">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.IsPositive(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="XAverageConditional(Bernoulli, Gaussian)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="isPositive">Incoming message from <c>isPositive</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(isPositive) p(isPositive) factor(isPositive,x)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="isPositive" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="JaggedSubarrayOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.JaggedSubarray{T}(IReadOnlyList{T}, int[][])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,items,indices) p(array,items,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,items,indices) p(array,items,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}}, IReadOnlyList{IReadOnlyList{DistributionType}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{ArrayType}(ArrayType)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{ArrayType, DistributionType}(ArrayType, IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{ArrayType, DistributionType}(ArrayType, IReadOnlyList{DistributionType}, IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}}, int)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="to_item" />
      <param name="item" />
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, DistributionType, ItemType}(IReadOnlyList{DistributionType}, ArrayType, ArrayType, IReadOnlyList{IReadOnlyList{int}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices) p(items,indices) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IReadOnlyList{IReadOnlyList{int}}, IReadOnlyList{IReadOnlyList{T}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(indices,items) p(indices,items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{DistributionType, ItemType, ResultType}(IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}}, ResultType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array,indices) p(array,indices) factor(items,array,indices)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IReadOnlyList{IReadOnlyList{int}}, IReadOnlyList{IReadOnlyList{T}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="JaggedSubarrayOp_NoDivide{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.JaggedSubarray{T}(IReadOnlyList{T}, int[][])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{DistributionType, ArrayType, ItemType}(ArrayType, IReadOnlyList{DistributionType}, IList{int[]}, IList{DistributionType}, ArrayType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="JaggedSubarrayWithMarginalOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.JaggedSubarrayWithMarginal{T}(IReadOnlyList{T}, int[][], out IReadOnlyList{T})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor{ItemType}(IList{ItemType}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices,marginal))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType}(IList{ItemType}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices,marginal) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{ItemType}(IList{ItemType}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType, ItemType}(IList{ItemType}, IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices,marginal))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType, ItemType}(IList{ItemType}, IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType, ItemType}(IReadOnlyList{DistributionType}, IList{ItemType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,items,indices) p(array,items,indices) factor(items,array,indices,marginal))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType, ItemType}(IReadOnlyList{DistributionType}, IList{ItemType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,items,indices) p(array,items,indices) factor(items,array,indices,marginal) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType, ItemType}(IReadOnlyList{DistributionType}, IList{ItemType}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices,marginal))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType, ItemType}(IList{ItemType}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices,marginal) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType, ItemType}(IList{ItemType}, IReadOnlyList{T}, IReadOnlyList{IReadOnlyList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}}, IReadOnlyList{IReadOnlyList{DistributionType}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices,marginal) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{ArrayType, DistributionType, ItemType}(ArrayType, IList{ItemType}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(array,items,indices) p(array,items,indices) factor(items,array,indices,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{ArrayType, DistributionType, Object, ItemType}(ArrayType, IList{ItemType}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(array,items,indices) p(array,items,indices) factor(items,array,indices,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrementItems{ArrayType, DistributionType, ItemType}(ItemType, ItemType, IReadOnlyList{IReadOnlyList{int}}, int, ArrayType)">
      <summary />
      <param name="item" />
      <param name="to_item" />
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>marginal</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{ArrayType, DistributionType, ItemType}(ItemType, ArrayType, ArrayType, IReadOnlyList{IReadOnlyList{int}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices,marginal)]/p(items)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType}(ArrayType, ArrayType, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrementArray{ArrayType}(ArrayType, ArrayType, ArrayType)">
      <summary />
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType, ItemType}(IReadOnlyList{IReadOnlyList{int}}, IList{ItemType}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(indices,items) p(indices,items) factor(items,array,indices,marginal)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{ArrayType}(ArrayType, ArrayType)">
      <summary>VMP message to <c>marginal</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>marginal</c>. The formula is <c>exp(sum_(array) p(array) log(factor(items,array,indices,marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{DistributionType, ItemType, ResultType}(IReadOnlyList{DistributionType}, IReadOnlyList{IReadOnlyList{int}}, ResultType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array,indices) p(array,indices) factor(items,array,indices,marginal)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType, ItemType}(IList{ItemType}, IReadOnlyList{IReadOnlyList{int}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices,marginal)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType, ItemType}(IReadOnlyList{IReadOnlyList{int}}, IList{ItemType}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices,marginal)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LogOp_EP">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Log(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(log,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(log,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(log,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(d) p(d) factor(log,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="log">Incoming message from <c>log</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(log) p(log) factor(log,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gamma, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="log">Incoming message from <c>log</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_log">Outgoing message to <c>log</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(log,d) p(log,d) factor(log,d))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gamma, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="log">Incoming message from <c>log</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_log">Outgoing message to <c>log</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(log,d) p(log,d) factor(log,d) / sum_log p(log) messageTo(log))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(d) p(d) factor(log,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="DAverageConditional(Gaussian, double)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="log">Incoming message from <c>log</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(log) p(log) factor(log,d)]/p(d)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DAverageConditional(Gaussian, Gamma, Gaussian)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="log">Incoming message from <c>log</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="to_log">Previous outgoing message to <c>log</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>d</c> as the random arguments are varied. The formula is <c>proj[p(d) sum_(log) p(log) factor(log,d)]/p(d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="log" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageConditional(double)">
      <summary>EP message to <c>d</c>.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <returns>The outgoing EP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageConditional(double)">
      <summary>EP message to <c>log</c>.</summary>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>The outgoing EP message to the <c>log</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>log</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageConditional(Gaussian, Gamma, Gaussian)">
      <summary>EP message to <c>log</c>.</summary>
      <param name="log">Incoming message from <c>log</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>log</c> as the random arguments are varied. The formula is <c>proj[p(log) sum_(d) p(d) factor(log,d)]/p(log)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="log" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LogOp_VMP">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Log(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageLogarithm(Gaussian, double, Gaussian)">
      <summary>VMP message to <c>log</c>.</summary>
      <param name="log">Incoming message from <c>log</c>.</param>
      <param name="d">Constant value for <c>d</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>log</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="DAverageLogarithm(double, Gamma, Gamma)">
      <summary>VMP message to <c>d</c>.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <param name="d">Incoming message from <c>d</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageLogarithm(Gaussian, Gamma, Gaussian)">
      <summary>VMP message to <c>log</c>.</summary>
      <param name="log">Incoming message from <c>log</c>.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>log</c> as the random arguments are varied. The formula is <c>proj[sum_(d) p(d) factor(log,d)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DAverageLogarithm(Gaussian, Gamma, Gamma)">
      <summary>VMP message to <c>d</c>.</summary>
      <param name="log">Incoming message from <c>log</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="d">Incoming message from <c>d</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_D">Previous outgoing message to <c>D</c>.</param>
      <returns>The outgoing VMP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> with <c>log</c> integrated out. The formula is <c>sum_log p(log) factor(log,d)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="log" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="d" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(log,d))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageLogarithm(double)">
      <summary>VMP message to <c>log</c>.</summary>
      <param name="d">Constant value for <c>d</c>.</param>
      <returns>The outgoing VMP message to the <c>log</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>log</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="DAverageLogarithm(double)">
      <summary>VMP message to <c>d</c>.</summary>
      <param name="log">Constant value for <c>log</c>.</param>
      <returns>The outgoing VMP message to the <c>d</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>d</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LogisticOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Logistic(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="logistic">Constant value for <c>logistic</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(logistic,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="logistic">Constant value for <c>logistic</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(logistic,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="logistic">Constant value for <c>logistic</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(logistic,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Beta, double)">
      <summary>Evidence message for EP.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(logistic) p(logistic) factor(logistic,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="logistic">Constant value for <c>logistic</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x) p(x) factor(logistic,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="logistic">Constant value for <c>logistic</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x) p(x) factor(logistic,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Beta, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="falseMsg">Buffer <c>falseMsg</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(logistic,x) p(logistic,x) factor(logistic,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Beta, Gaussian, Gaussian, Beta)">
      <summary>Evidence message for EP.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="falseMsg">Buffer <c>falseMsg</c>.</param>
      <param name="to_logistic">Outgoing message to <c>logistic</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(logistic,x) p(logistic,x) factor(logistic,x) / sum_logistic p(logistic) messageTo(logistic))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogisticAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogisticAverageConditional(Beta, Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>logistic</c>.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="falseMsg">Buffer <c>falseMsg</c>.</param>
      <param name="to_x">Previous outgoing message to <c>x</c>.</param>
      <returns>The outgoing EP message to the <c>logistic</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>logistic</c> as the random arguments are varied. The formula is <c>proj[p(logistic) sum_(x) p(x) factor(logistic,x)]/p(logistic)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="logistic">Constant value for <c>logistic</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="FalseMsgInit()">
      <summary>Initialize the buffer <c>falseMsg</c>.</summary>
      <returns>Initial value of buffer <c>falseMsg</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="FalseMsg(Beta, Gaussian, Gaussian)">
      <summary>Update the buffer <c>falseMsg</c>.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="falseMsg">Buffer <c>falseMsg</c>.</param>
      <returns>New value of buffer <c>falseMsg</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logistic" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(Beta, Gaussian)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="falseMsg">Buffer <c>falseMsg</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(logistic) p(logistic) factor(logistic,x)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logistic" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, Beta, Beta)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="logistic">Incoming message from <c>logistic</c>.</param>
      <param name="to_logistic">Previous outgoing message to <c>logistic</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogisticAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>logistic</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>logistic</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>logistic</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(logistic,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(Beta, Gaussian, Gaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_X">Previous outgoing message to <c>X</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>logistic</c> integrated out. The formula is <c>sum_logistic p(logistic) factor(logistic,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logistic" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(double)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="logistic">Constant value for <c>logistic</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LogisticOp_JJ96">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Logistic(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(Beta, Gaussian, Beta)">
      <summary>Evidence message for VMP.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_logistic">Previous outgoing message to <c>logistic</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogisticAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>logistic</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>logistic</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>logistic</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(logistic,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(Beta, Gaussian, Gaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>logistic</c> integrated out. The formula is <c>sum_logistic p(logistic) factor(logistic,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logistic" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="LogisticOp_SJ99">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Logistic(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(Beta, Gaussian, Beta, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_logistic">Previous outgoing message to <c>logistic</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AInit()">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A(Gaussian, double)">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="logSumExpBound(double, double, double)">
      <summary />
      <param name="m" />
      <param name="v" />
      <param name="a">Buffer <c>a</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogisticAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>logistic</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>logistic</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>logistic</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(logistic,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogisticInit()">
      <summary>Initialize the buffer <c>logistic</c>.</summary>
      <returns>Initial value of buffer <c>logistic</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XInit()">
      <summary>Initialize the buffer <c>x</c>.</summary>
      <returns>Initial value of buffer <c>x</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm(Beta, Gaussian, Gaussian, double)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="logistic">Incoming message from <c>logistic</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="to_x">Previous outgoing message to <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>logistic</c> integrated out. The formula is <c>sum_logistic p(logistic) factor(logistic,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="logistic" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SequentialCutOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="LowPriority.SequentialCut{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="FirstAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>first</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>first</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>first</c> as the random arguments are varied. The formula is <c>proj[p(first) sum_(value) p(value) factor(first,value,second)]/p(first)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="FirstAverageConditional(T)">
      <summary>EP message to <c>first</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>first</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>first</c> as the random arguments are varied. The formula is <c>proj[p(first) sum_(value) p(value) factor(first,value,second)]/p(first)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SecondAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>second</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>second</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>second</c> as the random arguments are varied. The formula is <c>proj[p(second) sum_(value) p(value) factor(first,value,second)]/p(second)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="first">Incoming message from <c>first</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(first) p(first) factor(first,value,second)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SequentialCopyOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="LowPriority.SequentialCopy{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{T}(T, T, T)">
      <summary>Evidence message for EP.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(value,first,second) p(value,first,second) factor(first,value,second) / sum_first p(first) messageTo(first))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="FirstAverageConditional{T}(T, T, T)">
      <summary>EP message to <c>first</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>first</c> as the random arguments are varied. The formula is <c>proj[p(first) sum_(value,second) p(value,second) factor(first,value,second)]/p(first)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SecondAverageConditional{T}(T, T, T)">
      <summary>EP message to <c>second</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>second</c> as the random arguments are varied. The formula is <c>proj[p(second) sum_(value,first) p(value,first) factor(first,value,second)]/p(second)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{T}(T, T, T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="first">Incoming message from <c>first</c>.</param>
      <param name="second">Incoming message from <c>second</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(first,second) p(first,second) factor(first,value,second)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LowPriorityForwardOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="LowPriority.Forward{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ForwardAverageConditional{T}(T)">
      <summary>EP message to <c>forward</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>forward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>forward</c> as the random arguments are varied. The formula is <c>proj[p(forward) sum_(value) p(value) factor(forward,value)]/p(forward)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{T}(T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="forward">Incoming message from <c>forward</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(forward) p(forward) factor(forward,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LowPriorityBackwardOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="LowPriority.Backward{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="BackwardAverageConditional{T}(T)">
      <summary>EP message to <c>backward</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>backward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>backward</c> as the random arguments are varied. The formula is <c>proj[p(backward) sum_(value) p(value) factor(backward,value)]/p(backward)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{T}(T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="backward">Incoming message from <c>backward</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(backward) p(backward) factor(backward,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{T}(T)">
      <summary>Evidence message for EP.</summary>
      <param name="backward">Incoming message from <c>backward</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(backward) p(backward) factor(backward,value) / sum_backward p(backward) messageTo(backward))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="MatrixMultiplyOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.MatrixMultiply(double[,], double[,])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(matrixMultiply,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageLogarithm(DistributionArray2D{Gaussian}, DistributionArray2D{Gaussian}, DistributionStructArray2D{Gaussian, double})">
      <summary>VMP message to <c>matrixMultiply</c>.</summary>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>matrixMultiply</c> as the random arguments are varied. The formula is <c>proj[sum_(A,B) p(A,B) factor(matrixMultiply,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageLogarithmInit(DistributionArray2D{Gaussian}, DistributionArray2D{Gaussian})">
      <summary />
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageLogarithmInit(double[,], DistributionArray2D{Gaussian})">
      <summary />
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageLogarithmInit(DistributionArray2D{Gaussian}, double[,])">
      <summary />
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageLogarithm(double[,], DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>VMP message to <c>matrixMultiply</c>.</summary>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>matrixMultiply</c> as the random arguments are varied. The formula is <c>proj[sum_(B) p(B) factor(matrixMultiply,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageLogarithm(DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>VMP message to <c>matrixMultiply</c>.</summary>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>matrixMultiply</c> as the random arguments are varied. The formula is <c>proj[sum_(A) p(A) factor(matrixMultiply,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. Because the factor is deterministic, <c>matrixMultiply</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(B) p(B) log(sum_matrixMultiply p(matrixMultiply) factor(matrixMultiply,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="matrixMultiply" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <param name="to_A">Previous outgoing message to <c>A</c>.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> with <c>matrixMultiply</c> integrated out. The formula is <c>sum_matrixMultiply p(matrixMultiply) factor(matrixMultiply,A,B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="matrixMultiply" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. Because the factor is deterministic, <c>matrixMultiply</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(A) p(A) log(sum_matrixMultiply p(matrixMultiply) factor(matrixMultiply,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="matrixMultiply" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> with <c>matrixMultiply</c> integrated out. The formula is <c>sum_matrixMultiply p(matrixMultiply) factor(matrixMultiply,A,B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="matrixMultiply" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double[,])">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(double[,])">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageConditional(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>matrixMultiply</c>.</summary>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>matrixMultiply</c> as the random arguments are varied. The formula is <c>proj[p(matrixMultiply) sum_(A,B) p(A,B) factor(matrixMultiply,A,B)]/p(matrixMultiply)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>A</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(matrixMultiply,B) p(matrixMultiply,B) factor(matrixMultiply,A,B)]/p(A)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>B</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>.</param>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(matrixMultiply,A) p(matrixMultiply,A) factor(matrixMultiply,A,B)]/p(B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double[,], double[,], double[,])">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(matrixMultiply,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double[,], double[,], double[,])">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(matrixMultiply,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double[,], double[,], double[,])">
      <summary>Evidence message for VMP.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(matrixMultiply,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(matrixMultiply,B) p(matrixMultiply,B) factor(matrixMultiply,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double[,], double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(B) p(B) factor(matrixMultiply,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, double[,])">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>.</param>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(matrixMultiply,A) p(matrixMultiply,A) factor(matrixMultiply,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double[,], DistributionStructArray2D{Gaussian, double}, double[,])">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A) p(A) factor(matrixMultiply,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(matrixMultiply,B) p(matrixMultiply,B) factor(matrixMultiply,A,B) / sum_matrixMultiply p(matrixMultiply) messageTo(matrixMultiply))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, double[,])">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>.</param>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(matrixMultiply,A) p(matrixMultiply,A) factor(matrixMultiply,A,B) / sum_matrixMultiply p(matrixMultiply) messageTo(matrixMultiply))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double[,], double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(B) p(B) factor(matrixMultiply,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double[,], DistributionStructArray2D{Gaussian, double}, double[,])">
      <summary>Evidence message for EP.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Incoming message from <c>A</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A) p(A) factor(matrixMultiply,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageConditional(double[,], DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>matrixMultiply</c>.</summary>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>matrixMultiply</c> as the random arguments are varied. The formula is <c>proj[p(matrixMultiply) sum_(B) p(B) factor(matrixMultiply,A,B)]/p(matrixMultiply)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MatrixMultiplyAverageConditional(DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>matrixMultiply</c>.</summary>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>matrixMultiply</c> as the random arguments are varied. The formula is <c>proj[p(matrixMultiply) sum_(A) p(A) factor(matrixMultiply,A,B)]/p(matrixMultiply)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>A</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(matrixMultiply) p(matrixMultiply) factor(matrixMultiply,A,B)]/p(A)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="matrixMultiply" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(DistributionStructArray2D{Gaussian, double}, double[,], DistributionStructArray2D{Gaussian, double}, DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>B</c>.</summary>
      <param name="matrixMultiply">Incoming message from <c>matrixMultiply</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="B">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(matrixMultiply) p(matrixMultiply) factor(matrixMultiply,A,B)]/p(B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="matrixMultiply" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double[,], double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>A</c>.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="B">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(double[,], double[,], DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>B</c>.</summary>
      <param name="matrixMultiply">Constant value for <c>matrixMultiply</c>.</param>
      <param name="A">Constant value for <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="MatrixVectorProductOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Product(Matrix, Vector)" /></description></item><item><description><see cref="Factor.Product(double[,], Vector)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Vector, Matrix, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Matrix, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Matrix, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="BVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>BVariance</c>.</summary>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Initial value of buffer <c>BVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>BVariance</c>.</summary>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>BMean</c>.</summary>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Initial value of buffer <c>BMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>BMean</c>.</summary>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="to_product">Outgoing message to <c>product</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product) p(product) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Matrix, VectorGaussian, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian, Matrix, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(VectorGaussian, Matrix, VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Matrix, VectorGaussian, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Matrix, VectorGaussian, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(Matrix, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>product</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(Matrix, Vector, PositiveDefiniteMatrix, VectorGaussianMoments)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>product</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(double[,], Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(double[,], Vector, PositiveDefiniteMatrix, VectorGaussianMoments)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(DistributionArray2D{Gaussian, double}, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(DistributionArray2D{Gaussian, double}, Vector, PositiveDefiniteMatrix, VectorGaussianMoments)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditionalInit(Matrix)">
      <summary />
      <param name="A">Constant value for <c>a</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithmInit(Matrix)">
      <summary />
      <param name="A">Constant value for <c>a</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Matrix, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>product</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Matrix, Vector, PositiveDefiniteMatrix, VectorGaussianMoments)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>product</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double[,], Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(double[,], Vector, PositiveDefiniteMatrix, VectorGaussianMoments)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussian, Matrix, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussianMoments, Matrix, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussian, double[,], VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussianMoments, double[,], VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussian, DistributionArray2D{Gaussian, double}, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussianMoments, DistributionArray2D{Gaussian, double}, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(VectorGaussian, Matrix, VectorGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(VectorGaussianMoments, Matrix, VectorGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Vector, Matrix, VectorGaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Vector, Matrix, VectorGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(VectorGaussian, DistributionArray2D{Gaussian, double}, Vector, PositiveDefiniteMatrix, DistributionStructArray2D{Gaussian, double})">
      <summary>EP message to <c>a</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="BMean">Buffer <c>BMean</c>.</param>
      <param name="BVariance">Buffer <c>BVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="MaxGaussianOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Max(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(max,val1,val2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(max,val1,val2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(max,val1,val2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(max,val1,val2) p(max,val1,val2) factor(max,val1,val2))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(max,val2) p(max,val2) factor(max,val1,val2))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(max,val1) p(max,val1) factor(max,val1,val2))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(val1,val2) p(val1,val2) factor(max,val1,val2))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(val2) p(val2) factor(max,val1,val2))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(val1) p(val1) factor(max,val1,val2))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(max,val1,val2) p(max,val1,val2) factor(max,val1,val2) / sum_max p(max) messageTo(max))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(max,val2) p(max,val2) factor(max,val1,val2) / sum_max p(max) messageTo(max))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(max,val1) p(max,val1) factor(max,val1,val2) / sum_max p(max) messageTo(max))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(val1,val2) p(val1,val2) factor(max,val1,val2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(val2) p(val2) factor(max,val1,val2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(val1) p(val1) factor(max,val1,val2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MaxAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MaxAverageConditional(Gaussian, double, Gaussian)">
      <summary>EP message to <c>max</c>.</summary>
      <param name="max">Incoming message from <c>max</c>.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>max</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>max</c> as the random arguments are varied. The formula is <c>proj[p(max) sum_(val2) p(val2) factor(max,val1,val2)]/p(max)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MaxAverageConditional(Gaussian, Gaussian, double)">
      <summary>EP message to <c>max</c>.</summary>
      <param name="max">Incoming message from <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>max</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>max</c> as the random arguments are varied. The formula is <c>proj[p(max) sum_(val1) p(val1) factor(max,val1,val2)]/p(max)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MaxAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>max</c>.</summary>
      <param name="max">Incoming message from <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>max</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>max</c> as the random arguments are varied. The formula is <c>proj[p(max) sum_(val1,val2) p(val1,val2) factor(max,val1,val2)]/p(max)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val1</c> as the random arguments are varied. The formula is <c>proj[p(val1) sum_(max,val2) p(max,val2) factor(max,val1,val2)]/p(val1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, Gaussian, Gaussian)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val1</c> as the random arguments are varied. The formula is <c>proj[p(val1) sum_(val2) p(val2) factor(max,val1,val2)]/p(val1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, double)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val1</c> as the random arguments are varied. The formula is <c>proj[p(val1) sum_(max) p(max) factor(max,val1,val2)]/p(val1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, Gaussian, double)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>val1</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val2</c> as the random arguments are varied. The formula is <c>proj[p(val2) sum_(max,val1) p(max,val1) factor(max,val1,val2)]/p(val2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, Gaussian, Gaussian)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Incoming message from <c>val1</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val2</c> as the random arguments are varied. The formula is <c>proj[p(val2) sum_(val1) p(val1) factor(max,val1,val2)]/p(val2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, double, Gaussian)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val2</c> as the random arguments are varied. The formula is <c>proj[p(val2) sum_(max) p(max) factor(max,val1,val2)]/p(val2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, double, Gaussian)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="max">Constant value for <c>max</c>.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>val2</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="MaxGammaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Max(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MaxAverageConditional(Gamma, double)">
      <summary>EP message to <c>max</c>.</summary>
      <param name="a">Incoming message from <c>val1</c>.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>max</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>max</c> as the random arguments are varied. The formula is <c>proj[p(max) sum_(val1) p(val1) factor(max,val1,val2)]/p(max)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MaxAverageConditional(double, Gamma)">
      <summary>EP message to <c>max</c>.</summary>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>max</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>max</c> as the random arguments are varied. The formula is <c>proj[p(max) sum_(val2) p(val2) factor(max,val1,val2)]/p(max)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val1</c> as the random arguments are varied. The formula is <c>proj[p(val1) sum_(max) p(max) factor(max,val1,val2)]/p(val1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val2</c> as the random arguments are varied. The formula is <c>proj[p(val2) sum_(max) p(max) factor(max,val1,val2)]/p(val2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="MaxTruncatedGammaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Max(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MaxAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>max</c>.</summary>
      <param name="a">Incoming message from <c>val1</c>.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>max</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>max</c> as the random arguments are varied. The formula is <c>proj[p(max) sum_(val1) p(val1) factor(max,val1,val2)]/p(max)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MaxAverageConditional(double, TruncatedGamma)">
      <summary>EP message to <c>max</c>.</summary>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>max</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>max</c> as the random arguments are varied. The formula is <c>proj[p(max) sum_(val2) p(val2) factor(max,val1,val2)]/p(max)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val1</c> as the random arguments are varied. The formula is <c>proj[p(val1) sum_(max) p(max) factor(max,val1,val2)]/p(val1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="max">Incoming message from <c>max</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val2</c> as the random arguments are varied. The formula is <c>proj[p(val2) sum_(max) p(max) factor(max,val1,val2)]/p(val2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="max" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="MinGammaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Min(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MinAverageConditional(Gamma, double)">
      <summary>EP message to <c>min</c>.</summary>
      <param name="a">Incoming message from <c>val1</c>.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>min</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>min</c> as the random arguments are varied. The formula is <c>proj[p(min) sum_(val1) p(val1) factor(min,val1,val2)]/p(min)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MinAverageConditional(double, Gamma)">
      <summary>EP message to <c>min</c>.</summary>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>min</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>min</c> as the random arguments are varied. The formula is <c>proj[p(min) sum_(val2) p(val2) factor(min,val1,val2)]/p(min)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="min">Incoming message from <c>min</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val1</c> as the random arguments are varied. The formula is <c>proj[p(val1) sum_(min) p(min) factor(min,val1,val2)]/p(val1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="min" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="min">Incoming message from <c>min</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val2</c> as the random arguments are varied. The formula is <c>proj[p(val2) sum_(min) p(min) factor(min,val1,val2)]/p(val2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="min" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="MinTruncatedGammaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Min(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MinAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>min</c>.</summary>
      <param name="a">Incoming message from <c>val1</c>.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>min</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>min</c> as the random arguments are varied. The formula is <c>proj[p(min) sum_(val1) p(val1) factor(min,val1,val2)]/p(min)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MinAverageConditional(double, TruncatedGamma)">
      <summary>EP message to <c>min</c>.</summary>
      <param name="a">Constant value for <c>val1</c>.</param>
      <param name="b">Incoming message from <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>min</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>min</c> as the random arguments are varied. The formula is <c>proj[p(min) sum_(val2) p(val2) factor(min,val1,val2)]/p(min)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val1</c>.</summary>
      <param name="min">Incoming message from <c>min</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>val2</c>.</param>
      <returns>The outgoing EP message to the <c>val1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val1</c> as the random arguments are varied. The formula is <c>proj[p(val1) sum_(min) p(min) factor(min,val1,val2)]/p(val1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="min" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>val2</c>.</summary>
      <param name="min">Incoming message from <c>min</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>val1</c>.</param>
      <returns>The outgoing EP message to the <c>val2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>val2</c> as the random arguments are varied. The formula is <c>proj[p(val2) sum_(min) p(min) factor(min,val1,val2)]/p(val2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="min" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="MultinomialOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Rand.Multinomial(int, Vector)" /></description></item><item><description><see cref="Factor.MultinomialList(int, Vector)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(IList{Discrete})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(multinomial) p(multinomial) factor(multinomial,trialCount,probs) / sum_multinomial p(multinomial) messageTo(multinomial))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(IList{int}, int, IList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <param name="p">Incoming message from <c>probs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(multinomial,probs) p(multinomial,probs) factor(multinomial,trialCount,probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(IList{int}, int, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <param name="p">Incoming message from <c>probs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(multinomial,probs) p(multinomial,probs) factor(multinomial,trialCount,probs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{int}, int, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <param name="p">Incoming message from <c>probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(multinomial,probs) p(multinomial,probs) factor(multinomial,trialCount,probs) / sum_multinomial p(multinomial) messageTo(multinomial))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{int}, int, IList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <param name="p">Incoming message from <c>probs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(multinomial,probs) p(multinomial,probs) factor(multinomial,trialCount,probs) / sum_multinomial p(multinomial) messageTo(multinomial))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageConditional(IList{int}, int)">
      <summary>EP message to <c>probs</c>.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <returns>The outgoing EP message to the <c>probs</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probs</c> as the random arguments are varied. The formula is <c>proj[p(probs) sum_(multinomial) p(multinomial) factor(multinomial,trialCount,probs)]/p(probs)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{int}, int, IList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <param name="p">Incoming message from <c>probs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(multinomial,probs) p(multinomial,probs) log(factor(multinomial,trialCount,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanLog(Dirichlet)">
      <summary>Update the buffer <c>MeanLog</c>.</summary>
      <param name="p">Incoming message from <c>probs</c>.</param>
      <returns>New value of buffer <c>MeanLog</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IList{int}, int, Dirichlet, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <param name="p">Incoming message from <c>probs</c>.</param>
      <param name="MeanLog">Buffer <c>MeanLog</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(multinomial,probs) p(multinomial,probs) log(factor(multinomial,trialCount,probs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="PAverageLogarithm(IList{int}, int)">
      <summary>VMP message to <c>probs</c>.</summary>
      <param name="sample">Incoming message from <c>multinomial</c>.</param>
      <param name="trialCount">Constant value for <c>trialCount</c>.</param>
      <returns>The outgoing VMP message to the <c>probs</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>probs</c>. The formula is <c>exp(sum_(multinomial) p(multinomial) log(factor(multinomial,trialCount,probs)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BooleanNotOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Not(bool)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="not">Constant value for <c>not</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(not,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="not">Constant value for <c>not</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(not,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, bool)">
      <summary>Evidence message for VMP.</summary>
      <param name="not">Constant value for <c>not</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(not,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="NotAverageConditional(Bernoulli)">
      <summary>EP message to <c>not</c>.</summary>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>not</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>not</c> as the random arguments are varied. The formula is <c>proj[p(not) sum_(b) p(b) factor(not,b)]/p(not)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="not">Incoming message from <c>not</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(not) p(not) factor(not,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="not" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="not">Constant value for <c>not</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="not">Incoming message from <c>not</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="to_not">Outgoing message to <c>not</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(not,b) p(not,b) factor(not,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="not">Incoming message from <c>not</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(not) p(not) factor(not,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="not">Constant value for <c>not</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(not,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="not">Incoming message from <c>not</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(not) p(not) factor(not,b) / sum_not p(not) messageTo(not))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="not">Constant value for <c>not</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(not,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="NotAverageLogarithm(Bernoulli)">
      <summary>VMP message to <c>not</c>.</summary>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>not</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>not</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(not,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="not">Incoming message from <c>not</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>not</c> integrated out. The formula is <c>sum_not p(not) factor(not,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="not" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="not">Constant value for <c>not</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(not,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="BooleanOrOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Or(bool, bool)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(bool, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(or,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(or,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(bool, bool, bool)">
      <summary>Evidence message for VMP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(or,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, bool, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Incoming message from <c>or</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(or) p(or) factor(or,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="OrAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>or</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>or</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>or</c> as the random arguments are varied. The formula is <c>proj[p(or) sum_(a,b) p(a,b) factor(or,a,b)]/p(or)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="OrAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>or</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>or</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>or</c> as the random arguments are varied. The formula is <c>proj[p(or) sum_(b) p(b) factor(or,a,b)]/p(or)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="OrAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>or</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>or</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>or</c> as the random arguments are varied. The formula is <c>proj[p(or) sum_(a) p(a) factor(or,a,b)]/p(or)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(or,b) p(or,b) factor(or,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(or,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(or) p(or) factor(or,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(bool, bool)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(or,a) p(or,a) factor(or,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Bernoulli, bool)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(or) p(or) factor(or,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(bool, Bernoulli)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(or,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(bool, bool)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Incoming message from <c>or</c>.</param>
      <param name="to_or">Outgoing message to <c>or</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(or) p(or) factor(or,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(or,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, Bernoulli, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(or,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(or,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Incoming message from <c>or</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(or) p(or) factor(or,a,b) / sum_or p(or) messageTo(or))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Bernoulli, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(or,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, Bernoulli, bool)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(or,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, bool, Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(or,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(or,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="OrAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>or</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>or</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>or</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(or,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="OrAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>or</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>or</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>or</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(or,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="OrAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>or</c>.</summary>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>or</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>or</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(or,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>or</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_or p(or) factor(or,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>or</c> integrated out. The formula is <c>sum_or p(or) factor(or,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(or,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(bool, bool)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>or</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_or p(or) factor(or,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Bernoulli, bool)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="or">Incoming message from <c>or</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>or</c> integrated out. The formula is <c>sum_or p(or) factor(or,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="or" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, Bernoulli)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(or,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(bool, bool)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="or">Constant value for <c>or</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DoublePlusEvidenceOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Plus(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum) p(Sum) factor(Sum,A,B) / sum_Sum p(Sum) messageTo(Sum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <param name="to_b">Outgoing message to <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(B) p(B) factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="Sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="to_a">Outgoing message to <c>a</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A) p(A) factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DoublePlusVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Plus(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[sum_(A,B) p(A,B) factor(Sum,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[sum_(B) p(B) factor(Sum,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[sum_(A) p(A) factor(Sum,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(double, double)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Sum</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumDeriv(Gaussian, double)">
      <summary />
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SumDeriv(double, Gaussian)">
      <summary />
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SumDeriv(Gaussian, Gaussian, Gaussian, Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary />
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="a_deriv" />
      <param name="to_a">Previous outgoing message to <c>a</c>.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b_deriv" />
      <param name="to_b">Previous outgoing message to <c>b</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Gaussian, Gaussian, Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="a_deriv" />
      <param name="to_a">Previous outgoing message to <c>a</c>.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b_deriv" />
      <param name="to_b">Previous outgoing message to <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. Because the factor is deterministic, <c>Sum</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(B) p(B) log(sum_Sum p(Sum) factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. Because the factor is deterministic, <c>Sum</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(B) p(B) log(sum_Sum p(Sum) factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="Sum">Constant value for <c>Sum</c>.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. The formula is <c>exp(sum_(B) p(B) log(factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> with <c>Sum</c> integrated out. The formula is <c>sum_Sum p(Sum) factor(Sum,A,B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="Sum">Constant value for <c>Sum</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. Because the factor is deterministic, <c>Sum</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(A) p(A) log(sum_Sum p(Sum) factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="Sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. The formula is <c>exp(sum_(A) p(A) log(factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> with <c>Sum</c> integrated out. The formula is <c>sum_Sum p(Sum) factor(Sum,A,B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="Sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="PlusGammaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Plus(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SumAverageConditional(GammaPower, GammaPower, GammaPower)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(A,B) p(A,B) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(GammaPower, GammaPower, GammaPower, GammaPower, GammaPower)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_a">Previous outgoing message to <c>a</c>.</param>
      <param name="to_b">Previous outgoing message to <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(Sum,B) p(Sum,B) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional2(GammaPower, GammaPower, GammaPower, GammaPower)">
      <summary />
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="GammaPowerFromDerivLogZ(GammaPower, double, double)">
      <summary />
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="dlogZ" />
      <param name="ddlogZ" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetInverseGammaMomentDerivs(GammaPower, out double, out double, out double, out double, out double, out double)">
      <summary />
      <param name="gammaPower" />
      <param name="mean" />
      <param name="dmean" />
      <param name="ddmean" />
      <param name="variance" />
      <param name="dvariance" />
      <param name="ddvariance" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetInverseGammaDerivs(double, double, double, double, double, double, out double, out double, out double, out double)">
      <summary />
      <param name="mean" />
      <param name="dmean" />
      <param name="ddmean" />
      <param name="variance" />
      <param name="dvariance" />
      <param name="ddvariance" />
      <param name="ds" />
      <param name="dds" />
      <param name="dr" />
      <param name="ddr" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetGammaMomentDerivs(GammaPower, out double, out double, out double, out double, out double, out double)">
      <summary />
      <param name="gammaPower" />
      <param name="mean" />
      <param name="dmean" />
      <param name="ddmean" />
      <param name="variance" />
      <param name="dvariance" />
      <param name="ddvariance" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetGammaDerivs(double, double, double, double, double, double, out double, out double, out double, out double)">
      <summary />
      <param name="mean" />
      <param name="dmean" />
      <param name="ddmean" />
      <param name="variance" />
      <param name="dvariance" />
      <param name="ddvariance" />
      <param name="ds" />
      <param name="dds" />
      <param name="dr" />
      <param name="ddr" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetDerivLogZ(GammaPower, GammaPower, double, double, double, double, out double, out double)">
      <summary />
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="toSum" />
      <param name="ds" />
      <param name="dds" />
      <param name="dr" />
      <param name="ddr" />
      <param name="dlogZ" />
      <param name="ddlogZ" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GetPosteriorMeanAndVariance(Gamma, double, double, out double, out double)">
      <summary />
      <param name="prior" />
      <param name="dlogZ" />
      <param name="ddlogZ" />
      <param name="mean" />
      <param name="variance" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(GammaPower, GammaPower, GammaPower, GammaPower, GammaPower)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_a">Previous outgoing message to <c>a</c>.</param>
      <param name="to_b">Previous outgoing message to <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(Sum,A) p(Sum,A) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional2(GammaPower, GammaPower, GammaPower, GammaPower)">
      <summary />
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(GammaPower, GammaPower, GammaPower)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum,A,B) p(Sum,A,B) factor(Sum,A,B))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(GammaPower, GammaPower, GammaPower)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum,A,B) p(Sum,A,B) factor(Sum,A,B) / sum_Sum p(Sum) messageTo(Sum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(GammaPower, double)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(A) p(A) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(double, GammaPower)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(B) p(B) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(GammaPower, double)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(Sum) p(Sum) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(GammaPower, double)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(Sum) p(Sum) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="PlusGammaVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Plus(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SumAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[sum_(A,B) p(A,B) factor(Sum,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(GammaPower, GammaPower, GammaPower)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[sum_(A,B) p(A,B) factor(Sum,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanInverseOfSum(GammaPower, GammaPower)">
      <summary />
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InvGammaFromShapeAndMeanInverse(double, double)">
      <summary />
      <param name="shape" />
      <param name="meanInverse" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="InvGammaFromMeanAndMeanInverse(double, double)">
      <summary />
      <param name="mean" />
      <param name="meanInverse" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gamma, Gamma, Gamma)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. Because the factor is deterministic, <c>Sum</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(B) p(B) log(sum_Sum p(Sum) factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(GammaPower, GammaPower, GammaPower, GammaPower, GammaPower)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_a">Previous outgoing message to <c>a</c>.</param>
      <param name="to_b">Previous outgoing message to <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>A</c>. Because the factor is deterministic, <c>Sum</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(B) p(B) log(sum_Sum p(Sum) factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gamma, Gamma, Gamma)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. Because the factor is deterministic, <c>Sum</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(A) p(A) log(sum_Sum p(Sum) factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(GammaPower, GammaPower, GammaPower, GammaPower, GammaPower)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_a">Previous outgoing message to <c>a</c>.</param>
      <param name="to_b">Previous outgoing message to <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>B</c>. Because the factor is deterministic, <c>Sum</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(A) p(A) log(sum_Sum p(Sum) factor(Sum,A,B)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="DoublePlusOp_NoSkip">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="NoSkip.Plus(double, double)" /></description></item><item><description><see cref="NoSkip.Difference(double, double)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SumAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(A,B) p(A,B) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(Sum,B) p(Sum,B) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="Sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <returns>The outgoing EP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(Sum,A) p(Sum,A) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sum" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="DiodeCopyOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Diode.Copy{T}(T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="CopyAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>copy</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>copy</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>copy</c> as the random arguments are varied. The formula is <c>proj[p(copy) sum_(value) p(value) factor(copy,value)]/p(copy)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="copy">Incoming message from <c>copy</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(copy) p(copy) factor(copy,value)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="IntegerPlusOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Plus(int, int)" /></description></item><item><description><see cref="Factor.Difference(int, int)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Discrete, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum) p(Sum) factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Discrete, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum,A) p(Sum,A) factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Discrete, int, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum,B) p(Sum,B) factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum) p(Sum) factor(Sum,A,B) / sum_Sum p(Sum) messageTo(Sum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(B) p(B) factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Discrete, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A) p(A) factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Discrete, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A,B) p(A,B) factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, int, Discrete)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(B) p(B) factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Discrete, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(A) p(A) factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditional(Discrete, Discrete, Discrete)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(A,B) p(A,B) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditional(int, Discrete, Discrete)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(B) p(B) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditional(Discrete, int, Discrete)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(A) p(A) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditionalInit(Discrete, Discrete)">
      <summary />
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditionalInit(Discrete, int)">
      <summary />
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditionalInit(int, Discrete)">
      <summary />
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Discrete, Discrete, Discrete)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(Sum,B) p(Sum,B) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Discrete, int, Discrete)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(Sum) p(Sum) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(int, Discrete, Discrete)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(B) p(B) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(int, int, Discrete)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Discrete, Discrete, Discrete)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(Sum,A) p(Sum,A) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Discrete, int, Discrete)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(Sum) p(Sum) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(int, Discrete, Discrete)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(A) p(A) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(int, int, Discrete)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditional(Poisson, Poisson)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>Sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(A,B) p(A,B) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(int, Poisson, Poisson)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(B) p(B) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(int, Poisson, Poisson)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(A) p(A) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Poisson, Poisson, Poisson)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>A</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(Sum,B) p(Sum,B) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Poisson, Poisson, Poisson)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>The outgoing EP message to the <c>B</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(Sum,A) p(Sum,A) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="PlusVectorOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Plus(Vector, Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SumVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>SumVariance</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <returns>Initial value of buffer <c>SumVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SumVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>SumVariance</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>SumMean</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <returns>Initial value of buffer <c>SumMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SumMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>SumMean</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="sumVariance">Buffer <c>sumVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>aVariance</c>.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <returns>Initial value of buffer <c>aVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>aVariance</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>aMean</c>.</summary>
      <param name="a">Incoming message from <c>A</c>.</param>
      <returns>Initial value of buffer <c>aMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>aMean</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="aVariance">Buffer <c>aVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>bVariance</c>.</summary>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Initial value of buffer <c>bVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>bVariance</c>.</summary>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>bMean</c>.</summary>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Initial value of buffer <c>bMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>bMean</c>.</summary>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="bVariance">Buffer <c>bVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumConditional(Vector, Vector, VectorGaussian)">
      <summary>Gibbs message to <c>Sum</c>.</summary>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Sum</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AConditional(Vector, Vector, VectorGaussian)">
      <summary>Gibbs message to <c>A</c>.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditional(VectorGaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(A) p(A) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(Vector, VectorGaussian, VectorGaussian)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[p(Sum) sum_(B) p(B) factor(Sum,A,B)]/p(Sum)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageConditional(Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>Sum</c>.</summary>
      <param name="aMean">Buffer <c>aMean</c>.</param>
      <param name="aVariance">Buffer <c>aVariance</c>.</param>
      <param name="bMean">Buffer <c>bMean</c>.</param>
      <param name="bVariance">Buffer <c>bVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Sum</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sumMean">Buffer <c>sumMean</c>.</param>
      <param name="sumVariance">Buffer <c>sumVariance</c>.</param>
      <param name="bMean">Buffer <c>bMean</c>.</param>
      <param name="bVariance">Buffer <c>bVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sumMean">Buffer <c>sumMean</c>.</param>
      <param name="sumVariance">Buffer <c>sumVariance</c>.</param>
      <param name="aMean">Buffer <c>aMean</c>.</param>
      <param name="aVariance">Buffer <c>aVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(VectorGaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>A</c> as the random arguments are varied. The formula is <c>proj[p(A) sum_(Sum) p(Sum) factor(Sum,A,B)]/p(A)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussian, Vector, VectorGaussian)">
      <summary>EP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>B</c> as the random arguments are varied. The formula is <c>proj[p(B) sum_(Sum) p(Sum) factor(Sum,A,B)]/p(B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Sum) p(Sum) factor(Sum,A,B) / sum_Sum p(Sum) messageTo(Sum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="aMean">Buffer <c>aMean</c>.</param>
      <param name="aVariance">Buffer <c>aVariance</c>.</param>
      <param name="bMean">Buffer <c>bMean</c>.</param>
      <param name="bVariance">Buffer <c>bVariance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="aMean">Buffer <c>aMean</c>.</param>
      <param name="aVariance">Buffer <c>aVariance</c>.</param>
      <param name="bMean">Buffer <c>bMean</c>.</param>
      <param name="bVariance">Buffer <c>bVariance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageLogarithm(VectorGaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Incoming message from <c>A</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[sum_(A) p(A) factor(Sum,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(Vector, VectorGaussian, VectorGaussian)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Sum</c> as the random arguments are varied. The formula is <c>proj[sum_(B) p(B) factor(Sum,A,B)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>Sum</c>.</summary>
      <param name="aMean">Buffer <c>aMean</c>.</param>
      <param name="aVariance">Buffer <c>aVariance</c>.</param>
      <param name="bMean">Buffer <c>bMean</c>.</param>
      <param name="bVariance">Buffer <c>bVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Sum</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(VectorGaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>A</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="bMean">Buffer <c>bMean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>A</c> with <c>Sum</c> integrated out. The formula is <c>sum_Sum p(Sum) factor(Sum,A,B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(VectorGaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>B</c>.</summary>
      <param name="sum">Incoming message from <c>Sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="aMean">Buffer <c>aMean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>B</c> with <c>Sum</c> integrated out. The formula is <c>sum_Sum p(Sum) factor(Sum,A,B)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Constant value for <c>B</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Sum,A,B))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Incoming message from <c>Sum</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Incoming message from <c>A</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector, VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>Sum</c>.</param>
      <param name="a">Constant value for <c>A</c>.</param>
      <param name="b">Incoming message from <c>B</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="PoissonOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Poisson(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(int, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(int, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Poisson, double, Poisson)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Poisson, double)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(int, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_mean">Outgoing message to <c>mean</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(int, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="to_mean">Outgoing message to <c>mean</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Poisson, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Poisson, Gamma, Poisson)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="to_sample">Previous outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(int)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(Poisson, Gamma)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample) p(sample) factor(sample,mean)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Poisson, Gamma)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean) p(mean) factor(sample,mean)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(int, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean) p(mean) log(factor(sample,mean))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Poisson, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,mean) p(sample,mean) log(factor(sample,mean))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Poisson, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,mean))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(int)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Poisson)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,mean)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Gamma)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(sample,mean)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="PowerOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="System.Math.Pow(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="GammaFromMeanAndMeanInverse(double, double)">
      <summary />
      <param name="mean" />
      <param name="meanInverse" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GammaFromGammaPower(GammaPower)">
      <summary />
      <param name="message" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="FromMeanPowerAndMeanLog(double, double, double)">
      <summary />
      <param name="meanPower" />
      <param name="meanLog" />
      <param name="power" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="PowAverageConditional(TruncatedGamma, double)">
      <summary>EP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing EP message to the <c>pow</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[p(pow) sum_(x) p(x) factor(pow,x,y)]/p(pow)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(Gamma, TruncatedGamma, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(pow) p(pow) factor(pow,x,y)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="pow" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PowAverageConditional(TruncatedGamma, double, GammaPower)">
      <summary>EP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[p(pow) sum_(x) p(x) factor(pow,x,y)]/p(pow)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(GammaPower, TruncatedGamma, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(pow) p(pow) factor(pow,x,y)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="pow" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PowAverageConditional(Gamma, double, Gamma)">
      <summary>EP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[p(pow) sum_(x) p(x) factor(pow,x,y)]/p(pow)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(Gamma, Gamma, double, Gamma)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(pow) p(pow) factor(pow,x,y)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="pow" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(GammaPower, GammaPower, double)">
      <summary>Evidence message for EP.</summary>
      <param name="pow">Incoming message from <c>pow</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(pow,x) p(pow,x) factor(pow,x,y))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="PowAverageConditional(GammaPower, double, GammaPower)">
      <summary>EP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[p(pow) sum_(x) p(x) factor(pow,x,y)]/p(pow)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(GammaPower, GammaPower, double, GammaPower)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(pow) p(pow) factor(pow,x,y)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="pow" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="GammaPowerFromDifferentPower(GammaPower, double)">
      <summary />
      <param name="message" />
      <param name="newPower" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="PowAverageLogarithm(GammaPower, double, GammaPower)">
      <summary>VMP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(pow,x,y)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(GammaPower, GammaPower, double, GammaPower)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>pow</c> integrated out. The formula is <c>sum_pow p(pow) factor(pow,x,y)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="pow" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PowAverageConditional(Gamma, double)">
      <summary>EP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing EP message to the <c>pow</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[p(pow) sum_(x) p(x) factor(pow,x,y)]/p(pow)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageConditional(GammaPower, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(pow) p(pow) factor(pow,x,y)]/p(x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="pow" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PowAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing VMP message to the <c>pow</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(pow,x,y)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(GammaPower, double)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>pow</c> integrated out. The formula is <c>sum_pow p(pow) factor(pow,x,y)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="pow" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PowAverageConditional(Pareto, double)">
      <summary>EP message to <c>pow</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing EP message to the <c>pow</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>pow</c> as the random arguments are varied. The formula is <c>proj[p(pow) sum_(x) p(x) factor(pow,x,y)]/p(pow)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageConditional(Pareto, Gamma, double)">
      <summary>EP message to <c>x</c>.</summary>
      <param name="pow">Incoming message from <c>pow</c>.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing EP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>x</c> as the random arguments are varied. The formula is <c>proj[p(x) sum_(pow) p(pow) factor(pow,x,y)]/p(x)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="PowerPlateOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="PowerPlate.Enter{T}(T, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ValueAverageConditional{T}(T, double, T)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="enter">Incoming message from <c>enter</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="exponent">Constant value for <c>exponent</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(enter) p(enter) factor(enter,value,exponent)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enter" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="EnterAverageConditional{T}(T, T, double, T)">
      <summary>EP message to <c>enter</c>.</summary>
      <param name="enter">Incoming message from <c>enter</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="exponent">Constant value for <c>exponent</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enter</c> as the random arguments are varied. The formula is <c>proj[p(enter) sum_(value) p(value) factor(enter,value,exponent)]/p(enter)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="EnterAverageConditionalInit{T}(T)">
      <summary />
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{T}(T, T, double, T)">
      <summary>Evidence message for EP.</summary>
      <param name="enter">Incoming message from <c>enter</c>.</param>
      <param name="value">Incoming message from <c>value</c>.</param>
      <param name="exponent">Constant value for <c>exponent</c>.</param>
      <param name="to_enter">Outgoing message to <c>enter</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(enter,value) p(enter,value) factor(enter,value,exponent) / sum_enter p(enter) messageTo(enter))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(enter,value,exponent))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{T}(T, double, T)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="enter">Incoming message from <c>enter</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="exponent">Constant value for <c>exponent</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>enter</c> integrated out. The formula is <c>sum_enter p(enter) factor(enter,value,exponent)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="enter" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="EnterAverageLogarithm{T}(T)">
      <summary>VMP message to <c>enter</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>enter</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>enter</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(enter,value,exponent)]</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DampBackwardOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Damp.Backward{T}(T, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(backward,value,stepsize))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(backward,value,stepsize))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageConditional{Distribution}(Distribution, double, Distribution)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="backward">Incoming message from <c>backward</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="stepsize">Constant value for <c>stepsize</c>.</param>
      <param name="to_value">Previous outgoing message to <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(backward) p(backward) factor(backward,value,stepsize)]/p(value)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="backward" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{Distribution}(Distribution, double, Distribution)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="backward">Incoming message from <c>backward</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="stepsize">Constant value for <c>stepsize</c>.</param>
      <param name="to_value">Previous outgoing message to <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>backward</c> integrated out. The formula is <c>sum_backward p(backward) factor(backward,value,stepsize)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="backward" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BackwardAverageConditional{Distribution}(Distribution)">
      <summary>EP message to <c>backward</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing EP message to the <c>backward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>backward</c> as the random arguments are varied. The formula is <c>proj[p(backward) sum_(value) p(value) factor(backward,value,stepsize)]/p(backward)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BackwardAverageLogarithm{Distribution}(Distribution)">
      <summary>VMP message to <c>backward</c>.</summary>
      <param name="value">Incoming message from <c>value</c>.</param>
      <returns>The outgoing VMP message to the <c>backward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>backward</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(backward,value,stepsize)]</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DampForwardOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Damp.Forward{T}(T, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(forward,value,stepsize))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(forward,value,stepsize))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ForwardAverageConditional{Distribution}(Distribution, double, Distribution)">
      <summary>EP message to <c>forward</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="stepsize">Constant value for <c>stepsize</c>.</param>
      <param name="to_forward">Previous outgoing message to <c>forward</c>.</param>
      <returns>The outgoing EP message to the <c>forward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>forward</c> as the random arguments are varied. The formula is <c>proj[p(forward) sum_(value) p(value) factor(forward,value,stepsize)]/p(forward)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ForwardAverageLogarithm{Distribution}(Distribution, double, Distribution)">
      <summary>VMP message to <c>forward</c>.</summary>
      <param name="value">Incoming message from <c>value</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="stepsize">Constant value for <c>stepsize</c>.</param>
      <param name="to_forward">Previous outgoing message to <c>forward</c>.</param>
      <returns>The outgoing VMP message to the <c>forward</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>forward</c> as the random arguments are varied. The formula is <c>proj[sum_(value) p(value) factor(forward,value,stepsize)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="value" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ValueAverageConditional{Distribution}(Distribution)">
      <summary>EP message to <c>value</c>.</summary>
      <param name="forward">Incoming message from <c>forward</c>.</param>
      <returns>The outgoing EP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>value</c> as the random arguments are varied. The formula is <c>proj[p(value) sum_(forward) p(forward) factor(forward,value,stepsize)]/p(value)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ValueAverageLogarithm{Distribution}(Distribution)">
      <summary>VMP message to <c>value</c>.</summary>
      <param name="forward">Incoming message from <c>forward</c>.</param>
      <returns>The outgoing VMP message to the <c>value</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>value</c> with <c>forward</c> integrated out. The formula is <c>sum_forward p(forward) factor(forward,value,stepsize)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ProbBetweenOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.ProbBetween{T}(CanGetProbLessThan{T}, T, T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProbBetweenAverageConditional(CanGetProbLessThan{double}, Gaussian, Gaussian)">
      <summary>EP message to <c>probBetween</c>.</summary>
      <param name="canGetProbLessThan">Incoming message from <c>canGetProbLessThan</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>probBetween</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probBetween</c> as the random arguments are varied. The formula is <c>proj[p(probBetween) sum_(canGetProbLessThan,lowerBound,upperBound) p(canGetProbLessThan,lowerBound,upperBound) factor(probBetween,canGetProbLessThan,lowerBound,upperBound)]/p(probBetween)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LowerBoundAverageConditional(Gaussian, CanGetProbLessThan{double}, double)">
      <summary>EP message to <c>lowerBound</c>.</summary>
      <param name="probBetween">Incoming message from <c>probBetween</c>.</param>
      <param name="canGetProbLessThan">Incoming message from <c>canGetProbLessThan</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <returns>The outgoing EP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>lowerBound</c> as the random arguments are varied. The formula is <c>proj[p(lowerBound) sum_(probBetween,canGetProbLessThan) p(probBetween,canGetProbLessThan) factor(probBetween,canGetProbLessThan,lowerBound,upperBound)]/p(lowerBound)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LowerBoundAverageConditional(Gaussian, CanGetProbLessThan{double}, Gaussian)">
      <summary>EP message to <c>lowerBound</c>.</summary>
      <param name="probBetween">Incoming message from <c>probBetween</c>.</param>
      <param name="canGetProbLessThan">Incoming message from <c>canGetProbLessThan</c>.</param>
      <param name="lowerBound">Incoming message from <c>lowerBound</c>.</param>
      <returns>The outgoing EP message to the <c>lowerBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>lowerBound</c> as the random arguments are varied. The formula is <c>proj[p(lowerBound) sum_(probBetween,canGetProbLessThan) p(probBetween,canGetProbLessThan) factor(probBetween,canGetProbLessThan,lowerBound,upperBound)]/p(lowerBound)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional(Gaussian, CanGetProbLessThan{double}, Gaussian)">
      <summary>EP message to <c>upperBound</c>.</summary>
      <param name="probBetween">Incoming message from <c>probBetween</c>.</param>
      <param name="canGetProbLessThan">Incoming message from <c>canGetProbLessThan</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>upperBound</c> as the random arguments are varied. The formula is <c>proj[p(upperBound) sum_(probBetween,canGetProbLessThan) p(probBetween,canGetProbLessThan) factor(probBetween,canGetProbLessThan,lowerBound,upperBound)]/p(upperBound)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ProductExpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.ProductExp(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ProductExpAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>productExp</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>productExp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>productExp</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(productExp,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductExpAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>productExp</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>productExp</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>productExp</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(productExp,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, Gaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ProductExp">Incoming message from <c>productExp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>productExp</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_productExp p(productExp) factor(productExp,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ProductExp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ProductExp">Constant value for <c>productExp</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(productExp,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Gaussian, Gaussian, NonconjugateGaussian, NonconjugateGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="ProductExp">Incoming message from <c>productExp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>productExp</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_productExp p(productExp) factor(productExp,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ProductExp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, Gaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="ProductExp">Incoming message from <c>productExp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>productExp</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_productExp p(productExp) factor(productExp,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ProductExp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="ProductExp">Constant value for <c>productExp</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(productExp,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gaussian, double, Gaussian, NonconjugateGaussian, NonconjugateGaussian)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="ProductExp">Incoming message from <c>productExp</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>productExp</c> integrated out. The formula is <c>sum_productExp p(productExp) factor(productExp,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ProductExp" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, double)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="ProductExp">Constant value for <c>productExp</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaRatioOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Ratio(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="RatioAverageConditional(Gamma, double)">
      <summary>EP message to <c>ratio</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[p(ratio) sum_(a) p(a) factor(ratio,a,b)]/p(ratio)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Gamma, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(ratio) p(ratio) factor(ratio,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(double, Gamma)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(b) p(b) factor(ratio,a,b)]/p(a)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="RatioAverageConditional(double, Gamma)">
      <summary>EP message to <c>ratio</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[p(ratio) sum_(b) p(b) factor(ratio,a,b)]/p(ratio)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gamma, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(ratio) p(ratio) factor(ratio,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(double, double)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(double, Gamma)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(a) p(a) factor(ratio,a,b)]/p(b)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,a) p(ratio,a) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,a) p(ratio,a) factor(ratio,a,b) / sum_ratio p(ratio) messageTo(ratio))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gamma, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(ratio,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(ratio,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaRatioOp_Laplace">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Ratio(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="QInit()">
      <summary>Initialize the buffer <c>Q</c>.</summary>
      <returns>Initial value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Q(Gamma, Gamma, Gamma)">
      <summary>Update the buffer <c>Q</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>New value of buffer <c>Q</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gamma, Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,a,b) p(ratio,a,b) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gamma, Gamma, Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="to_ratio">Previous outgoing message to <c>ratio</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,a,b) p(ratio,a,b) factor(ratio,a,b) / sum_ratio p(ratio) messageTo(ratio))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gamma, Gamma, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a,b) p(a,b) factor(ratio,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageConditional(Gamma, Gamma, Gamma, Gamma)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(ratio,a) p(ratio,a) factor(ratio,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RatioAverageConditional(Gamma, Gamma, Gamma)">
      <summary>EP message to <c>ratio</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[p(ratio) sum_(a,b) p(a,b) factor(ratio,a,b)]/p(ratio)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gamma, Gamma, Gamma, Gamma)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="q">Buffer <c>q</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(ratio,b) p(ratio,b) factor(ratio,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaRatioVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Ratio(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(double, Gamma, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, double, Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Gamma)">
      <summary>Evidence message for VMP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="RatioAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>ratio</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(ratio,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RatioAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>ratio</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(ratio,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gamma, Gamma)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>ratio</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_ratio p(ratio) factor(ratio,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gamma, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>ratio</c> integrated out. The formula is <c>sum_ratio p(ratio) factor(ratio,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(Gamma, Gamma, Gamma)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>ratio</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_ratio p(ratio) factor(ratio,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(ratio,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm(double, Gamma)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="A">Incoming message from <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(ratio,a,b)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="RatioGaussianOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Ratio(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="RatioAverageConditional(Gaussian, double)">
      <summary>EP message to <c>ratio</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[p(ratio) sum_(a) p(a) factor(ratio,a,b)]/p(ratio)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RatioAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>ratio</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[p(ratio) sum_(a,b) p(a,b) factor(ratio,a,b)]/p(ratio)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, double)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(ratio) p(ratio) factor(ratio,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing EP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(ratio,b) p(ratio,b) factor(ratio,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="b" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Gaussian, Gaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(ratio,a) p(ratio,a) factor(ratio,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <param name="to_ratio">Outgoing message to <c>ratio</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,a) p(ratio,a) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="to_ratio">Outgoing message to <c>ratio</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,b) p(ratio,b) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(ratio,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, double, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio) p(ratio) factor(ratio,a,b))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,a) p(ratio,a) factor(ratio,a,b) / sum_ratio p(ratio) messageTo(ratio))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(ratio,b) p(ratio,b) factor(ratio,a,b) / sum_ratio p(ratio) messageTo(ratio))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, Gaussian, double)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(ratio,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, double, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(b) p(b) factor(ratio,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="RatioGaussianVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Ratio(double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(Gaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="RatioAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>ratio</c>.</summary>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[sum_(b) p(b) factor(ratio,a,b)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="RatioAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>ratio</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>ratio</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ratio</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(ratio,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="B">Incoming message from <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(ratio,a,b)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Gaussian, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ratio">Incoming message from <c>ratio</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>ratio</c> integrated out. The formula is <c>sum_ratio p(ratio) factor(ratio,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="ratio" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(double, double)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="ratio">Constant value for <c>ratio</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <returns>The outgoing VMP message to the <c>a</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="BAverageLogarithm()">
      <summary>VMP message to <c>b</c>.</summary>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ProductVectorGaussianOp_PointB">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Product(Vector, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a,b) p(product,a,b) factor(product,a,b))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(VectorGaussian, Gaussian, VectorGaussian)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a,b) p(a,b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageConditional(VectorGaussian, Gaussian, VectorGaussian)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product,b) p(product,b) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(VectorGaussian, VectorGaussian, Gaussian)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product,a) p(product,a) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="a" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ProductWishartOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Factor.Product(PositiveDefiniteMatrix, double)" /></description></item><item><description><see cref="Factor.Product(double, PositiveDefiniteMatrix)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(Wishart, Wishart, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,a) p(product,a) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Wishart, PositiveDefiniteMatrix, Gamma)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <param name="a">Constant value for <c>a</c>.</param>
      <param name="b">Incoming message from <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(product,b) p(product,b) factor(product,a,b) / sum_product p(product) messageTo(product))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(PositiveDefiniteMatrix, Wishart, double)">
      <summary>Evidence message for EP.</summary>
      <param name="product">Constant value for <c>product</c>.</param>
      <param name="a">Incoming message from <c>a</c>.</param>
      <param name="b">Constant value for <c>b</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(a) p(a) factor(product,a,b))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(PositiveDefiniteMatrix, double, Wishart)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>product</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageConditional(Wishart, double, Wishart)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(a) p(a) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageConditional(Wishart, PositiveDefiniteMatrix, Gamma, Gamma, Wishart)">
      <summary>EP message to <c>product</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_B">Previous outgoing message to <c>B</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[p(product) sum_(b) p(b) factor(product,a,b)]/p(product)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(Wishart, PositiveDefiniteMatrix)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>b</c> as the random arguments are varied. The formula is <c>proj[p(b) sum_(product) p(product) factor(product,a,b)]/p(b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageConditional(PositiveDefiniteMatrix, PositiveDefiniteMatrix)">
      <summary>EP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing EP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageConditional(Wishart, double, Wishart)">
      <summary>EP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>a</c> as the random arguments are varied. The formula is <c>proj[p(a) sum_(product) p(product) factor(product,a,b)]/p(a)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Wishart)">
      <summary>Evidence message for VMP.</summary>
      <param name="product">Incoming message from <c>product</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Wishart, Gamma, Wishart)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a,b) p(a,b) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProductAverageLogarithm(Wishart, double, Wishart)">
      <summary>VMP message to <c>product</c>.</summary>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>product</c> as the random arguments are varied. The formula is <c>proj[sum_(a) p(a) factor(product,a,b)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Wishart, Wishart)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(a) p(a) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(Wishart, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(PositiveDefiniteMatrix, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Constant value for <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>b</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AAverageLogarithm(Wishart, Gamma, Wishart)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. Because the factor is deterministic, <c>product</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(b) p(b) log(sum_product p(product) factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="BAverageLogarithm(PositiveDefiniteMatrix, Wishart)">
      <summary>VMP message to <c>b</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="A">Incoming message from <c>a</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>b</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>b</c>. The formula is <c>exp(sum_(a) p(a) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="A" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(PositiveDefiniteMatrix, Gamma, Wishart)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Incoming message from <c>b</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>a</c>. The formula is <c>exp(sum_(b) p(b) log(factor(product,a,b)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="B" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(Wishart, double, Wishart)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Incoming message from <c>product</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> with <c>product</c> integrated out. The formula is <c>sum_product p(product) factor(product,a,b)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Product" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AAverageLogarithm(PositiveDefiniteMatrix, double, Wishart)">
      <summary>VMP message to <c>a</c>.</summary>
      <param name="Product">Constant value for <c>product</c>.</param>
      <param name="B">Constant value for <c>b</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>a</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="QuantileOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Quantile(CanGetQuantile{double}, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="QuantileAverageConditional(CanGetQuantile{double}, Gaussian)">
      <summary>EP message to <c>quantile</c>.</summary>
      <param name="canGetQuantile">Constant value for <c>canGetQuantile</c>.</param>
      <param name="probability">Incoming message from <c>probability</c>.</param>
      <returns>The outgoing EP message to the <c>quantile</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>quantile</c> as the random arguments are varied. The formula is <c>proj[p(quantile) sum_(probability) p(probability) factor(quantile,canGetQuantile,probability)]/p(quantile)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbabilityAverageConditional(double, CanGetQuantile{double})">
      <summary>EP message to <c>probability</c>.</summary>
      <param name="quantile">Constant value for <c>quantile</c>.</param>
      <param name="canGetQuantile">Constant value for <c>canGetQuantile</c>.</param>
      <returns>The outgoing EP message to the <c>probability</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probability</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbabilityAverageConditional(Gaussian, CanGetQuantile{double}, double)">
      <summary>EP message to <c>probability</c>.</summary>
      <param name="quantile">Incoming message from <c>quantile</c>.</param>
      <param name="canGetQuantile">Constant value for <c>canGetQuantile</c>.</param>
      <param name="probability">Constant value for <c>probability</c>.</param>
      <returns>The outgoing EP message to the <c>probability</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probability</c> as the random arguments are varied. The formula is <c>proj[p(probability) sum_(quantile) p(quantile) factor(quantile,canGetQuantile,probability)]/p(probability)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbabilityAverageConditional(Gaussian, CanGetQuantile{double}, Gaussian)">
      <summary>EP message to <c>probability</c>.</summary>
      <param name="quantile">Incoming message from <c>quantile</c>.</param>
      <param name="canGetQuantile">Constant value for <c>canGetQuantile</c>.</param>
      <param name="probability">Incoming message from <c>probability</c>.</param>
      <returns>The outgoing EP message to the <c>probability</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probability</c> as the random arguments are varied. The formula is <c>proj[p(probability) sum_(quantile) p(quantile) factor(quantile,canGetQuantile,probability)]/p(probability)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateOp_Divide">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.Replicate{T}(T, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="DefAverageConditional{T}(T, T)">
      <summary>EP message to <c>Def</c>.</summary>
      <param name="toDef">Buffer <c>toDef</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Def</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageConditional{T}(T, T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Uses</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{T}(T)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{T}(T, T, T)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="toDef">Buffer <c>toDef</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{T}(T, T, T)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="use" />
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ToDefInit{T}(T)">
      <summary>Initialize the buffer <c>toDef</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns>Initial value of buffer <c>toDef</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ToDef{T}(IReadOnlyList{T}, T)">
      <summary>Update the buffer <c>toDef</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="Replicate2BufferOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.Replicate{T}(T, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="UsesAverageConditional{T}(IReadOnlyList{T}, T, T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,Count)]/p(Uses)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UsesAverageConditional{T}(T[], T, T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="marginal">Buffer <c>marginal</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,Count)]/p(Uses)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UsesAverageConditionalInit{T, ArrayType}(T, int, IArrayFactory{T, ArrayType})">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="count">Constant value for <c>Count</c>.</param>
      <param name="factory" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalInit{T}(T)">
      <summary>Initialize the buffer <c>marginal</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>Initial value of buffer <c>marginal</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Marginal{T}(IReadOnlyList{T}, T, T)">
      <summary>Update the buffer <c>marginal</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalIncrement{T}(T, T, T)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="use" />
      <param name="def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(IReadOnlyList{T}, T)">
      <summary>EP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Def</c> as the random arguments are varied. The formula is <c>proj[p(Def) sum_(Uses) p(Uses) factor(Uses,Def,Count)]/p(Def)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(T[], T)">
      <summary>EP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Def</c> as the random arguments are varied. The formula is <c>proj[p(Def) sum_(Uses) p(Uses) factor(Uses,Def,Count)]/p(Def)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateOp_NoDivide">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.Replicate{T}(T, int)" /></description></item><item><description><see cref="Clone.ReplicateWithMarginal{T}(T, int, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MarginalAverageConditional{T}(IReadOnlyList{T}, T, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{T}(T[], T, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageConditional{T}(IReadOnlyList{T}, T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,Count)]/p(Uses)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageConditional{T}(T[], T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,Count)]/p(Uses)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(IReadOnlyList{T}, T)">
      <summary>EP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Def</c> as the random arguments are varied. The formula is <c>proj[p(Def) sum_(Uses) p(Uses) factor(Uses,Def,Count)]/p(Def)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(T[], T)">
      <summary>EP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Def</c> as the random arguments are varied. The formula is <c>proj[p(Def) sum_(Uses) p(Uses) factor(Uses,Def,Count)]/p(Def)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.Replicate{T}(T, int)" /></description></item><item><description><see cref="Clone.ReplicateWithMarginal{T}(T, int, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Uses,Def,Count))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{T}(IList{T}, T, IList{T})">
      <summary>Evidence message for EP.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="to_Uses">Outgoing message to <c>Uses</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Uses,Def) p(Uses,Def) factor(Uses,Def,Count) / sum_Uses p(Uses) messageTo(Uses))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Uses,Def,Count))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{T, TDef}(TDef, T)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UsesAverageLogarithm{T, TDef}(TDef, int, T)">
      <summary>VMP message to <c>Uses</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[sum_(Def) p(Def) factor(Uses,Def,Count)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesDeriv{T}(T)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesDeriv{T}(T[])">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageLogarithm2{T, TDef}(TDef, T)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesInit{T, ArrayType}(T, int, IArrayFactory{T, ArrayType})">
      <summary>Initialize the buffer <c>Uses</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="count">Constant value for <c>Count</c>.</param>
      <param name="factory" />
      <returns>Initial value of buffer <c>Uses</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{T}(IReadOnlyList{T}, T)">
      <summary>VMP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Def</c> with <c>Uses</c> integrated out. The formula is <c>sum_Uses p(Uses) factor(Uses,Def,Count)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefAverageLogarithm{T}(T[], T)">
      <summary>VMP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Def</c> with <c>Uses</c> integrated out. The formula is <c>sum_Uses p(Uses) factor(Uses,Def,Count)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateMaxOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.Replicate{T}(T, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="UsesMaxConditional{T}(IReadOnlyList{T}, T, int, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UsesMaxConditionalInit{T}(T, int)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefMaxConditional{T}(IReadOnlyList{T}, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalMaxConditional{T}(IReadOnlyList{T}, T, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateGibbsOp{T}">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.Replicate{T}(T, int)" /></description></item><item><description><see cref="Clone.ReplicateWithMarginal{T}(T, int, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{TDist}(IList{TDist}, T)">
      <summary>Evidence message for EP.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Uses,Def) p(Uses,Def) factor(Uses,Def,Count) / sum_Uses p(Uses) messageTo(Uses))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="GibbsEvidence{TDist}(IList{TDist}, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(GibbsMarginal{TDist, T}, TDist, int, T)">
      <summary />
      <param name="to_marginal" />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs(T, int, T)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(TDist, int, TDist)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(IReadOnlyList{TDist}, TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(TDist[], TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(GibbsMarginal{TDist, T}, T)">
      <summary />
      <param name="to_marginal" />
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist}(IReadOnlyList{TDist}, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_marginal" />
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist, TDomain}(TDomain, GibbsMarginal{TDist, TDomain})">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="to_marginal" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs2{TDist}(T[], GibbsMarginal{TDist, T})">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="to_marginal" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbsInit{TDist}(TDist)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicatePointOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.Replicate{T}(T, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{T}(IList{T})">
      <summary>Evidence message for EP.</summary>
      <param name="uses">Incoming message from <c>Uses</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Uses) p(Uses) factor(Uses,Def,Count) / sum_Uses p(Uses) messageTo(Uses))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageConditional{T, TDef}(TDef, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,Count)]/p(Uses)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(T, T)">
      <summary>EP message to <c>Def</c>.</summary>
      <param name="toDef">Buffer <c>toDef</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Def</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ToDefIncrement{T}(T, T)">
      <summary />
      <param name="toDef">Buffer <c>toDef</c>.</param>
      <param name="use" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ToDefInit{T}(T)">
      <summary>Initialize the buffer <c>toDef</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns>Initial value of buffer <c>toDef</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ToDef{T}(IReadOnlyList{T}, T)">
      <summary>Update the buffer <c>toDef</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ToDef{T}(T[], T)">
      <summary>Update the buffer <c>toDef</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateBufferOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.ReplicateWithMarginal{T}(T, int, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="UsesAverageConditional{T}(IReadOnlyList{T}, T, T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_marginal">Outgoing message to <c>marginal</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,count,Marginal)]/p(Uses)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UsesAverageConditional{T}(T[], T, T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_marginal">Outgoing message to <c>marginal</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,count,Marginal)]/p(Uses)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ReplicateGibbsOp2{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.ReplicateWithMarginalGibbs{T}(T, int, int, int, out T, out T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ConditionalInit{TDist}(TDist)">
      <summary>Initialize the buffer <c>conditional</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns>Initial value of buffer <c>conditional</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Conditional{TDist}(T, TDist)">
      <summary>Update the buffer <c>conditional</c>.</summary>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Conditional{TDist}(IReadOnlyList{TDist}, TDist, TDist)">
      <summary>Update the buffer <c>conditional</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Sample{TDist}(TDist, TDist)">
      <summary>Update the buffer <c>sample</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="conditional">Buffer <c>conditional</c>.</param>
      <returns>New value of buffer <c>sample</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalEstimatorInit{TDist}(TDist, int)">
      <summary>Initialize the buffer <c>marginalEstimator</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="burnIn">Constant value for <c>burnIn</c>.</param>
      <returns>Initial value of buffer <c>marginalEstimator</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalEstimator{TDist, TAcc}(TDist, TAcc)">
      <summary>Update the buffer <c>marginalEstimator</c>.</summary>
      <param name="conditional">Buffer <c>conditional</c>.</param>
      <param name="marginalEstimator">Buffer <c>marginalEstimator</c>.</param>
      <returns>New value of buffer <c>marginalEstimator</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist}(BurnInAccumulator{TDist}, TDist)">
      <summary />
      <param name="marginalEstimator">Buffer <c>marginalEstimator</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAccInit(ICollection{T}, int, int)">
      <summary>Initialize the buffer <c>sampleAcc</c>.</summary>
      <param name="to_samples">Previous outgoing message to <c>samples</c>.</param>
      <param name="burnIn">Constant value for <c>burnIn</c>.</param>
      <param name="thin">Constant value for <c>thin</c>.</param>
      <returns>Initial value of buffer <c>sampleAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAcc(T, Accumulator{T})">
      <summary>Update the buffer <c>sampleAcc</c>.</summary>
      <param name="sample">Buffer <c>sample</c>.</param>
      <param name="sampleAcc">Buffer <c>sampleAcc</c>.</param>
      <returns>New value of buffer <c>sampleAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SamplesGibbs{TList}(Accumulator{T}, TList)">
      <summary />
      <param name="sampleAcc">Buffer <c>sampleAcc</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConditionalAccInit{TDist}(ICollection{TDist}, int, int)">
      <summary>Initialize the buffer <c>conditionalAcc</c>.</summary>
      <param name="to_conditionals">Previous outgoing message to <c>conditionals</c>.</param>
      <param name="burnIn">Constant value for <c>burnIn</c>.</param>
      <param name="thin">Constant value for <c>thin</c>.</param>
      <returns>Initial value of buffer <c>conditionalAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConditionalAcc{TDist}(TDist, Accumulator{TDist})">
      <summary>Update the buffer <c>conditionalAcc</c>.</summary>
      <param name="conditional">Buffer <c>conditional</c>.</param>
      <param name="conditionalAcc">Buffer <c>conditionalAcc</c>.</param>
      <returns>New value of buffer <c>conditionalAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConditionalsGibbs{TDist, TDistList}(Accumulator{TDist}, TDistList)">
      <summary />
      <param name="conditionalAcc">Buffer <c>conditionalAcc</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GibbsEvidence{TDist}(IList{TDist}, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs(T, int, T)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(TDist, T, int, T)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="sample">Buffer <c>sample</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(ICollection{TDist}, TDist, int, TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbsInit{TDist}(TDist, int)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(TDist, T)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="sample">Buffer <c>sample</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(IReadOnlyList{TDist}, TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="RotateOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Rotate(double, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor(VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="rotate">Incoming message from <c>rotate</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm(VectorGaussian, WrappedGaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="rotate">Incoming message from <c>rotate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="angle">Incoming message from <c>angle</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>x</c>. Because the factor is deterministic, <c>rotate</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(angle) p(angle) log(sum_rotate p(rotate) factor(rotate,x,y,angle)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rotate" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="angle" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="YAverageLogarithm(VectorGaussian, WrappedGaussian)">
      <summary>VMP message to <c>y</c>.</summary>
      <param name="rotate">Incoming message from <c>rotate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="angle">Incoming message from <c>angle</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>y</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>y</c>. Because the factor is deterministic, <c>rotate</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(angle) p(angle) log(sum_rotate p(rotate) factor(rotate,x,y,angle)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rotate" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="angle" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm(VectorGaussian, double)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="rotate">Incoming message from <c>rotate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="angle">Constant value for <c>angle</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>rotate</c> integrated out. The formula is <c>sum_rotate p(rotate) factor(rotate,x,y,angle)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rotate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="YAverageLogarithm(VectorGaussian, double)">
      <summary>VMP message to <c>y</c>.</summary>
      <param name="rotate">Incoming message from <c>rotate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="angle">Constant value for <c>angle</c>.</param>
      <returns>The outgoing VMP message to the <c>y</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>y</c> with <c>rotate</c> integrated out. The formula is <c>sum_rotate p(rotate) factor(rotate,x,y,angle)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rotate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RotateAverageLogarithmInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="RotateAverageLogarithm(Gaussian, Gaussian, WrappedGaussian, VectorGaussian)">
      <summary>VMP message to <c>rotate</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Incoming message from <c>y</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="angle">Incoming message from <c>angle</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rotate</c> as the random arguments are varied. The formula is <c>proj[sum_(x,y,angle) p(x,y,angle) factor(rotate,x,y,angle)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="y" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="angle" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RotateAverageLogarithm(double, double, WrappedGaussian, VectorGaussian)">
      <summary>VMP message to <c>rotate</c>.</summary>
      <param name="x">Constant value for <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="angle">Incoming message from <c>angle</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rotate</c> as the random arguments are varied. The formula is <c>proj[sum_(angle) p(angle) factor(rotate,x,y,angle)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="angle" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RotateAverageLogarithm(Gaussian, Gaussian, double, VectorGaussian)">
      <summary>VMP message to <c>rotate</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Incoming message from <c>y</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="angle">Constant value for <c>angle</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rotate</c> as the random arguments are varied. The formula is <c>proj[sum_(x,y) p(x,y) factor(rotate,x,y,angle)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="y" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AngleAverageLogarithm(VectorGaussian, Gaussian, Gaussian)">
      <summary>VMP message to <c>angle</c>.</summary>
      <param name="rotate">Incoming message from <c>rotate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="y">Incoming message from <c>y</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>angle</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>angle</c>. Because the factor is deterministic, <c>rotate</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(x,y) p(x,y) log(sum_rotate p(rotate) factor(rotate,x,y,angle)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rotate" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="y" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AngleAverageLogarithm(VectorGaussian, double, double)">
      <summary>VMP message to <c>angle</c>.</summary>
      <param name="rotate">Incoming message from <c>rotate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <param name="y">Constant value for <c>y</c>.</param>
      <returns>The outgoing VMP message to the <c>angle</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>angle</c> with <c>rotate</c> integrated out. The formula is <c>sum_rotate p(rotate) factor(rotate,x,y,angle)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rotate" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="ShiftAlphaToFactorOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="ShiftAlpha.ToFactor{T}(T, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="FactorAverageConditional{T}(T, T, double, double, T)">
      <summary>EP message to <c>factor</c>.</summary>
      <param name="factor">Incoming message from <c>factor</c>.</param>
      <param name="variable">Incoming message from <c>variable</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="variableAlpha">Constant value for <c>variableAlpha</c>.</param>
      <param name="factorAlpha">Constant value for <c>factorAlpha</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>factor</c> as the random arguments are varied. The formula is <c>proj[p(factor) sum_(variable) p(variable) factor(factor,variable,variableAlpha,factorAlpha)]/p(factor)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="variable" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VariableAverageConditional{T}(T, T)">
      <summary>EP message to <c>variable</c>.</summary>
      <param name="factor">Incoming message from <c>factor</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>variable</c> as the random arguments are varied. The formula is <c>proj[p(variable) sum_(factor) p(factor) factor(factor,variable,variableAlpha,factorAlpha)]/p(variable)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="factor" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatioOld{T}(T, T, double, double)">
      <summary />
      <param name="factor">Incoming message from <c>factor</c>.</param>
      <param name="variable">Incoming message from <c>variable</c>.</param>
      <param name="variableAlpha">Constant value for <c>variableAlpha</c>.</param>
      <param name="factorAlpha">Constant value for <c>factorAlpha</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="ShiftAlphaFromFactorOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="ShiftAlpha.FromFactor{T}(T, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="FactorAverageConditional{T}(T, T, double, double, T)">
      <summary>EP message to <c>factor</c>.</summary>
      <param name="factor">Incoming message from <c>factor</c>.</param>
      <param name="variable">Incoming message from <c>variable</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="factorAlpha">Constant value for <c>factorAlpha</c>.</param>
      <param name="variableAlpha">Constant value for <c>variableAlpha</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>factor</c> as the random arguments are varied. The formula is <c>proj[p(factor) sum_(variable) p(variable) factor(variable,factor,factorAlpha,variableAlpha)]/p(factor)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="variable" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="VariableAverageConditional{T}(T, T)">
      <summary>EP message to <c>variable</c>.</summary>
      <param name="factor">Incoming message from <c>factor</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>variable</c> as the random arguments are varied. The formula is <c>proj[p(variable) sum_(factor) p(factor) factor(variable,factor,factorAlpha,variableAlpha)]/p(variable)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="factor" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatioOld{T}(T, T, double, double)">
      <summary />
      <param name="factor">Incoming message from <c>factor</c>.</param>
      <param name="variable">Incoming message from <c>variable</c>.</param>
      <param name="variableAlpha">Constant value for <c>variableAlpha</c>.</param>
      <param name="factorAlpha">Constant value for <c>factorAlpha</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SingleOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Single(String)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="CharacterAverageConditional(String)">
      <summary>EP message to <c>character</c>.</summary>
      <param name="str">Constant value for <c>str</c>.</param>
      <returns>The outgoing EP message to the <c>character</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>character</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="CharacterAverageConditional(StringDistribution)">
      <summary>EP message to <c>character</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>The outgoing EP message to the <c>character</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>character</c> as the random arguments are varied. The formula is <c>proj[p(character) sum_(str) p(str) factor(character,str)]/p(character)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(DiscreteChar)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="character">Incoming message from <c>character</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(character) p(character) factor(character,str)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_Bouchard_Sparse">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AInit()">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A{GaussianList}(GaussianList, double)">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="logSumExp{GaussianList}(GaussianList, double)">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Dirichlet, Dirichlet, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, double, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, GaussianList, double, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_Bouchard">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AInit()">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A{GaussianList}(GaussianList, double)">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Dirichlet, Dirichlet, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, double, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, GaussianList, double, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_BL06_LBFGS">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_Bohning">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_Taylor">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="to_x">Previous outgoing message to <c>x</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_KM11">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AInit(IList{Gaussian})">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A(IList{Gaussian}, Vector)">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="HistoryInit()">
      <summary>Initialize the buffer <c>history</c>.</summary>
      <returns>Initial value of buffer <c>history</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="History(IList{Gaussian}, List{IList{Gaussian}})">
      <summary>Update the buffer <c>history</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="history">Buffer <c>history</c>.</param>
      <returns>New value of buffer <c>history</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, Vector, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithmInit(IList{Gaussian})">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Vector, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, IList{Gaussian}, GaussianList, Vector)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="to_x">Previous outgoing message to <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_KM11_Sparse2">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AsjInit(IList{Gaussian})">
      <summary>Initialize the buffer <c>Asj</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Initial value of buffer <c>Asj</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Asj(IList{Gaussian}, IList{double})">
      <summary>Update the buffer <c>Asj</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="asj">Buffer <c>asj</c>.</param>
      <returns>New value of buffer <c>Asj</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AbouchardInit()">
      <summary>Initialize the buffer <c>Abouchard</c>.</summary>
      <returns>Initial value of buffer <c>Abouchard</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Abouchard{GaussianList}(GaussianList, double)">
      <summary>Update the buffer <c>Abouchard</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="abouchard">Buffer <c>abouchard</c>.</param>
      <returns>New value of buffer <c>Abouchard</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, IList{double}, double, Dirichlet, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="asj">Buffer <c>asj</c>.</param>
      <param name="abouchard">Buffer <c>abouchard</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>The outgoing VMP message to the <c>softmax</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(GaussianList, IList{double}, double, Dirichlet, Dirichlet, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="asj">Buffer <c>asj</c>.</param>
      <param name="abouchard">Buffer <c>abouchard</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <param name="to_x">Previous outgoing message to <c>x</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor{GaussianList}(GaussianList, IList{double}, double, Dirichlet, Dirichlet)">
      <summary>Evidence message for EP.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="asj">Buffer <c>asj</c>.</param>
      <param name="abouchard">Buffer <c>abouchard</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(x,softmax) p(x,softmax) factor(softmax,x))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_KM11_Sparse">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AInit(IList{Gaussian})">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A(IList{Gaussian}, IList{double})">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, IList{double}, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, IList{double}, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="logSumExpFull(IEnumerable{Gaussian}, IEnumerable{double})">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, GaussianList, GaussianList, IList{double})">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="to_x">Previous outgoing message to <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_BL06">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ExpectationLogSumExp_Helper(IList{Gaussian})">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, GaussianList, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_x">Previous outgoing message to <c>x</c>.</param>
      <returns>The outgoing VMP message to the <c>x</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="VectorSoftmaxOp_KM11">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(softmax,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AInit(VectorGaussian)">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="VectorGaussianToGaussianList(VectorGaussian)">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A(VectorGaussian, Vector)">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm(VectorGaussian, Vector, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithmInit(VectorGaussian)">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="XAverageLogarithm(Dirichlet, VectorGaussian, Vector, VectorGaussian)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_KM11_LBFGS">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, Vector, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="GradientAndValueAtPoint(double[], double[], Vector, Vector, Vector, Vector)">
      <summary />
      <param name="mu" />
      <param name="s2" />
      <param name="a">Buffer <c>a</c>.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="ns" />
      <param name="grad" />
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, Vector, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithmInit(IList{Gaussian})">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="AInit(IList{Gaussian})">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A(IList{Gaussian}, Vector)">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, IList{Gaussian}, Vector, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SoftmaxOp_KM11_LBFGS_Sparse">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor{GaussianList}(GaussianList, IList{double}, Dirichlet, Dirichlet)">
      <summary>Evidence message for VMP.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="softmax">Incoming message from <c>softmax</c>.</param>
      <param name="to_softmax">Previous outgoing message to <c>softmax</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="GradientAndValueAtPoint(IList{Gaussian}, IList{double}, Vector, Vector, Vector, Vector[])">
      <summary />
      <param name="prior" />
      <param name="a">Buffer <c>a</c>.</param>
      <param name="xm" />
      <param name="lxv" />
      <param name="ns" />
      <param name="grad" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm{GaussianList}(GaussianList, IList{double}, Dirichlet)">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AInit(IList{Gaussian})">
      <summary>Initialize the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns>Initial value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="A(IList{Gaussian}, IList{double})">
      <summary>Update the buffer <c>A</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <returns>New value of buffer <c>A</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GaussianList}(Dirichlet, IList{Gaussian}, IList{double}, GaussianList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="a">Buffer <c>a</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="GammaSoftmaxOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="MMath.Softmax(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="GetMeanLog(IList{Gamma})">
      <summary />
      <param name="x">Incoming message from <c>x</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SoftmaxAverageLogarithm(IList{Gamma})">
      <summary>VMP message to <c>softmax</c>.</summary>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <returns>The outgoing VMP message to the <c>softmax</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>softmax</c> as the random arguments are varied. The formula is <c>proj[sum_(x) p(x) factor(softmax,x)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="XAverageLogarithm{GammaList}(Dirichlet, GammaList, GammaList)">
      <summary>VMP message to <c>x</c>.</summary>
      <param name="softmax">Incoming message from <c>softmax</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="x">Incoming message from <c>x</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>x</c> with <c>softmax</c> integrated out. The formula is <c>sum_softmax p(softmax) factor(softmax,x)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="softmax" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="x" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SparseBernoulliFromBetaOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="SparseBernoulliList.Sample(ISparseList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(ISparseList{bool}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(SparseBernoulliList, SparseBernoulliList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(ISparseList{bool}, SparseBetaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probTrue) p(probTrue) factor(sample,probTrue))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(SparseBernoulliList, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,probTrue) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(ISparseList{bool}, SparseBetaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(probTrue) p(probTrue) factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(ISparseList{bool}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(SparseBernoulliList, SparseBetaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,probTrue) p(sample,probTrue) factor(sample,probTrue) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleConditional(ISparseList{double}, SparseBernoulliList)">
      <summary>Gibbs message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(ISparseList{double}, SparseBernoulliList)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueConditional(ISparseList{bool}, SparseBetaList)">
      <summary>Gibbs message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueAverageConditional(ISparseList{bool}, SparseBetaList)">
      <summary>EP message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(SparseBetaList, SparseBernoulliList)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(probTrue) p(probTrue) factor(sample,probTrue)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbTrueAverageConditional(SparseBernoulliList, SparseBetaList, SparseBetaList)">
      <summary>EP message to <c>probTrue</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>probTrue</c> as the random arguments are varied. The formula is <c>proj[p(probTrue) sum_(sample) p(sample) factor(sample,probTrue)]/p(probTrue)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(SparseBernoulliList, SparseBetaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,probTrue) p(sample,probTrue) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(SparseBernoulliList, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(ISparseList{bool}, SparseBetaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(probTrue) p(probTrue) log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(ISparseList{bool}, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,probTrue))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(ISparseList{double}, SparseBernoulliList)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probTrue">Constant value for <c>probTrue</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(SparseBetaList, SparseBernoulliList)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="probTrue">Incoming message from <c>probTrue</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(probTrue) p(probTrue) log(factor(sample,probTrue)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="probTrue" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ProbTrueAverageLogarithm(ISparseList{bool}, SparseBetaList)">
      <summary>VMP message to <c>probTrue</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>probTrue</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ProbTrueAverageLogarithm(SparseBernoulliList, SparseBetaList)">
      <summary>VMP message to <c>probTrue</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>probTrue</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,probTrue)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SparseGaussianListOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="SparseGaussianList.Sample(ISparseList{double}, ISparseList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleAverageConditionalInit(ISparseList{double})">
      <summary />
      <param name="mean">Constant value for <c>means</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(SparseGaussianList)">
      <summary />
      <param name="mean">Incoming message from <c>means</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(ISparseList{double}, ISparseList{double}, SparseGaussianList)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(ISparseList{double}, ISparseList{double}, SparseGaussianList)">
      <summary>EP message to <c>means</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>means</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(ISparseList{double}, ISparseList{double}, SparseGammaList)">
      <summary>EP message to <c>precs</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precs</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(SparseGaussianList, ISparseList{double}, SparseGaussianList)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(means) p(means) factor(sample,means,precs)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(SparseGaussianList, ISparseList{double}, SparseGaussianList)">
      <summary>EP message to <c>means</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>means</c> as the random arguments are varied. The formula is <c>proj[p(means) sum_(sample) p(sample) factor(sample,means,precs)]/p(means)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(SparseGaussianList, SparseGaussianList, SparseGammaList, SparseGammaList, SparseGaussianList)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(means,precs) p(means,precs) factor(sample,means,precs)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(SparseGaussianList, ISparseList{double}, SparseGammaList, SparseGammaList, SparseGaussianList)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(precs) p(precs) factor(sample,means,precs)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(SparseGaussianList, SparseGaussianList, SparseGammaList, SparseGammaList, SparseGaussianList)">
      <summary>EP message to <c>means</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>means</c> as the random arguments are varied. The formula is <c>proj[p(means) sum_(sample,precs) p(sample,precs) factor(sample,means,precs)]/p(means)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(ISparseList{double}, SparseGaussianList, SparseGammaList, SparseGammaList, SparseGaussianList)">
      <summary>EP message to <c>means</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>means</c> as the random arguments are varied. The formula is <c>proj[p(means) sum_(precs) p(precs) factor(sample,means,precs)]/p(means)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(ISparseList{double}, SparseGaussianList, SparseGammaList, SparseGammaList)">
      <summary>EP message to <c>precs</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precs</c> as the random arguments are varied. The formula is <c>proj[p(precs) sum_(means) p(means) factor(sample,means,precs)]/p(precs)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(SparseGaussianList, ISparseList{double}, SparseGammaList, SparseGammaList)">
      <summary>EP message to <c>precs</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precs</c> as the random arguments are varied. The formula is <c>proj[p(precs) sum_(sample) p(sample) factor(sample,means,precs)]/p(precs)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(SparseGaussianList, SparseGaussianList, SparseGammaList, SparseGammaList)">
      <summary>EP message to <c>precs</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precs</c> as the random arguments are varied. The formula is <c>proj[p(precs) sum_(sample,means) p(sample,means) factor(sample,means,precs)]/p(precs)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(ISparseList{double}, ISparseList{double}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,means,precs))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(SparseGaussianList, SparseGaussianList, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,means) p(sample,means) factor(sample,means,precs))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(SparseGaussianList, ISparseList{double}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,means,precs))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(ISparseList{double}, SparseGaussianList, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(means) p(means) factor(sample,means,precs))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(ISparseList{double}, ISparseList{double}, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(precs) p(precs) factor(sample,means,precs))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(ISparseList{double}, SparseGaussianList, SparseGammaList, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(means,precs) p(means,precs) factor(sample,means,precs))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(SparseGaussianList, ISparseList{double}, SparseGammaList, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,precs) p(sample,precs) factor(sample,means,precs))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(SparseGaussianList, SparseGaussianList, SparseGammaList, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,means,precs) p(sample,means,precs) factor(sample,means,precs))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(ISparseList{double}, ISparseList{double}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(SparseGaussianList, SparseGaussianList, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,means) p(sample,means) factor(sample,means,precs) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(SparseGaussianList, ISparseList{double}, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,means,precs) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(ISparseList{double}, SparseGaussianList, ISparseList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(means) p(means) factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(ISparseList{double}, ISparseList{double}, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(precs) p(precs) factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(ISparseList{double}, SparseGaussianList, SparseGammaList, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(means,precs) p(means,precs) factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(SparseGaussianList, SparseGaussianList, SparseGammaList, SparseGaussianList, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,means,precs) p(sample,means,precs) factor(sample,means,precs) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(SparseGaussianList, ISparseList{double}, SparseGammaList, SparseGaussianList, SparseGammaList)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,precs) p(sample,precs) factor(sample,means,precs) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(ISparseList{double})">
      <summary />
      <param name="mean">Constant value for <c>means</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(SparseGaussianList)">
      <summary />
      <param name="mean">Incoming message from <c>means</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(ISparseList{double}, ISparseList{double}, SparseGaussianList)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(SparseGaussianList, ISparseList{double}, SparseGaussianList)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(means) p(means) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(ISparseList{double}, ISparseList{double}, SparseGaussianList)">
      <summary>VMP message to <c>means</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>means</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(SparseGaussianList, ISparseList{double}, SparseGaussianList)">
      <summary>VMP message to <c>means</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>means</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(SparseGaussianList, SparseGammaList, SparseGaussianList)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(means,precs) p(means,precs) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(SparseGaussianList, SparseGammaList, SparseGaussianList)">
      <summary>VMP message to <c>means</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>means</c>. The formula is <c>exp(sum_(sample,precs) p(sample,precs) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(ISparseList{double}, SparseGammaList, SparseGaussianList)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(precs) p(precs) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(ISparseList{double}, SparseGammaList, SparseGaussianList)">
      <summary>VMP message to <c>means</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>means</c>. The formula is <c>exp(sum_(precs) p(precs) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(ISparseList{double}, ISparseList{double}, SparseGammaList)">
      <summary>VMP message to <c>precs</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precs</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(SparseGaussianList, SparseGaussianList, SparseGammaList)">
      <summary>VMP message to <c>precs</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precs</c>. The formula is <c>exp(sum_(sample,means) p(sample,means) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(SparseGaussianList, ISparseList{double}, SparseGammaList)">
      <summary>VMP message to <c>precs</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precs</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(ISparseList{double}, SparseGaussianList, SparseGammaList)">
      <summary>VMP message to <c>precs</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precs</c>. The formula is <c>exp(sum_(means) p(means) log(factor(sample,means,precs)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(SparseGaussianList, SparseGaussianList, SparseGammaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,means,precs) p(sample,means,precs) log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(ISparseList{double}, ISparseList{double}, SparseGammaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(precs) p(precs) log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(ISparseList{double}, ISparseList{double}, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(SparseGaussianList, ISparseList{double}, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(ISparseList{double}, SparseGaussianList, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(means) p(means) log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(ISparseList{double}, SparseGaussianList, SparseGammaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(means,precs) p(means,precs) log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(SparseGaussianList, ISparseList{double}, SparseGammaList)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Constant value for <c>means</c>.</param>
      <param name="precision">Incoming message from <c>precs</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,precs) p(sample,precs) log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(SparseGaussianList, SparseGaussianList, ISparseList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>means</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precs</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,means) p(sample,means) log(factor(sample,means,precs))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SparseGPOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.FunctionEvaluate(IFunction, Vector)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, IFunction, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(y,func,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, IFunction, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(y,func,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, IFunction, Vector)">
      <summary>Evidence message for VMP.</summary>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="func">Constant value for <c>func</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(y,func,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(double, SparseGP, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="func">Incoming message from <c>func</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(func) p(func) factor(y,func,x))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, SparseGP, Vector)">
      <summary>Evidence message for EP.</summary>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="func">Incoming message from <c>func</c>.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(func) p(func) factor(y,func,x))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="y">Incoming message from <c>y</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(y) p(y) factor(y,func,x) / sum_y p(y) messageTo(y))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="YAverageConditional(SparseGP, Vector)">
      <summary>EP message to <c>y</c>.</summary>
      <param name="func">Incoming message from <c>func</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <returns>The outgoing EP message to the <c>y</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>y</c> as the random arguments are varied. The formula is <c>proj[p(y) sum_(func) p(func) factor(y,func,x)]/p(y)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="func" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="FuncAverageConditional(Gaussian, SparseGP, Vector, SparseGP)">
      <summary>EP message to <c>func</c>.</summary>
      <param name="y">Incoming message from <c>y</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="func">Incoming message from <c>func</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>func</c> as the random arguments are varied. The formula is <c>proj[p(func) sum_(y) p(y) factor(y,func,x)]/p(func)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="y" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="func" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="FuncAverageConditional(double, SparseGP, Vector, SparseGP)">
      <summary>EP message to <c>func</c>.</summary>
      <param name="y">Constant value for <c>y</c>.</param>
      <param name="func">Incoming message from <c>func</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="x">Constant value for <c>x</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>func</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="func" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SplitOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.Split{T}(IReadOnlyList{T}, int, out T[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(IReadOnlyList{T}, IReadOnlyList{T}, int, IReadOnlyList{T})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,head,tail) p(array,head,tail) factor(head,array,count,tail) / sum_head p(head) messageTo(head))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType}(IReadOnlyList{ItemType}, IReadOnlyList{ItemType}, int, IReadOnlyList{ItemType})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,head,tail) p(array,head,tail) factor(head,array,count,tail) / sum_head p(head) messageTo(head))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType}(IReadOnlyList{ItemType}, IReadOnlyList{T}, int, IReadOnlyList{T})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,head,tail) p(array,head,tail) factor(head,array,count,tail) / sum_head p(head) messageTo(head))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType}(IReadOnlyList{ItemType}, IReadOnlyList{ItemType}, int, IReadOnlyList{T})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,head,tail) p(array,head,tail) factor(head,array,count,tail) / sum_head p(head) messageTo(head))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{ItemType}(IReadOnlyList{ItemType}, IReadOnlyList{T}, int, IReadOnlyList{ItemType})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,head,tail) p(array,head,tail) factor(head,array,count,tail) / sum_head p(head) messageTo(head))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, IReadOnlyList{ItemType}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(head,tail) p(head,tail) factor(head,array,count,tail)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, ItemType}(IReadOnlyList{T}, int, IReadOnlyList{ItemType}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(head,tail) p(head,tail) factor(head,array,count,tail)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, IReadOnlyList{T}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(head,tail) p(head,tail) factor(head,array,count,tail)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType, ItemType}(IReadOnlyList{T}, int, IReadOnlyList{T}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(head,tail) p(head,tail) factor(head,array,count,tail)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="HeadAverageConditional{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, ArrayType)">
      <summary>EP message to <c>head</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>head</c> as the random arguments are varied. The formula is <c>proj[p(head) sum_(array) p(array) factor(head,array,count,tail)]/p(head)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TailAverageConditional{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, ArrayType)">
      <summary>EP message to <c>tail</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>tail</c> as the random arguments are varied. The formula is <c>proj[p(tail) sum_(array) p(array) factor(head,array,count,tail)]/p(tail)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TailAverageConditional{ArrayType}(IReadOnlyList{T}, int, ArrayType)">
      <summary>EP message to <c>tail</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>tail</c> as the random arguments are varied. The formula is <c>proj[p(tail) sum_(array) p(array) factor(head,array,count,tail)]/p(tail)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(head,array,count,tail))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, IReadOnlyList{ItemType}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>head</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(tail) p(tail) log(sum_head p(head) factor(head,array,count,tail)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ArrayType, ItemType}(IReadOnlyList{T}, int, IReadOnlyList{ItemType}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>head</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(tail) p(tail) log(sum_head p(head) factor(head,array,count,tail)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, IReadOnlyList{T}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>head</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(tail) p(tail) log(sum_head p(head) factor(head,array,count,tail)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{ArrayType, ItemType}(IReadOnlyList{T}, int, IReadOnlyList{T}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="head">Incoming message from <c>head</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="tail">Incoming message from <c>tail</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>head</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(tail) p(tail) log(sum_head p(head) factor(head,array,count,tail)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="HeadAverageLogarithm{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, ArrayType)">
      <summary>VMP message to <c>head</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>head</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(head,array,count,tail)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TailAverageLogarithm{ArrayType, ItemType}(IReadOnlyList{ItemType}, int, ArrayType)">
      <summary>VMP message to <c>tail</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>tail</c>. The formula is <c>exp(sum_(array) p(array) log(factor(head,array,count,tail)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="TailAverageLogarithm{ArrayType}(IReadOnlyList{T}, int, ArrayType)">
      <summary>VMP message to <c>tail</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>tail</c>. The formula is <c>exp(sum_(array) p(array) log(factor(head,array,count,tail)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SplitSubarrayOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.SplitSubarray{T}(IReadOnlyList{T}, int[][])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{T}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{T}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(IReadOnlyList{IReadOnlyList{T}}, IReadOnlyList{T}, IList{IList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IList{DistributionType}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType, ItemType}(IList{ItemType}, IList{DistributionType}, IList{IList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IList{DistributionType}, IReadOnlyList{IReadOnlyList{T}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,items,indices) p(array,items,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IList{DistributionType}, IReadOnlyList{IReadOnlyList{T}}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array,items,indices) p(array,items,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType, ItemType}(IList{DistributionType}, IList{ItemType}, IList{IList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IReadOnlyList{T}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType, ItemType}(IList{ItemType}, IList{T}, IList{IList{int}})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{DistributionType, ItemType}(IList{ItemType}, IList{T}, IList{IList{int}})">
      <summary>Evidence message for VMP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType, ItemArrayType, ItemType}(ItemArrayType, IList{DistributionType}, IList{IList{int}}, ItemArrayType)">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="to_items">Previous outgoing message to <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array,indices) p(items,array,indices) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{DistributionType, ItemType}(IReadOnlyList{DistributionType}, IList{IList{int}}, int, ItemType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="resultIndex">Index of the <c>items</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices) p(array,indices) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IList{IList{int}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices) p(items,indices) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IList{IList{int}}, IReadOnlyList{IReadOnlyList{T}}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(indices,items) p(indices,items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{DistributionType, ItemType, ResultType}(IList{DistributionType}, IList{IList{int}}, ResultType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array,indices) p(array,indices) factor(items,array,indices)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IReadOnlyList{IReadOnlyList{DistributionType}}, IList{IList{int}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IList{IList{int}}, IReadOnlyList{IReadOnlyList{T}}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>array</c>. Because the factor is deterministic, <c>items</c> is integrated out before taking the logarithm. The formula is <c>exp(sum_(indices) p(indices) log(sum_items p(items) factor(items,array,indices)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringCapitalizedOfMinLengthOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.StringCapitalized(int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(int)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="minLength">Constant value for <c>minLength</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>str</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringCapitalizedOfMinMaxLengthOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.StringCapitalized(int, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(int, int)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="minLength">Constant value for <c>minLength</c>.</param>
      <param name="maxLength">Constant value for <c>maxLength</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>str</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringCharConcatOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Concat(String, Char)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ConcatAverageConditional(StringDistribution, DiscreteChar)">
      <summary>EP message to <c>concat</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <returns>The outgoing EP message to the <c>concat</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[p(concat) sum_(str,ch) p(str,ch) factor(concat,str,ch)]/p(concat)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(StringDistribution, DiscreteChar)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(concat,ch) p(concat,ch) factor(concat,str,ch)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ChAverageConditional(StringDistribution, StringDistribution)">
      <summary>EP message to <c>ch</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>The outgoing EP message to the <c>ch</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>ch</c> as the random arguments are varied. The formula is <c>proj[p(ch) sum_(concat,str) p(concat,str) factor(concat,str,ch)]/p(ch)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(StringDistribution, StringDistribution, DiscreteChar)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat,str,ch) p(concat,str,ch) factor(concat,str,ch))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(StringDistribution, StringDistribution, DiscreteChar)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat,str,ch) p(concat,str,ch) factor(concat,str,ch) / sum_concat p(concat) messageTo(concat))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(String, StringDistribution, DiscreteChar)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="ch">Incoming message from <c>ch</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str,ch) p(str,ch) factor(concat,str,ch))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringConcatOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Concat(String, String)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ConcatAverageConditional(StringDistribution, StringDistribution)">
      <summary>EP message to <c>concat</c>.</summary>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>The outgoing EP message to the <c>concat</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>concat</c> as the random arguments are varied. The formula is <c>proj[p(concat) sum_(str1,str2) p(str1,str2) factor(concat,str1,str2)]/p(concat)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="Str1AverageConditional(StringDistribution, StringDistribution)">
      <summary>EP message to <c>str1</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>The outgoing EP message to the <c>str1</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str1</c> as the random arguments are varied. The formula is <c>proj[p(str1) sum_(concat,str2) p(concat,str2) factor(concat,str1,str2)]/p(str1)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="Str2AverageConditional(StringDistribution, StringDistribution)">
      <summary>EP message to <c>str2</c>.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <returns>The outgoing EP message to the <c>str2</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str2</c> as the random arguments are varied. The formula is <c>proj[p(str2) sum_(concat,str1) p(concat,str1) factor(concat,str1,str2)]/p(str2)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(StringDistribution, StringDistribution, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat,str1,str2) p(concat,str1,str2) factor(concat,str1,str2))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(StringDistribution, StringDistribution, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Incoming message from <c>concat</c>.</param>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(concat,str1,str2) p(concat,str1,str2) factor(concat,str1,str2) / sum_concat p(concat) messageTo(concat))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(String, StringDistribution, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="concat">Constant value for <c>concat</c>.</param>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str1,str2) p(str1,str2) factor(concat,str1,str2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringFormatOpBase_NoArgumentNames{StringFormatOp_RequireEveryPlaceholder}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.StringFormat(String, String[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(StringDistribution, IReadOnlyList{String})">
      <summary>EP message to <c>str</c>.</summary>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(format,args) p(format,args) factor(str,format,args)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(StringDistribution, IReadOnlyList{StringDistribution})">
      <summary>EP message to <c>str</c>.</summary>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(format,args) p(format,args) factor(str,format,args)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="FormatAverageConditional(StringDistribution, IReadOnlyList{String})">
      <summary>EP message to <c>format</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>format</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>format</c> as the random arguments are varied. The formula is <c>proj[p(format) sum_(str,args) p(str,args) factor(str,format,args)]/p(format)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="FormatAverageConditional(StringDistribution, IReadOnlyList{StringDistribution})">
      <summary>EP message to <c>format</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>format</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>format</c> as the random arguments are varied. The formula is <c>proj[p(format) sum_(str,args) p(str,args) factor(str,format,args)]/p(format)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArgsAverageConditional{TStringDistributionList}(StringDistribution, StringDistribution, IReadOnlyList{StringDistribution}, TStringDistributionList)">
      <summary>EP message to <c>args</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>args</c> as the random arguments are varied. The formula is <c>proj[p(args) sum_(str,format) p(str,format) factor(str,format,args)]/p(args)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ToStrReverseMessage(StringDistribution, IReadOnlyList{StringDistribution})">
      <summary />
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str) p(str) factor(str,format,args) / sum_str p(str) messageTo(str))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(String, StringDistribution, IReadOnlyList{StringDistribution})">
      <summary>Evidence message for EP.</summary>
      <param name="str">Constant value for <c>str</c>.</param>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(format,args) p(format,args) factor(str,format,args))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(String, StringDistribution, IReadOnlyList{String})">
      <summary>Evidence message for EP.</summary>
      <param name="str">Constant value for <c>str</c>.</param>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(format,args) p(format,args) factor(str,format,args))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringFormatOpBase_NoArgumentNames{StringFormatOp_AllowMissingPlaceholders}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.StringFormat(String, String[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(StringDistribution, IReadOnlyList{String})">
      <summary>EP message to <c>str</c>.</summary>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(format,args) p(format,args) factor(str,format,args)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(StringDistribution, IReadOnlyList{StringDistribution})">
      <summary>EP message to <c>str</c>.</summary>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(format,args) p(format,args) factor(str,format,args)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="FormatAverageConditional(StringDistribution, IReadOnlyList{String})">
      <summary>EP message to <c>format</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>format</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>format</c> as the random arguments are varied. The formula is <c>proj[p(format) sum_(str,args) p(str,args) factor(str,format,args)]/p(format)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="FormatAverageConditional(StringDistribution, IReadOnlyList{StringDistribution})">
      <summary>EP message to <c>format</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>The outgoing EP message to the <c>format</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>format</c> as the random arguments are varied. The formula is <c>proj[p(format) sum_(str,args) p(str,args) factor(str,format,args)]/p(format)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArgsAverageConditional{TStringDistributionList}(StringDistribution, StringDistribution, IReadOnlyList{StringDistribution}, TStringDistributionList)">
      <summary>EP message to <c>args</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>args</c> as the random arguments are varied. The formula is <c>proj[p(args) sum_(str,format) p(str,format) factor(str,format,args)]/p(args)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ToStrReverseMessage(StringDistribution, IReadOnlyList{StringDistribution})">
      <summary />
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str) p(str) factor(str,format,args) / sum_str p(str) messageTo(str))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(String, StringDistribution, IReadOnlyList{StringDistribution})">
      <summary>Evidence message for EP.</summary>
      <param name="str">Constant value for <c>str</c>.</param>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(format,args) p(format,args) factor(str,format,args))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(String, StringDistribution, IReadOnlyList{String})">
      <summary>Evidence message for EP.</summary>
      <param name="str">Constant value for <c>str</c>.</param>
      <param name="format">Incoming message from <c>format</c>.</param>
      <param name="args">Incoming message from <c>args</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(format,args) p(format,args) factor(str,format,args))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringFromArrayOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.StringFromArray(Char[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(IList{DiscreteChar})">
      <summary>EP message to <c>str</c>.</summary>
      <param name="characters">Incoming message from <c>characters</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(characters) p(characters) factor(str,characters)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="CharactersAverageConditional{TDiscreteCharList}(StringDistribution, IList{DiscreteChar}, TDiscreteCharList)">
      <summary>EP message to <c>characters</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="characters">Incoming message from <c>characters</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>characters</c> as the random arguments are varied. The formula is <c>proj[p(characters) sum_(str) p(str) factor(str,characters)]/p(characters)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{DiscreteChar}, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="characters">Incoming message from <c>characters</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(characters,str) p(characters,str) factor(str,characters) / sum_str p(str) messageTo(str))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IList{DiscreteChar}, String)">
      <summary>Evidence message for EP.</summary>
      <param name="characters">Incoming message from <c>characters</c>.</param>
      <param name="str">Constant value for <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(characters) p(characters) factor(str,characters))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringOfLengthOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.StringOfLength(int, DiscreteChar)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(DiscreteChar, int)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>str</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(DiscreteChar, Discrete)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="length">Incoming message from <c>length</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(length) p(length) factor(str,length,allowedChars)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LengthAverageConditional(StringDistribution, DiscreteChar, Discrete)">
      <summary>EP message to <c>length</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>length</c> as the random arguments are varied. The formula is <c>proj[p(length) sum_(str) p(str) factor(str,length,allowedChars)]/p(length)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(DiscreteChar, Discrete, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="length">Incoming message from <c>length</c>.</param>
      <param name="str">Incoming message from <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(length,str) p(length,str) factor(str,length,allowedChars) / sum_str p(str) messageTo(str))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(DiscreteChar, int, String)">
      <summary>Evidence message for EP.</summary>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <param name="str">Constant value for <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(str,length,allowedChars))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(DiscreteChar, Discrete, String)">
      <summary>Evidence message for EP.</summary>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="length">Incoming message from <c>length</c>.</param>
      <param name="str">Constant value for <c>str</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(length) p(length) factor(str,length,allowedChars))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringOfMinLengthOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.String(int, DiscreteChar)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(DiscreteChar, int)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="minLength">Constant value for <c>minLength</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>str</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringOfMinMaxLengthOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.String(int, int, DiscreteChar)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="StrAverageConditional(DiscreteChar, int, int)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="allowedChars">Constant value for <c>allowedChars</c>.</param>
      <param name="minLength">Constant value for <c>minLength</c>.</param>
      <param name="maxLength">Constant value for <c>maxLength</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>str</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="StringsAreEqualOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.AreEqual(String, String)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AreEqualAverageConditional(StringDistribution, StringDistribution)">
      <summary>EP message to <c>areEqual</c>.</summary>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>The outgoing EP message to the <c>areEqual</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>areEqual</c> as the random arguments are varied. The formula is <c>proj[p(areEqual) sum_(str1,str2) p(str1,str2) factor(areEqual,str1,str2)]/p(areEqual)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="Str1AverageConditional(StringDistribution, Bernoulli, StringDistribution)">
      <summary>EP message to <c>str1</c>.</summary>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str1</c> as the random arguments are varied. The formula is <c>proj[p(str1) sum_(str2,areEqual) p(str2,areEqual) factor(areEqual,str1,str2)]/p(str1)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Str2AverageConditional(StringDistribution, Bernoulli, StringDistribution)">
      <summary>EP message to <c>str2</c>.</summary>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="areEqual">Incoming message from <c>areEqual</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str2</c> as the random arguments are varied. The formula is <c>proj[p(str2) sum_(str1,areEqual) p(str1,areEqual) factor(areEqual,str1,str2)]/p(str2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="areEqual" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Bernoulli)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Incoming message from <c>areEqual</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(areEqual) p(areEqual) factor(areEqual,str1,str2) / sum_areEqual p(areEqual) messageTo(areEqual))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(bool, StringDistribution, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str1,str2) p(str1,str2) factor(areEqual,str1,str2))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(bool, StringDistribution, StringDistribution)">
      <summary>Evidence message for EP.</summary>
      <param name="areEqual">Constant value for <c>areEqual</c>.</param>
      <param name="str1">Incoming message from <c>str1</c>.</param>
      <param name="str2">Incoming message from <c>str2</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str1,str2) p(str1,str2) factor(areEqual,str1,str2))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SubarrayOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.Subarray{T}(IReadOnlyList{T}, IReadOnlyList{int})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(IReadOnlyList{T}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(IReadOnlyList{T}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{T}, IReadOnlyList{DistributionType}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{DistributionType}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{DistributionType}(IReadOnlyList{DistributionType}, IReadOnlyList{T}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{DistributionType})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items) p(items) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{DistributionType}(IReadOnlyList{T}, IReadOnlyList{DistributionType}, IReadOnlyList{int})">
      <summary>Evidence message for EP.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(items,array) p(items,array) factor(items,array,indices) / sum_items p(items) messageTo(items))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditional{DistributionType, ResultType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, ResultType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array) p(array) factor(items,array,indices)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsAverageConditionalInit{TDist}(DistributionStructArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageConditionalInit{TDist}(DistributionRefArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IReadOnlyList{T}, IReadOnlyList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items) p(items) factor(items,array,indices)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(items,array,indices))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(DistributionStructArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithmInit{TDist}(DistributionRefArray{TDist, T}, IReadOnlyList{int})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemsAverageLogarithm{DistributionType, ResultType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, ResultType)">
      <summary>VMP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(items,array,indices)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemsDeriv{ResultType}(ResultType)">
      <summary />
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IReadOnlyList{DistributionType}, IReadOnlyList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{DistributionType, ArrayType}(IReadOnlyList{T}, IReadOnlyList{int}, ArrayType)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Constant value for <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>items</c> integrated out. The formula is <c>sum_items p(items) factor(items,array,indices)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SubarrayOp2{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.Subarray2{T}(IReadOnlyList{T}, IReadOnlyList{int}, IReadOnlyList{T})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ItemsAverageConditional{DistributionType, ResultType}(IList{DistributionType}, IList{int}, IList{DistributionType}, ResultType)">
      <summary>EP message to <c>items</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="array2">Incoming message from <c>array2</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>items</c> as the random arguments are varied. The formula is <c>proj[p(items) sum_(array,indices,array2) p(array,indices,array2) factor(items,array,indices,array2)]/p(items)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array2" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="Array2AverageConditional{DistributionType, ArrayType}(IList{DistributionType}, IList{int}, ArrayType)">
      <summary>EP message to <c>array2</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array2</c> as the random arguments are varied. The formula is <c>proj[p(array2) sum_(items,indices) p(items,indices) factor(items,array,indices,array2)]/p(array2)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IList{DistributionType}, IList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices) p(items,indices) factor(items,array,indices,array2)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="items" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{DistributionType, ArrayType}(IList{T}, IList{int}, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="items">Incoming message from <c>items</c>.</param>
      <param name="indices">Incoming message from <c>indices</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(items,indices) p(items,indices) factor(items,array,indices,array2)]/p(array)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SubstringOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Substring(String, int, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SubAverageConditional(StringDistribution, int, int)">
      <summary>EP message to <c>sub</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>The outgoing EP message to the <c>sub</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sub</c> as the random arguments are varied. The formula is <c>proj[p(sub) sum_(str) p(str) factor(sub,str,start,length)]/p(sub)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SubAverageConditional(StringDistribution, int, int, int)">
      <summary>EP message to <c>sub</c>.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="minLength" />
      <param name="maxLength" />
      <returns>The outgoing EP message to the <c>sub</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sub</c> as the random arguments are varied. The formula is <c>proj[p(sub) sum_(str) p(str) factor(sub,str,start,length)]/p(sub)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SubAverageConditional(String, int, int)">
      <summary>EP message to <c>sub</c>.</summary>
      <param name="str">Constant value for <c>str</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>The outgoing EP message to the <c>sub</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sub</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(String, int, int)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="sub">Constant value for <c>sub</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>str</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="StrAverageConditional(StringDistribution, int, int)">
      <summary>EP message to <c>str</c>.</summary>
      <param name="sub">Incoming message from <c>sub</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>The outgoing EP message to the <c>str</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>str</c> as the random arguments are varied. The formula is <c>proj[p(str) sum_(sub) p(sub) factor(sub,str,start,length)]/p(str)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(StringDistribution, StringDistribution, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="sub">Incoming message from <c>sub</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str,sub) p(str,sub) factor(sub,str,start,length))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(StringDistribution, StringDistribution, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="sub">Incoming message from <c>sub</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str,sub) p(str,sub) factor(sub,str,start,length) / sum_sub p(sub) messageTo(sub))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(StringDistribution, String, int, int)">
      <summary>Evidence message for EP.</summary>
      <param name="str">Incoming message from <c>str</c>.</param>
      <param name="sub">Constant value for <c>sub</c>.</param>
      <param name="start">Constant value for <c>start</c>.</param>
      <param name="length">Constant value for <c>length</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(str) p(str) factor(sub,str,start,length))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SubvectorOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Vector.Subvector(Vector, int, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Vector, Vector, int)">
      <summary>Evidence message for EP.</summary>
      <param name="subvector">Constant value for <c>subvector</c>.</param>
      <param name="source">Constant value for <c>source</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(subvector,source,startIndex,count))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, int)">
      <summary>Evidence message for EP.</summary>
      <param name="subvector">Constant value for <c>subvector</c>.</param>
      <param name="source">Constant value for <c>source</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(subvector,source,startIndex,count))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="subvector">Constant value for <c>subvector</c>.</param>
      <param name="source">Constant value for <c>source</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(subvector,source,startIndex,count))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SourceVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>SourceVariance</c>.</summary>
      <param name="Source">Incoming message from <c>source</c>.</param>
      <returns>Initial value of buffer <c>SourceVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SourceVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>SourceVariance</c>.</summary>
      <param name="Source">Incoming message from <c>source</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Source" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SourceMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>SourceMean</c>.</summary>
      <param name="Source">Incoming message from <c>source</c>.</param>
      <returns>Initial value of buffer <c>SourceMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SourceMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>SourceMean</c>.</summary>
      <param name="Source">Incoming message from <c>source</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SourceVariance">Buffer <c>SourceVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Source" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, PositiveDefiniteMatrix, int)">
      <summary>Evidence message for EP.</summary>
      <param name="subvector">Constant value for <c>subvector</c>.</param>
      <param name="SourceMean">Buffer <c>SourceMean</c>.</param>
      <param name="SourceVariance">Buffer <c>SourceVariance</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(subvector,source,startIndex,count))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, PositiveDefiniteMatrix, int)">
      <summary>Evidence message for EP.</summary>
      <param name="subvector">Constant value for <c>subvector</c>.</param>
      <param name="SourceMean">Buffer <c>SourceMean</c>.</param>
      <param name="SourceVariance">Buffer <c>SourceVariance</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(subvector,source,startIndex,count))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="subvector">Incoming message from <c>subvector</c>.</param>
      <param name="to_subvector">Outgoing message to <c>subvector</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(subvector) p(subvector) factor(subvector,source,startIndex,count))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="subvector">Incoming message from <c>subvector</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(subvector) p(subvector) factor(subvector,source,startIndex,count) / sum_subvector p(subvector) messageTo(subvector))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SubvectorAverageConditionalInit(int)">
      <summary />
      <param name="count">Constant value for <c>count</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SubvectorAverageLogarithmInit(int)">
      <summary />
      <param name="count">Constant value for <c>count</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SubvectorAverageConditional(Vector, PositiveDefiniteMatrix, int, VectorGaussian)">
      <summary>EP message to <c>subvector</c>.</summary>
      <param name="SourceMean">Buffer <c>SourceMean</c>.</param>
      <param name="SourceVariance">Buffer <c>SourceVariance</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>subvector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SourceAverageConditional(VectorGaussian, int, VectorGaussian)">
      <summary>EP message to <c>source</c>.</summary>
      <param name="subvector">Incoming message from <c>subvector</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>source</c> as the random arguments are varied. The formula is <c>proj[p(source) sum_(subvector) p(subvector) factor(subvector,source,startIndex,count)]/p(source)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="subvector" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SourceAverageConditional(Vector, int, VectorGaussian)">
      <summary>EP message to <c>source</c>.</summary>
      <param name="subvector">Constant value for <c>subvector</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>source</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(subvector,source,startIndex,count))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SubvectorAverageLogarithm(Vector, PositiveDefiniteMatrix, int, VectorGaussian)">
      <summary>VMP message to <c>subvector</c>.</summary>
      <param name="SourceMean">Buffer <c>SourceMean</c>.</param>
      <param name="SourceVariance">Buffer <c>SourceVariance</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>subvector</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SourceAverageLogarithm(VectorGaussian, int, VectorGaussian)">
      <summary>VMP message to <c>source</c>.</summary>
      <param name="subvector">Incoming message from <c>subvector</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>source</c> with <c>subvector</c> integrated out. The formula is <c>sum_subvector p(subvector) factor(subvector,source,startIndex,count)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="subvector" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SourceAverageLogarithm(Vector, int, VectorGaussian)">
      <summary>VMP message to <c>source</c>.</summary>
      <param name="subvector">Constant value for <c>subvector</c>.</param>
      <param name="startIndex">Constant value for <c>startIndex</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>source</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VectorElementOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItem{T}(IReadOnlyList{T}, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ArrayVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>ArrayVariance</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Initial value of buffer <c>ArrayVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>ArrayVariance</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>ArrayMean</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Initial value of buffer <c>ArrayMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>ArrayMean</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="ArrayVariance">Buffer <c>ArrayVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, VectorGaussian, Vector, PositiveDefiniteMatrix, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="ArrayMean">Buffer <c>ArrayMean</c>.</param>
      <param name="ArrayVariance">Buffer <c>ArrayVariance</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(item,array,index))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, VectorGaussian, Vector, PositiveDefiniteMatrix, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="ArrayMean">Buffer <c>ArrayMean</c>.</param>
      <param name="ArrayVariance">Buffer <c>ArrayVariance</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(item,array,index))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemAverageConditional(VectorGaussian, Vector, PositiveDefiniteMatrix, int)">
      <summary>EP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="ArrayMean">Buffer <c>ArrayMean</c>.</param>
      <param name="ArrayVariance">Buffer <c>ArrayVariance</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>The outgoing EP message to the <c>item</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[p(item) sum_(array) p(array) factor(item,array,index)]/p(item)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemAverageConditionalInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageLogarithmInit()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional(Gaussian, int, VectorGaussian)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(item) p(item) factor(item,array,index)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional(double, int, VectorGaussian)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, VectorGaussian, Vector, PositiveDefiniteMatrix, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="ArrayMean">Buffer <c>ArrayMean</c>.</param>
      <param name="ArrayVariance">Buffer <c>ArrayVariance</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Gaussian, VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageLogarithm(VectorGaussian, Vector, PositiveDefiniteMatrix, int)">
      <summary>VMP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="ArrayMean">Buffer <c>ArrayMean</c>.</param>
      <param name="ArrayVariance">Buffer <c>ArrayVariance</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>The outgoing VMP message to the <c>item</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(item,array,index)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm(Gaussian, int, VectorGaussian)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>item</c> integrated out. The formula is <c>sum_item p(item) factor(item,array,index)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm(double, int, VectorGaussian)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="GetItemOp{double}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Collection.GetItem{T}(IReadOnlyList{T}, int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, IList{double}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(item,array,index))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, IList{double}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(item,array,index))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, IList{double}, int)">
      <summary>Evidence message for VMP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>In Variational Message Passing, the evidence contribution of a deterministic factor is zero. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{Distribution}(Distribution, Distribution)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <param name="to_item">Outgoing message to <c>item</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item) p(item) factor(item,array,index))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{Distribution}(double, IList{Distribution}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(item,array,index))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{Distribution}(Distribution)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Incoming message from <c>item</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(item) p(item) factor(item,array,index) / sum_item p(item) messageTo(item))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{Distribution}(double, IList{Distribution}, int)">
      <summary>Evidence message for EP.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(item,array,index))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageConditional{Distribution}(IList{Distribution}, int, Distribution)">
      <summary>EP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[p(item) sum_(array) p(array) factor(item,array,index)]/p(item)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemAverageConditionalInit{Distribution}(IList{Distribution})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{Distribution, DistributionArray}(Distribution, int, DistributionArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(item) p(item) factor(item,array,index)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{Distribution, DistributionArray}(double, int, DistributionArray)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(item,array,index))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="ItemAverageLogarithm{Distribution}(IList{Distribution}, int, Distribution)">
      <summary>VMP message to <c>item</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>item</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(item,array,index)]</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ItemAverageLogarithmInit{Distribution}(IList{Distribution})">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{Distribution, DistributionArray}(Distribution, int, DistributionArray)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Incoming message from <c>item</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>item</c> integrated out. The formula is <c>sum_item p(item) factor(item,array,index)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="item" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{Distribution, DistributionArray}(double, int, DistributionArray)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="item">Constant value for <c>item</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="FastSumOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Sum(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(double, IList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, IList{double})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(double, IList{double})">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Gaussian, Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sum) p(sum) factor(sum,array))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(double, IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(sum,array))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>sum</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sum) p(sum) factor(sum,array) / sum_sum p(sum) messageTo(sum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(double, IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageConditional(IList{Gaussian})">
      <summary>EP message to <c>sum</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>The outgoing EP message to the <c>sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sum</c> as the random arguments are varied. The formula is <c>proj[p(sum) sum_(array) p(array) factor(sum,array)]/p(sum)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{GaussianList}(Gaussian, Gaussian, IList{Gaussian}, GaussianList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(sum) p(sum) factor(sum,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumExcept(IList{Gaussian}, int)">
      <summary />
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="excludedIndex" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional(Gaussian, Gaussian, Gaussian[], Gaussian[])">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(sum) p(sum) factor(sum,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{GaussianList}(double, IList{Gaussian}, GaussianList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumAverageLogarithm(IList{Gaussian})">
      <summary>VMP message to <c>sum</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>The outgoing VMP message to the <c>sum</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sum</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(sum,array)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumDeriv(Gaussian, IList{Gaussian}, IList{Gaussian})">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm6{GaussianList}(Gaussian, IList{Gaussian}, IList{Gaussian}, GaussianList)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="array_deriv" />
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm2{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm1{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm5{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm4{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm3{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns>The outgoing VMP message to the <c>array</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>sum</c> integrated out. The formula is <c>sum_sum p(sum) factor(sum,array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm7(Gaussian, IList{Gaussian}, int)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element besides resultIndex is uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>array</c> for which a message is desired.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{GaussianList}(double, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="SumOp3">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Sum(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ArrayAverageLogarithm{GaussianList}(Gaussian, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>sum</c> integrated out. The formula is <c>sum_sum p(sum) factor(sum,array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SumOp2">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Sum(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ArrayAverageConditional(Gaussian, Gaussian, IList{Gaussian}, int)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If the element at resultIndex is uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>array</c> for which a message is desired.</param>
      <returns>The outgoing EP message to the <c>array</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(sum) p(sum) factor(sum,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional(double, IList{Gaussian}, int)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If the element at resultIndex is uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>array</c> for which a message is desired.</param>
      <returns>The outgoing EP message to the <c>array</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm(Gaussian, Gaussian, IList{Gaussian}, int)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If the element at resultIndex is uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>array</c> for which a message is desired.</param>
      <returns>The outgoing VMP message to the <c>array</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>sum</c> integrated out. The formula is <c>sum_sum p(sum) factor(sum,array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SumOp_SHG09">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Sum(IList{double})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ArrayAverageConditional{Object}(Gaussian, IList{Gaussian}, int)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>array</c> for which a message is desired.</param>
      <returns>The outgoing EP message to the <c>array</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(sum) p(sum) factor(sum,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SumExceptOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.SumExcept(double[], int)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(Gaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sumExcept">Incoming message from <c>sumExcept</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sumExcept) p(sumExcept) factor(sumExcept,array,index) / sum_sumExcept p(sumExcept) messageTo(sumExcept))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SumExceptAverageConditional(IReadOnlyList{Gaussian}, int)">
      <summary>EP message to <c>sumExcept</c>.</summary>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <returns>The outgoing EP message to the <c>sumExcept</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sumExcept</c> as the random arguments are varied. The formula is <c>proj[p(sumExcept) sum_(array) p(array) factor(sumExcept,array,index)]/p(sumExcept)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{ArrayType}(Gaussian, IReadOnlyList{Gaussian}, int, ArrayType)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sumExcept">Incoming message from <c>sumExcept</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="index">Constant value for <c>index</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(sumExcept) p(sumExcept) factor(sumExcept,array,index)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sumExcept" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="SumVectorGaussianOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Sum(IList{Vector})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SumAverageConditional(IList{VectorGaussian}, VectorGaussian)">
      <summary>EP message to <c>sum</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sum</c> as the random arguments are varied. The formula is <c>proj[p(sum) sum_(array) p(array) factor(sum,array)]/p(sum)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{TVectorGaussianList}(VectorGaussian, VectorGaussian, IList{VectorGaussian}, TVectorGaussianList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(sum) p(sum) factor(sum,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional(VectorGaussian, VectorGaussian, VectorGaussian[], VectorGaussian[])">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>array</c> as the random arguments are varied. The formula is <c>proj[p(array) sum_(sum) p(sum) factor(sum,array)]/p(array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{TVectorGaussianList}(Vector, IList{VectorGaussian}, TVectorGaussianList)">
      <summary>EP message to <c>array</c>.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, IList{VectorGaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, IList{Vector})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>sum</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sum) p(sum) factor(sum,array) / sum_sum p(sum) messageTo(sum))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, IList{VectorGaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(array) p(array) factor(sum,array))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, IList{Vector})">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_sum">Outgoing message to <c>sum</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sum) p(sum) factor(sum,array))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SumAverageLogarithm(IList{VectorGaussian}, VectorGaussian)">
      <summary>VMP message to <c>sum</c>.</summary>
      <param name="array">Incoming message from <c>array</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sum</c> as the random arguments are varied. The formula is <c>proj[sum_(array) p(array) factor(sum,array)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{TVectorGaussianList}(VectorGaussian, IList{VectorGaussian}, TVectorGaussianList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns>The outgoing VMP message to the <c>array</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> with <c>sum</c> integrated out. The formula is <c>sum_sum p(sum) factor(sum,array)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm1{TVectorGaussianList}(VectorGaussian, IList{VectorGaussian}, TVectorGaussianList)">
      <summary />
      <param name="sum">Incoming message from <c>sum</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_array">Previous outgoing message to <c>array</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sum" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{TVectorGaussianList}(Vector, IList{VectorGaussian}, TVectorGaussianList)">
      <summary>VMP message to <c>array</c>.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Incoming message from <c>array</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>array</c> conditioned on the given values.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, IList{Vector})">
      <summary>Evidence message for VMP.</summary>
      <param name="sum">Constant value for <c>sum</c>.</param>
      <param name="array">Constant value for <c>array</c>.</param>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sum,array))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="TruncatedGammaFromShapeAndRateOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.TruncatedGammaFromShapeAndRate(double, double, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="RateAverageConditional(double, double, double, double)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>rate</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageLogarithm(double, double, double, double)">
      <summary>VMP message to <c>rate</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>rate</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, double, double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, double, double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, Gamma, double, double)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(rate) p(rate) factor(sample,shape,rate,lowerBound,upperBound)]/p(sample)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, Gamma, double, double)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(rate) p(rate) log(factor(sample,shape,rate,lowerBound,upperBound)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageConditional(TruncatedGamma, double, double, double)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing EP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rate</c> as the random arguments are varied. The formula is <c>proj[p(rate) sum_(sample) p(sample) factor(sample,shape,rate,lowerBound,upperBound)]/p(rate)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageLogarithm(TruncatedGamma, double, double, double)">
      <summary>VMP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="lowerBound">Constant value for <c>lowerBound</c>.</param>
      <param name="upperBound">Constant value for <c>upperBound</c>.</param>
      <returns>The outgoing VMP message to the <c>rate</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>rate</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,shape,rate,lowerBound,upperBound)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="UnaryOp{DomainType}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.Random{DomainType}(Sampleable{DomainType})" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor{T}(T, T)">
      <summary>Evidence message for EP.</summary>
      <param name="random">Incoming message from <c>random</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(random,dist) p(random,dist) factor(random,dist))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor{T}(DomainType, T)">
      <summary>Evidence message for EP.</summary>
      <param name="random">Incoming message from <c>random</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(random,dist) p(random,dist) factor(random,dist))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{T}(T, T)">
      <summary>Evidence message for EP.</summary>
      <param name="random">Incoming message from <c>random</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(random,dist) p(random,dist) factor(random,dist) / sum_random p(random) messageTo(random))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{T}(DomainType, T)">
      <summary>Evidence message for EP.</summary>
      <param name="random">Incoming message from <c>random</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(random,dist) p(random,dist) factor(random,dist) / sum_random p(random) messageTo(random))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="RandomAverageConditional{T}(T)">
      <summary>EP message to <c>random</c>.</summary>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>The outgoing EP message to the <c>random</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>random</c> as the random arguments are varied. The formula is <c>proj[p(random) sum_(dist) p(dist) factor(random,dist)]/p(random)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{T}(T, T)">
      <summary>Evidence message for VMP.</summary>
      <param name="random">Incoming message from <c>random</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(random,dist) p(random,dist) log(factor(random,dist))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor{T}(DomainType, T)">
      <summary>Evidence message for VMP.</summary>
      <param name="random">Incoming message from <c>random</c>.</param>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(random,dist) p(random,dist) log(factor(random,dist))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="RandomAverageLogarithm{T}(T)">
      <summary>VMP message to <c>random</c>.</summary>
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns>The outgoing VMP message to the <c>random</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>random</c>. The formula is <c>exp(sum_(dist) p(dist) log(factor(random,dist)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DistAverageLogarithm{T, TDist}(T, TDist)">
      <summary>VMP message to <c>dist</c>.</summary>
      <param name="random">Incoming message from <c>random</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>dist</c>. The formula is <c>exp(sum_(random) p(random) log(factor(random,dist)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="RandomMaxConditional(Bernoulli)">
      <summary />
      <param name="dist">Incoming message from <c>dist</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="RandomMaxConditional(Discrete)">
      <summary />
      <param name="dist">Incoming message from <c>dist</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="dist" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="PottsIntOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Undirected.Potts(int, int, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AMaxConditional(UnnormalizedDiscrete, double, UnnormalizedDiscrete)">
      <summary />
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="logCost">Constant value for <c>logCost</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMaxConditional(UnnormalizedDiscrete, double, UnnormalizedDiscrete)">
      <summary />
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="logCost">Constant value for <c>logCost</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="PottsBoolOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Undirected.Potts(bool, bool, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AMaxConditional(Bernoulli, double)">
      <summary />
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="logCost">Constant value for <c>logCost</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMaxConditional(Bernoulli, double)">
      <summary />
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="logCost">Constant value for <c>logCost</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LinearOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Undirected.Linear(int, int, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AMaxConditional(UnnormalizedDiscrete, double, UnnormalizedDiscrete)">
      <summary />
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="logUnitCost">Constant value for <c>logUnitCost</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMaxConditional(UnnormalizedDiscrete, double, UnnormalizedDiscrete)">
      <summary />
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="logUnitCost">Constant value for <c>logUnitCost</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="LinearTruncOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Undirected.LinearTrunc(int, int, double, double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AMaxConditional(UnnormalizedDiscrete, double, double, UnnormalizedDiscrete)">
      <summary />
      <param name="B">Incoming message from <c>b</c>.</param>
      <param name="logUnitCost">Constant value for <c>logUnitCost</c>.</param>
      <param name="maxCost">Constant value for <c>maxCost</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BMaxConditional(UnnormalizedDiscrete, double, double, UnnormalizedDiscrete)">
      <summary />
      <param name="A">Incoming message from <c>a</c>.</param>
      <param name="logUnitCost">Constant value for <c>logUnitCost</c>.</param>
      <param name="maxCost">Constant value for <c>maxCost</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="UniformPlusMinusOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Factor.UniformPlusMinus(double)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio(double, Pareto)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="upperBound">Incoming message from <c>upperBound</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(upperBound) p(upperBound) factor(sample,upperBound))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageConditional(double)">
      <summary>EP message to <c>upperBound</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <returns>The outgoing EP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>upperBound</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="UpperBoundAverageLogarithm(double)">
      <summary>VMP message to <c>upperBound</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <returns>The outgoing VMP message to the <c>upperBound</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>upperBound</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="UsesEqualDefOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.UsesEqualDef{T}(T, int, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio1{T}(IList{T}, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio{T}(IList{T}, T, IList{T})">
      <summary>Evidence message for EP.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="to_Uses">Outgoing message to <c>Uses</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(Uses,Def) p(Uses,Def) factor(Uses,Def,count,Marginal) / sum_Uses p(Uses) messageTo(Uses))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalAverageConditional{T}(IReadOnlyList{T}, T, T)">
      <summary>EP message to <c>Marginal</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Marginal</c> as the random arguments are varied. The formula is <c>proj[p(Marginal) sum_(Uses,Def) p(Uses,Def) factor(Uses,Def,count,Marginal)]/p(Marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{T}(T[], T, T)">
      <summary>EP message to <c>Marginal</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Marginal</c> as the random arguments are varied. The formula is <c>proj[p(Marginal) sum_(Uses,Def) p(Uses,Def) factor(Uses,Def,count,Marginal)]/p(Marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageConditional{T}(IReadOnlyList{T}, T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,count,Marginal)]/p(Uses)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UsesAverageConditional{T}(T[], T, int, T)">
      <summary>EP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Uses</c> as the random arguments are varied. The formula is <c>proj[p(Uses) sum_(Def) p(Def) factor(Uses,Def,count,Marginal)]/p(Uses)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(IReadOnlyList{T}, T)">
      <summary>EP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>Def</c> as the random arguments are varied. The formula is <c>proj[p(Def) sum_(Uses) p(Uses) factor(Uses,Def,count,Marginal)]/p(Def)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="UsesEqualDefGibbsOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.UsesEqualDef{T}(T, int, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="GibbsEvidence{TDist}(IList{TDist}, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist}(IReadOnlyList{TDist}, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist}(IReadOnlyList{TDist}, T, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist}(IList{T}, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbsInit{TDist}(TDist)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(GibbsMarginal{TDist, T}, int, T)">
      <summary />
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(ICollection{TDist}, TDist, int, TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbsInit{TArrayType, TDef}(TDef, int, IArrayFactory{TDef, TArrayType})">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="count">Constant value for <c>count</c>.</param>
      <param name="factory" />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(GibbsMarginal{TDist, T}, T)">
      <summary />
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(IReadOnlyList{TDist}, TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="UsesEqualDefMaxOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.UsesEqualDef{T}(T, int, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="UsesMaxConditional{T}(IReadOnlyList{T}, T, int, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefMaxConditional{T}(IReadOnlyList{T}, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalMaxConditional{T}(IReadOnlyList{T}, T, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="UsesEqualDefVmpBufferOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.UsesEqualDef{T}(T, int, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MarginalAverageLogarithm{T}(IReadOnlyList{T}, T, T)">
      <summary>VMP message to <c>Marginal</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>Marginal</c>. The formula is <c>exp(sum_(Uses,Def) p(Uses,Def) log(factor(Uses,Def,count,Marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageLogarithm{T}(T, int, T)">
      <summary>VMP message to <c>Uses</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Uses</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{T}(T, T)">
      <summary>VMP message to <c>Def</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>Def</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="UsesEqualDefVmpOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.UsesEqualDef{T}(T, int, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor{T}(T)">
      <summary>Evidence message for VMP.</summary>
      <param name="to_marginal">Outgoing message to <c>marginal</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(Uses,Def,count,Marginal))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{T}(IReadOnlyList{T}, T, T)">
      <summary>VMP message to <c>Marginal</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>Marginal</c>. The formula is <c>exp(sum_(Uses,Def) p(Uses,Def) log(factor(Uses,Def,count,Marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UsesAverageLogarithm{T}(IReadOnlyList{T}, T, int, T)">
      <summary>VMP message to <c>Uses</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>Uses</c>. The formula is <c>exp(sum_(Def) p(Def) log(factor(Uses,Def,count,Marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{T}(IReadOnlyList{T}, T, T)">
      <summary>VMP message to <c>Def</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>Def</c>. The formula is <c>exp(sum_(Uses) p(Uses) log(factor(Uses,Def,count,Marginal)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="UsesEqualDefGibbsOp2{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.UsesEqualDefGibbs{T}(T, int, int, int, out T, out T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="ConditionalInit{TDist}(TDist)">
      <summary>Initialize the buffer <c>conditional</c>.</summary>
      <param name="def">Incoming message from <c>Def</c>.</param>
      <returns>Initial value of buffer <c>conditional</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Conditional{TDist}(IReadOnlyList{TDist}, TDist, TDist)">
      <summary>Update the buffer <c>conditional</c>.</summary>
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Sample{TDist}(TDist, TDist)">
      <summary>Update the buffer <c>sample</c>.</summary>
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="conditional">Buffer <c>conditional</c>.</param>
      <returns>New value of buffer <c>sample</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalEstimatorInit{TDist}(TDist, int)">
      <summary>Initialize the buffer <c>marginalEstimator</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="burnIn">Constant value for <c>burnIn</c>.</param>
      <returns>Initial value of buffer <c>marginalEstimator</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalEstimator{TDist, TAcc}(TDist, TAcc)">
      <summary>Update the buffer <c>marginalEstimator</c>.</summary>
      <param name="conditional">Buffer <c>conditional</c>.</param>
      <param name="marginalEstimator">Buffer <c>marginalEstimator</c>.</param>
      <returns>New value of buffer <c>marginalEstimator</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist}(BurnInAccumulator{TDist}, TDist)">
      <summary />
      <param name="marginalEstimator">Buffer <c>marginalEstimator</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAccInit(ICollection{T}, int, int)">
      <summary>Initialize the buffer <c>sampleAcc</c>.</summary>
      <param name="to_samples">Previous outgoing message to <c>samples</c>.</param>
      <param name="burnIn">Constant value for <c>burnIn</c>.</param>
      <param name="thin">Constant value for <c>thin</c>.</param>
      <returns>Initial value of buffer <c>sampleAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAcc(T, Accumulator{T})">
      <summary>Update the buffer <c>sampleAcc</c>.</summary>
      <param name="sample">Buffer <c>sample</c>.</param>
      <param name="sampleAcc">Buffer <c>sampleAcc</c>.</param>
      <returns>New value of buffer <c>sampleAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SamplesGibbs{TList}(Accumulator{T}, TList)">
      <summary />
      <param name="sampleAcc">Buffer <c>sampleAcc</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConditionalAccInit{TDist}(ICollection{TDist}, int, int)">
      <summary>Initialize the buffer <c>conditionalAcc</c>.</summary>
      <param name="to_conditionals">Previous outgoing message to <c>conditionals</c>.</param>
      <param name="burnIn">Constant value for <c>burnIn</c>.</param>
      <param name="thin">Constant value for <c>thin</c>.</param>
      <returns>Initial value of buffer <c>conditionalAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConditionalAcc{TDist}(TDist, Accumulator{TDist})">
      <summary>Update the buffer <c>conditionalAcc</c>.</summary>
      <param name="conditional">Buffer <c>conditional</c>.</param>
      <param name="conditionalAcc">Buffer <c>conditionalAcc</c>.</param>
      <returns>New value of buffer <c>conditionalAcc</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="ConditionalsGibbs{TDist, TDistList}(Accumulator{TDist}, TDistList)">
      <summary />
      <param name="conditionalAcc">Buffer <c>conditionalAcc</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="GibbsEvidence{TDist}(IList{TDist}, TDist, T)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="sample">Buffer <c>sample</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(TDist, T, int, T)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="sample">Buffer <c>sample</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbs{TDist}(ICollection{TDist}, TDist, int, TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>.</param>
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UsesGibbsInit{TDist}(TDist, int)">
      <summary />
      <param name="Def">Incoming message from <c>Def</c>.</param>
      <param name="resultIndex">Index of the <c>Uses</c> for which a message is desired.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(TDist, T)">
      <summary />
      <param name="def">Incoming message from <c>Def</c>.</param>
      <param name="sample">Buffer <c>sample</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist}(IReadOnlyList{TDist}, TDist)">
      <summary />
      <param name="Uses">Incoming message from <c>Uses</c>. Must be a proper distribution. If all elements are uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Uses" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariableOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.Variable{T}(T, out T)" /></description></item><item><description><see cref="Clone.VariableInit{T}(T, T, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{T}(T)">
      <summary>Evidence message for EP.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(use) p(use) factor(use,def,marginal) / sum_use p(use) messageTo(use))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{T}(T, T, T)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{TDist, T}(T, TDist)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(def) p(def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditionalInit{T}(T)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseAverageConditional{T}(T)">
      <summary>EP message to <c>use</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <returns>The outgoing EP message to the <c>use</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>use</c> as the random arguments are varied. The formula is <c>proj[p(use) sum_(def) p(def) factor(use,def,marginal)]/p(use)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(T)">
      <summary>EP message to <c>def</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <returns>The outgoing EP message to the <c>def</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>def</c> as the random arguments are varied. The formula is <c>proj[p(def) sum_(use) p(use) factor(use,def,marginal)]/p(def)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariableVmpOp{T}">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.Variable{T}(T, out T)" /></description></item><item><description><see cref="Clone.VariableInit{T}(T, T, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor{TDist}(TDist)">
      <summary>Evidence message for VMP.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(use,def,marginal))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{TDist}(TDist, TDist, TDist)">
      <summary>VMP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>marginal</c>. The formula is <c>exp(sum_(use,def) p(use,def) log(factor(use,def,marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{TDist}(T, TDist)">
      <summary>VMP message to <c>marginal</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>marginal</c>. The formula is <c>exp(sum_(def) p(def) log(factor(use,def,marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithmInit{TDist}(TDist)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithm{TDist}(TDist, TDist)">
      <summary>VMP message to <c>use</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>use</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithm(T)">
      <summary>VMP message to <c>use</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <returns>The outgoing VMP message to the <c>use</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>use</c>. The formula is <c>exp(sum_(def) p(def) log(factor(use,def,marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithmInit{TDist}(TDist)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{TDist}(TDist, TDist)">
      <summary>VMP message to <c>def</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>def</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariableGibbsOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariableGibbs{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="GibbsEvidence{TDist, T}(TDist, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="marginal">Incoming message from <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist, T}(TDist, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="Def">Incoming message from <c>def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist, T}(T, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="Def">Incoming message from <c>def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UseGibbs{TDist, T}(GibbsMarginal{TDist, T}, T)">
      <summary />
      <param name="marginal">Incoming message from <c>marginal</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="marginal" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UseGibbs{TDist, Object}(TDist, TDist)">
      <summary />
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist, T}(GibbsMarginal{TDist, T}, T)">
      <summary />
      <param name="marginal">Incoming message from <c>marginal</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="marginal" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="DefGibbs{TDist, T}(TDist, TDist)">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariableMaxOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariableMax{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="UseMaxConditional{TDist}(TDist, TDist)">
      <summary />
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseMaxConditionalInit{TDist}(TDist)">
      <summary />
      <param name="Def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseMaxConditional{TDist}(T, TDist)">
      <summary />
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseMaxConditional(T)">
      <summary />
      <param name="Def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefMaxConditional{TDist}(TDist)">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalMaxConditional{TDist}(TDist, TDist, TDist)">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalMaxConditionalInit{TDist}(TDist)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalMaxConditional{TDist}(T, TDist)">
      <summary />
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DerivedVariableOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.DerivedVariable{T}(T, out T)" /></description></item><item><description><see cref="Clone.DerivedVariableInit{T}(T, T, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor()">
      <summary>Evidence message for EP.</summary>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(use,def,marginal))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio{T}(T)">
      <summary>Evidence message for EP.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(use) p(use) factor(use,def,marginal) / sum_use p(use) messageTo(use))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{T}(T, T, T)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional{TDist, T}(T, TDist)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(def) p(def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditionalInit{T}(T)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseAverageConditional{TDist, T}(T, TDist)">
      <summary>EP message to <c>use</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>use</c> as the random arguments are varied. The formula is <c>proj[p(use) sum_(def) p(def) factor(use,def,marginal)]/p(use)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UseAverageConditional{T}(T)">
      <summary>EP message to <c>use</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <returns>The outgoing EP message to the <c>use</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>use</c> as the random arguments are varied. The formula is <c>proj[p(use) sum_(def) p(def) factor(use,def,marginal)]/p(use)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageConditional{T}(T)">
      <summary>EP message to <c>def</c>.</summary>
      <param name="Use">Incoming message from <c>use</c>.</param>
      <returns>The outgoing EP message to the <c>def</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>def</c> as the random arguments are varied. The formula is <c>proj[p(def) sum_(use) p(use) factor(use,def,marginal)]/p(def)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DerivedVariableGibbsOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.DerivedVariableGibbs{T}(T, out T)" /></description></item><item><description><see cref="Clone.DerivedVariableInitGibbs{T}(T, T, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="GibbsEvidence()">
      <summary />
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseGibbs{TDist, T}(GibbsMarginal{TDist, T}, TDist, T)">
      <summary />
      <param name="marginal">Incoming message from <c>marginal</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="marginal" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="UseGibbs{T}(T, T)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist, Object}(TDist)">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefGibbs{TDist, T}(GibbsMarginal{TDist, T}, T)">
      <summary />
      <param name="marginal">Incoming message from <c>marginal</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="marginal" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist, T}(TDist, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="Def">Incoming message from <c>def</c>. Must be a proper distribution. If uniform, the result will be uniform.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Def" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist, T}(T, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalGibbs{TDist, T}(T, TDist, GibbsMarginal{TDist, T})">
      <summary />
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="DerivedVariableVmpOp{T}">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="Clone.DerivedVariableVmp{T}(T, out T)" /></description></item><item><description><see cref="Clone.DerivedVariableInitVmp{T}(T, T, out T)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(use,def,marginal))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{TDist}(TDist, TDist)">
      <summary>VMP message to <c>marginal</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>marginal</c>. The formula is <c>exp(sum_(def) p(def) log(factor(use,def,marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{TDist, TPoint}(TPoint, TDist)">
      <summary>VMP message to <c>marginal</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>marginal</c>. The formula is <c>exp(sum_(def) p(def) log(factor(use,def,marginal)))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithmInit{TDist}(TDist)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithm{TDist}(TDist, TDist)">
      <summary>VMP message to <c>use</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>use</c> as the random arguments are varied. The formula is <c>proj[sum_(def) p(def) factor(use,def,marginal)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithm{TDist, TPoint}(TPoint, TDist)">
      <summary>VMP message to <c>use</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>use</c> as the random arguments are varied. The formula is <c>proj[sum_(def) p(def) factor(use,def,marginal)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithm(T)">
      <summary>VMP message to <c>use</c>.</summary>
      <param name="Def">Incoming message from <c>def</c>.</param>
      <returns>The outgoing VMP message to the <c>use</c> argument.</returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>use</c> as the random arguments are varied. The formula is <c>proj[sum_(def) p(def) factor(use,def,marginal)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithmInit{TDist}(TDist)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{TDist}(TDist, TDist)">
      <summary>VMP message to <c>def</c>.</summary>
      <param name="Use">Incoming message from <c>use</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>def</c> with <c>use</c> integrated out. The formula is <c>sum_use p(use) factor(use,def,marginal)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOp{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MarginalAverageConditional{TDist}(TDist, TDist, TDist)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{TDist}(TDist, TDist, TDist)">
      <summary>VMP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>marginal</c>. The formula is <c>exp(sum_(use,def) p(use,def) log(factor(use,def,marginal)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOpBase">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogEvidenceRatio{TDist}(TDist, TDist, TDist)">
      <summary>Evidence message for EP.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(use,def) p(use,def) factor(use,def,marginal) / sum_use p(use) messageTo(use))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditionalInit{TDist}(TDist)">
      <summary />
      <param name="def">Incoming message from <c>def</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="UseAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>use</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns>The outgoing EP message to the <c>use</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>use</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageConditional{TDist}(TDist)">
      <summary>EP message to <c>def</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns>The outgoing EP message to the <c>def</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>def</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(use,def,marginal))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="UseAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>use</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns>The outgoing VMP message to the <c>use</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>use</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="DefAverageLogarithm{TDist}(TDist)">
      <summary>VMP message to <c>def</c>.</summary>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <returns>The outgoing VMP message to the <c>def</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>def</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOp_Mean{T}">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="MarginalAverageConditional{TDist}(TDist, TDist, TDist)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageLogarithm{TDist}(TDist, TDist, TDist)">
      <summary>VMP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>marginal</c>. The formula is <c>exp(sum_(use,def) p(use,def) log(factor(use,def,marginal)))</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOp_Rprop">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="BufferInit()">
      <summary>Initialize the buffer <c>buffer</c>.</summary>
      <returns>Initial value of buffer <c>buffer</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Buffer(Gaussian, Gaussian, Gaussian, RpropBufferData)">
      <summary>Update the buffer <c>buffer</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="buffer">Buffer <c>buffer</c>.</param>
      <returns>New value of buffer <c>buffer</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional(Gaussian, Gaussian, RpropBufferData, Gaussian)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="buffer">Buffer <c>buffer</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOp_RpropTruncatedGaussian">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="BufferTGInit()">
      <summary>Initialize the buffer <c>bufferTG</c>.</summary>
      <returns>Initial value of buffer <c>bufferTG</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BufferTG(TruncatedGaussian, TruncatedGaussian, TruncatedGaussian, RpropBufferData)">
      <summary>Update the buffer <c>bufferTG</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="bufferTG">Buffer <c>bufferTG</c>.</param>
      <returns>New value of buffer <c>bufferTG</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional(TruncatedGaussian, TruncatedGaussian, RpropBufferData, TruncatedGaussian)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="bufferTG">Buffer <c>bufferTG</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOp_RpropTruncatedGamma">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="BufferTGaInit()">
      <summary>Initialize the buffer <c>bufferTGa</c>.</summary>
      <returns>Initial value of buffer <c>bufferTGa</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BufferTGa(TruncatedGamma, TruncatedGamma, TruncatedGamma, RpropBufferData)">
      <summary>Update the buffer <c>bufferTGa</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="bufferTGa">Buffer <c>bufferTGa</c>.</param>
      <returns>New value of buffer <c>bufferTGa</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional(TruncatedGamma, TruncatedGamma, RpropBufferData, TruncatedGamma)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="bufferTGa">Buffer <c>bufferTGa</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOp_RpropGamma">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="Buffer0Init()">
      <summary>Initialize the buffer <c>buffer0</c>.</summary>
      <returns>Initial value of buffer <c>buffer0</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="Buffer0(Gamma, Gamma, Gamma, RpropBufferData)">
      <summary>Update the buffer <c>buffer0</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="buffer0">Buffer <c>buffer0</c>.</param>
      <returns>New value of buffer <c>buffer0</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional(Gamma, Gamma, RpropBufferData, Gamma)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="buffer0">Buffer <c>buffer0</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VariablePointOp_RpropBeta">
    <doc>
      <summary>Provides outgoing messages for <see cref="Clone.VariablePoint{T}(T, out T)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="BufferBetaInit()">
      <summary>Initialize the buffer <c>bufferBeta</c>.</summary>
      <returns>Initial value of buffer <c>bufferBeta</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="BufferBeta(Beta, Beta, Beta, RpropBufferData)">
      <summary>Update the buffer <c>bufferBeta</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="to_marginal">Previous outgoing message to <c>marginal</c>.</param>
      <param name="bufferBeta">Buffer <c>bufferBeta</c>.</param>
      <returns>New value of buffer <c>bufferBeta</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MarginalAverageConditional(Beta, Beta, RpropBufferData, Beta)">
      <summary>EP message to <c>marginal</c>.</summary>
      <param name="use">Incoming message from <c>use</c>.</param>
      <param name="def">Incoming message from <c>def</c>.</param>
      <param name="bufferBeta">Buffer <c>bufferBeta</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>marginal</c> as the random arguments are varied. The formula is <c>proj[p(marginal) sum_(use,def) p(use,def) factor(use,def,marginal)]/p(marginal)</c>.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VectorFromArrayOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Vector.FromArray(double[])" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Vector, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="vector">Constant value for <c>fromArray</c>.</param>
      <param name="array">Constant value for <c>data</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(fromArray,data))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, double[])">
      <summary>Evidence message for EP.</summary>
      <param name="vector">Constant value for <c>fromArray</c>.</param>
      <param name="array">Constant value for <c>data</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(fromArray,data))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="vector">Constant value for <c>fromArray</c>.</param>
      <param name="array">Incoming message from <c>data</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(data) p(data) factor(fromArray,data))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, IList{Gaussian})">
      <summary>Evidence message for EP.</summary>
      <param name="vector">Constant value for <c>fromArray</c>.</param>
      <param name="array">Incoming message from <c>data</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(data) p(data) factor(fromArray,data))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="vector">Incoming message from <c>fromArray</c>.</param>
      <param name="to_vector">Outgoing message to <c>vector</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(fromArray) p(fromArray) factor(fromArray,data))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="vector">Incoming message from <c>fromArray</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(fromArray) p(fromArray) factor(fromArray,data) / sum_fromArray p(fromArray) messageTo(fromArray))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor()">
      <summary>Evidence message for VMP.</summary>
      <returns>Zero.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(fromArray,data))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageConditional(IList{Gaussian}, VectorGaussian)">
      <summary>EP message to <c>fromArray</c>.</summary>
      <param name="array">Incoming message from <c>data</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>fromArray</c> as the random arguments are varied. The formula is <c>proj[p(fromArray) sum_(data) p(data) factor(fromArray,data)]/p(fromArray)</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageConditionalInit(IList{Gaussian})">
      <summary />
      <param name="array">Incoming message from <c>data</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageLogarithmInit(IList{Gaussian})">
      <summary />
      <param name="array">Incoming message from <c>data</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="VectorAverageLogarithm(IList{Gaussian}, VectorGaussian)">
      <summary>VMP message to <c>fromArray</c>.</summary>
      <param name="array">Incoming message from <c>data</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>fromArray</c> as the random arguments are varied. The formula is <c>proj[sum_(data) p(data) factor(fromArray,data)]</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageConditional{GaussianList}(VectorGaussian, IList{Gaussian}, GaussianList)">
      <summary>EP message to <c>data</c>.</summary>
      <param name="vector">Incoming message from <c>fromArray</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>data</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>data</c> as the random arguments are varied. The formula is <c>proj[p(data) sum_(fromArray) p(fromArray) factor(fromArray,data)]/p(data)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="vector" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{GaussianList}(VectorGaussian, IList{Gaussian}, GaussianList)">
      <summary>VMP message to <c>data</c>.</summary>
      <param name="vector">Incoming message from <c>fromArray</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="array">Incoming message from <c>data</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>data</c> with <c>fromArray</c> integrated out. The formula is <c>sum_fromArray p(fromArray) factor(fromArray,data)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="vector" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="array" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="ArrayAverageConditional{GaussianList}(Vector, GaussianList)">
      <summary>EP message to <c>data</c>.</summary>
      <param name="vector">Constant value for <c>fromArray</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>data</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="ArrayAverageLogarithm{GaussianList}(Vector, GaussianList)">
      <summary>VMP message to <c>data</c>.</summary>
      <param name="vector">Constant value for <c>fromArray</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>data</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="VectorGaussianOp">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="VectorGaussian.Sample(Vector, PositiveDefiniteMatrix)" /></description></item><item><description><see cref="Factor.VectorGaussian(Vector, PositiveDefiniteMatrix)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="SampleVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>SampleVariance</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>.</param>
      <returns>Initial value of buffer <c>SampleVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>SampleVariance</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>SampleMean</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>.</param>
      <returns>Initial value of buffer <c>SampleMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>SampleMean</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanVarianceInit(VectorGaussian)">
      <summary>Initialize the buffer <c>MeanVariance</c>.</summary>
      <param name="Mean">Incoming message from <c>mean</c>.</param>
      <returns>Initial value of buffer <c>MeanVariance</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MeanVariance(VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>MeanVariance</c>.</summary>
      <param name="Mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanMeanInit(VectorGaussian)">
      <summary>Initialize the buffer <c>MeanMean</c>.</summary>
      <param name="Mean">Incoming message from <c>mean</c>.</param>
      <returns>Initial value of buffer <c>MeanMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MeanMean(VectorGaussian, PositiveDefiniteMatrix, Vector)">
      <summary>Update the buffer <c>MeanMean</c>.</summary>
      <param name="Mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionMeanInit(Wishart)">
      <summary>Initialize the buffer <c>PrecisionMean</c>.</summary>
      <param name="Precision">Incoming message from <c>precision</c>.</param>
      <returns>Initial value of buffer <c>PrecisionMean</c>.</returns>
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="PrecisionMean(Wishart, PositiveDefiniteMatrix)">
      <summary>Update the buffer <c>PrecisionMean</c>.</summary>
      <param name="Precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionMeanLogDet(Wishart)">
      <summary>Update the buffer <c>PrecisionMeanLogDet</c>.</summary>
      <param name="Precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>New value of buffer <c>PrecisionMeanLogDet</c>.</returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleConditional(Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>Gibbs message to <c>sample</c>.</summary>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanConditional(Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>Gibbs message to <c>mean</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PrecisionConditional(Vector, Vector, Wishart, Vector)">
      <summary>Gibbs message to <c>precision</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <param name="diff" />
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precision</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PrecisionConditional(Vector, Vector, Wishart)">
      <summary>Gibbs message to <c>precision</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precision</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Vector, Vector, PositiveDefiniteMatrix, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, VectorGaussian, Vector, PositiveDefiniteMatrix, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian, VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(VectorGaussian, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="Mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean) p(mean) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(Vector)">
      <summary />
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditionalInit(VectorGaussian)">
      <summary />
      <param name="Mean">Incoming message from <c>mean</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(VectorGaussian, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample) p(sample) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(Vector, Vector, Wishart)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precision</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(VectorGaussian, Vector, PositiveDefiniteMatrix, VectorGaussian, Vector, PositiveDefiniteMatrix, Wishart, PositiveDefiniteMatrix, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precisionMean">Buffer <c>precisionMean</c>.</param>
      <param name="precisionMeanLogDet">Buffer <c>precisionMeanLogDet</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,mean,precision) p(sample,mean,precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector, Wishart, PositiveDefiniteMatrix, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precisionMean">Buffer <c>precisionMean</c>.</param>
      <param name="precisionMeanLogDet">Buffer <c>precisionMeanLogDet</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(precision) p(precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(VectorGaussian, Vector, PositiveDefiniteMatrix, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, VectorGaussian, Vector, PositiveDefiniteMatrix, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean) p(mean) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, VectorGaussian, Vector, PositiveDefiniteMatrix, Wishart, PositiveDefiniteMatrix, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precisionMean">Buffer <c>precisionMean</c>.</param>
      <param name="precisionMeanLogDet">Buffer <c>precisionMeanLogDet</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean,precision) p(mean,precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(VectorGaussian, Vector, PositiveDefiniteMatrix, Vector, Wishart, PositiveDefiniteMatrix, double)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precisionMean">Buffer <c>precisionMean</c>.</param>
      <param name="precisionMeanLogDet">Buffer <c>precisionMeanLogDet</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,precision) p(sample,precision) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="AverageLogFactor(VectorGaussian, Vector, PositiveDefiniteMatrix, VectorGaussian, Vector, PositiveDefiniteMatrix, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="precision">Constant value for <c>precision</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,mean) p(sample,mean) log(factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(VectorGaussian, Vector, Wishart, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="Mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="Precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="PrecisionMean">Buffer <c>PrecisionMean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(mean,precision) p(mean,precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="Precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(VectorGaussian, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Vector, Wishart, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="Precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="PrecisionMean">Buffer <c>PrecisionMean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(precision) p(precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(Vector)">
      <summary />
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithmInit(VectorGaussian)">
      <summary />
      <param name="Mean">Incoming message from <c>mean</c>.</param>
      <returns />
      <remarks>
        <para />
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(VectorGaussian, Vector, Wishart, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="Precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="PrecisionMean">Buffer <c>PrecisionMean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(sample,precision) p(sample,precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="Precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(VectorGaussian, Vector, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="Precision">Constant value for <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Vector, Wishart, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="PrecisionMean">Buffer <c>PrecisionMean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>mean</c>. The formula is <c>exp(sum_(precision) p(precision) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(Vector, Vector, Wishart)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>precision</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(VectorGaussian, Vector, PositiveDefiniteMatrix, VectorGaussian, Vector, PositiveDefiniteMatrix, Wishart)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="Mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precision</c>. The formula is <c>exp(sum_(sample,mean) p(sample,mean) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="Mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(Vector, VectorGaussian, Vector, PositiveDefiniteMatrix, Wishart)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="Sample">Constant value for <c>sample</c>.</param>
      <param name="Mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="MeanMean">Buffer <c>MeanMean</c>.</param>
      <param name="MeanVariance">Buffer <c>MeanVariance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precision</c>. The formula is <c>exp(sum_(mean) p(mean) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageLogarithm(VectorGaussian, Vector, PositiveDefiniteMatrix, Vector, Wishart)">
      <summary>VMP message to <c>precision</c>.</summary>
      <param name="Sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="SampleMean">Buffer <c>SampleMean</c>.</param>
      <param name="SampleVariance">Buffer <c>SampleVariance</c>.</param>
      <param name="Mean">Constant value for <c>mean</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>precision</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,mean,precision)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="Sample" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="VectorGaussianOp_Laplace2">
    <doc>
      <summary>Provides outgoing messages for the following factors:<list type="bullet"><item><description><see cref="VectorGaussian.Sample(Vector, PositiveDefiniteMatrix)" /></description></item><item><description><see cref="Factor.VectorGaussian(Vector, PositiveDefiniteMatrix)" /></description></item></list>, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Vector, VectorGaussian, Wishart, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,precision) p(mean,precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, VectorGaussian, Wishart, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean,precision) p(mean,precision) factor(sample,mean,precision))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian, Wishart, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian, VectorGaussian, Wishart, Wishart, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="to_sample">Previous outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean,precision) p(sample,mean,precision) factor(sample,mean,precision) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(VectorGaussian, Wishart, Wishart, VectorGaussian)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean,precision) p(mean,precision) factor(sample,mean,precision)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(VectorGaussian, Wishart, Wishart, VectorGaussian)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample,precision) p(sample,precision) factor(sample,mean,precision)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="PrecisionAverageConditional(VectorGaussian, VectorGaussian, Wishart, Wishart, Wishart)">
      <summary>EP message to <c>precision</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="precision">Incoming message from <c>precision</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_precision">Previous outgoing message to <c>precision</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>precision</c> as the random arguments are varied. The formula is <c>proj[p(precision) sum_(sample,mean) p(sample,mean) factor(sample,mean,precision)]/p(precision)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="precision" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="VectorGaussianFromMeanAndVarianceOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="VectorGaussian.SampleFromMeanAndVariance(Vector, PositiveDefiniteMatrix)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Vector, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian, VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,mean) p(sample,mean) factor(sample,mean,variance) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(VectorGaussian, VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Vector, VectorGaussian, VectorGaussian)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="to_mean">Outgoing message to <c>mean</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(mean) p(mean) log(factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(VectorGaussian, VectorGaussian)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,variance))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Vector, VectorGaussian, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="mean">Incoming message from <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(mean) p(mean) factor(sample,mean,variance))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(VectorGaussian, Vector, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,mean,variance) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(Vector, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageLogarithm(Vector, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing VMP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(Vector, PositiveDefiniteMatrix)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Constant value for <c>mean</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="MeanAverageConditional(Vector, PositiveDefiniteMatrix)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <returns>The outgoing EP message to the <c>mean</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>mean</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(VectorGaussian, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="mean">Incoming message from <c>mean</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(mean) p(mean) factor(sample,mean,variance)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="mean" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="MeanAverageConditional(VectorGaussian, PositiveDefiniteMatrix, VectorGaussian)">
      <summary>EP message to <c>mean</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="variance">Constant value for <c>variance</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>mean</c> as the random arguments are varied. The formula is <c>proj[p(mean) sum_(sample) p(sample) factor(sample,mean,variance)]/p(mean)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
  <message_op_class name="WishartFromShapeAndScaleOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Wishart.SampleFromShapeAndScale(double, PositiveDefiniteMatrix)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(PositiveDefiniteMatrix, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,scale))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(PositiveDefiniteMatrix, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,scale))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Wishart, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,scale) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(PositiveDefiniteMatrix, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,scale))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Wishart, Wishart)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample) p(sample) log(factor(sample,shape,scale))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Wishart, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,scale))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, PositiveDefiniteMatrix)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>The outgoing VMP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, PositiveDefiniteMatrix)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="scale">Constant value for <c>scale</c>.</param>
      <returns>The outgoing EP message to the <c>sample</c> argument.</returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="WishartFromShapeAndRateOp">
    <doc>
      <summary>Provides outgoing messages for <see cref="Wishart.SampleFromShapeAndRate(double, PositiveDefiniteMatrix)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(PositiveDefiniteMatrix, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(PositiveDefiniteMatrix, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(PositiveDefiniteMatrix, double, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(rate) p(rate) factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(PositiveDefiniteMatrix, double, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(rate) p(rate) factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Wishart, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,rate) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageConditional(PositiveDefiniteMatrix, double, Wishart)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>rate</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(PositiveDefiniteMatrix, double, PositiveDefiniteMatrix)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Constant value for <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogAverageFactor(Wishart, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample) p(sample) factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="AverageLogFactor(Wishart, double, Wishart)">
      <summary>Evidence message for VMP.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <returns>Average of the factor's log-value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>sum_(sample,rate) p(sample,rate) log(factor(sample,shape,rate))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for VMP.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, PositiveDefiniteMatrix, Wishart)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
    <message_doc name="SampleAverageLogarithm(double, Wishart, Wishart)">
      <summary>VMP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>sample</c>. The formula is <c>exp(sum_(rate) p(rate) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="RateAverageLogarithm(Wishart, double, Wishart)">
      <summary>VMP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the exponential of the average log-factor value, where the average is over all arguments except <c>rate</c>. The formula is <c>exp(sum_(sample) p(sample) log(factor(sample,shape,rate)))</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(double, PositiveDefiniteMatrix, Wishart)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Constant value for <c>rate</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is the factor viewed as a function of <c>sample</c> conditioned on the given values.</para>
      </remarks>
    </message_doc>
  </message_op_class>
  <message_op_class name="WishartFromShapeAndRateOp_Laplace2">
    <doc>
      <summary>Provides outgoing messages for <see cref="Wishart.SampleFromShapeAndRate(double, PositiveDefiniteMatrix)" />, given random arguments to the function.</summary>
    </doc>
    <message_doc name="LogAverageFactor(Wishart, double, Wishart, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's average value across the given argument distributions.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,rate) p(sample,rate) factor(sample,shape,rate))</c>.</para>
      </remarks>
    </message_doc>
    <message_doc name="LogEvidenceRatio(Wishart, double, Wishart, Wishart)">
      <summary>Evidence message for EP.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <param name="to_sample">Outgoing message to <c>sample</c>.</param>
      <returns>Logarithm of the factor's contribution the EP model evidence.</returns>
      <remarks>
        <para>The formula for the result is <c>log(sum_(sample,rate) p(sample,rate) factor(sample,shape,rate) / sum_sample p(sample) messageTo(sample))</c>. Adding up these values across all factors and variables gives the log-evidence estimate for EP.</para>
      </remarks>
    </message_doc>
    <message_doc name="RateAverageConditional(Wishart, double, Wishart, Wishart, Wishart)">
      <summary>EP message to <c>rate</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>.</param>
      <param name="to_rate">Previous outgoing message to <c>rate</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>rate</c> as the random arguments are varied. The formula is <c>proj[p(rate) sum_(sample) p(sample) factor(sample,shape,rate)]/p(rate)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="sample" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional2(double, Wishart, Wishart, Wishart)">
      <summary />
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_rate">Previous outgoing message to <c>rate</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para />
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
    <message_doc name="SampleAverageConditional(Wishart, double, Wishart, Wishart, Wishart, Wishart)">
      <summary>EP message to <c>sample</c>.</summary>
      <param name="sample">Incoming message from <c>sample</c>.</param>
      <param name="shape">Constant value for <c>shape</c>.</param>
      <param name="rate">Incoming message from <c>rate</c>. Must be a proper distribution. If any element is uniform, the result will be uniform.</param>
      <param name="to_rate">Previous outgoing message to <c>rate</c>.</param>
      <param name="to_sample">Previous outgoing message to <c>sample</c>.</param>
      <param name="result">Modified to contain the outgoing message.</param>
      <returns>
        <paramref name="result" />
      </returns>
      <remarks>
        <para>The outgoing message is a distribution matching the moments of <c>sample</c> as the random arguments are varied. The formula is <c>proj[p(sample) sum_(rate) p(rate) factor(sample,shape,rate)]/p(sample)</c>.</para>
      </remarks>
      <exception cref="ImproperMessageException">
        <paramref name="rate" /> is not a proper distribution.</exception>
    </message_doc>
  </message_op_class>
</factor_docs>