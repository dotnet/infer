// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using System.Collections.Generic;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Microsoft.ML.Probabilistic.Learners.MatchboxRecommenderInternal
{
	public partial class MatchboxRatingPrediction_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the AffinityNoiseVariance property</summary>
		private double AffinityNoiseVariance_field;
		/// <summary>True if Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27 has executed. Set this to false to force re-execution of Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27</summary>
		public bool Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone;
		/// <summary>True if Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29 has executed. Set this to false to force re-execution of Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29</summary>
		public bool Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone;
		/// <summary>True if Changed_ItemBiasPrior has executed. Set this to false to force re-execution of Changed_ItemBiasPrior</summary>
		public bool Changed_ItemBiasPrior_isDone;
		/// <summary>True if Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26 has executed. Set this to false to force re-execution of Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26</summary>
		public bool Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone;
		/// <summary>True if Changed_ItemBiasPrior_ItemIds_ObservationCount has executed. Set this to false to force re-execution of Changed_ItemBiasPrior_ItemIds_ObservationCount</summary>
		public bool Changed_ItemBiasPrior_ItemIds_ObservationCount_isDone;
		/// <summary>True if Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds has executed. Set this to false to force re-execution of Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds</summary>
		public bool Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone;
		/// <summary>True if Changed_ItemIds_ItemTraitsPrior_ObservationCount has executed. Set this to false to force re-execution of Changed_ItemIds_ItemTraitsPrior_ObservationCount</summary>
		public bool Changed_ItemIds_ItemTraitsPrior_ObservationCount_isDone;
		/// <summary>True if Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount has executed. Set this to false to force re-execution of Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount</summary>
		public bool Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_isDone;
		/// <summary>True if Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior has executed. Set this to false to force re-execution of Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior</summary>
		public bool Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone;
		/// <summary>True if Changed_ItemTraitsPrior has executed. Set this to false to force re-execution of Changed_ItemTraitsPrior</summary>
		public bool Changed_ItemTraitsPrior_isDone;
		/// <summary>True if Changed_ObservationCount has executed. Set this to false to force re-execution of Changed_ObservationCount</summary>
		public bool Changed_ObservationCount_isDone;
		/// <summary>True if Changed_ObservationCount_TraitCount has executed. Set this to false to force re-execution of Changed_ObservationCount_TraitCount</summary>
		public bool Changed_ObservationCount_TraitCount_isDone;
		/// <summary>True if Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior has executed. Set this to false to force re-execution of Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior</summary>
		public bool Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone;
		/// <summary>True if Changed_ObservationCount_UserBiasPrior_UserIds has executed. Set this to false to force re-execution of Changed_ObservationCount_UserBiasPrior_UserIds</summary>
		public bool Changed_ObservationCount_UserBiasPrior_UserIds_isDone;
		/// <summary>True if Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28 has executed. Set this to false to force re-execution of Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28</summary>
		public bool Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone;
		/// <summary>True if Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds</summary>
		public bool Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone;
		/// <summary>True if Changed_ObservationCount_UserIds_UserTraitsPrior has executed. Set this to false to force re-execution of Changed_ObservationCount_UserIds_UserTraitsPrior</summary>
		public bool Changed_ObservationCount_UserIds_UserTraitsPrior_isDone;
		/// <summary>True if Changed_ObservationCount_UserThresholdCount has executed. Set this to false to force re-execution of Changed_ObservationCount_UserThresholdCount</summary>
		public bool Changed_ObservationCount_UserThresholdCount_isDone;
		/// <summary>True if Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds</summary>
		public bool Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone;
		/// <summary>True if Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds</summary>
		public bool Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds_isDone;
		/// <summary>True if Changed_ObservationCount_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_ObservationCount_UseSharedUserThresholds</summary>
		public bool Changed_ObservationCount_UseSharedUserThresholds_isDone;
		/// <summary>True if Changed_UserBiasPrior has executed. Set this to false to force re-execution of Changed_UserBiasPrior</summary>
		public bool Changed_UserBiasPrior_isDone;
		/// <summary>True if Changed_UserThresholdCount has executed. Set this to false to force re-execution of Changed_UserThresholdCount</summary>
		public bool Changed_UserThresholdCount_isDone;
		/// <summary>True if Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds</summary>
		public bool Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone;
		/// <summary>True if Changed_UserThresholdCount_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_UserThresholdCount_UseSharedUserThresholds</summary>
		public bool Changed_UserThresholdCount_UseSharedUserThresholds_isDone;
		/// <summary>True if Changed_UserThresholdsPrior has executed. Set this to false to force re-execution of Changed_UserThresholdsPrior</summary>
		public bool Changed_UserThresholdsPrior_isDone;
		/// <summary>True if Changed_UserThresholdsPrior_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_UserThresholdsPrior_UseSharedUserThresholds</summary>
		public bool Changed_UserThresholdsPrior_UseSharedUserThresholds_isDone;
		/// <summary>True if Changed_UserTraitsPrior has executed. Set this to false to force re-execution of Changed_UserTraitsPrior</summary>
		public bool Changed_UserTraitsPrior_isDone;
		/// <summary>True if Changed_UseSharedUserThresholds has executed. Set this to false to force re-execution of Changed_UseSharedUserThresholds</summary>
		public bool Changed_UseSharedUserThresholds_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public int[] CurrentRating_reduced;
		public DistributionStructArray<Gaussian,double> ItemBias_itemItemIds_observation__F;
		/// <summary>Message from use of 'ItemBias'</summary>
		public DistributionStructArray<Gaussian,double> ItemBias_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> ItemBias_use_F_marginal;
		public Gaussian[] itemBiasObs_B;
		/// <summary>Field backing the ItemBiasPrior property</summary>
		private DistributionStructArray<Gaussian,double> ItemBiasPrior_field;
		/// <summary>Field backing the ItemCount property</summary>
		private int ItemCount_field;
		/// <summary>Field backing the ItemIds property</summary>
		private IReadOnlyList<int> ItemIds_field;
		public DistributionStructArray<Gaussian,double>[] itemTrait_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraits_itemItemIds_observation__F;
		/// <summary>Message from use of 'ItemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraits_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraits_use_F_marginal;
		/// <summary>Field backing the ItemTraitsPrior property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsPrior_field;
		public int[] NextRating_reduced;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the ObservationCount property</summary>
		private int ObservationCount_field;
		public Discrete Ratings_F_reduced;
		/// <summary>Message to marginal of 'Ratings'</summary>
		public DistributionRefArray<Discrete,int> Ratings_marginal_F;
		public DistributionStructArray<Bernoulli,bool>[] Ratings_observation__selector_cases_B;
		/// <summary>Messages from uses of 'Ratings_observation__selector_cases'</summary>
		public Bernoulli[][][] Ratings_observation__selector_cases_uses_B;
		/// <summary>Messages from uses of 'Ratings_observation__selector'</summary>
		public Discrete[][] Ratings_observation__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Discrete&gt;</summary>
		public Discrete[] Ratings_observation__selector_uses_B_toDef;
		/// <summary>Field backing the TraitCount property</summary>
		private int TraitCount_field;
		/// <summary>Buffer for IsBetweenGaussianOp.LogEvidenceRatio</summary>
		public double[][] true_logZ;
		public DistributionStructArray<Gaussian,double> UserBias_itemUserIds_observation__F;
		/// <summary>Message from use of 'UserBias'</summary>
		public DistributionStructArray<Gaussian,double> UserBias_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> UserBias_use_F_marginal;
		public Gaussian[] userBiasObs_B;
		/// <summary>Field backing the UserBiasPrior property</summary>
		private DistributionStructArray<Gaussian,double> UserBiasPrior_field;
		/// <summary>Field backing the UserCount property</summary>
		private int UserCount_field;
		/// <summary>Field backing the UserIds property</summary>
		private IReadOnlyList<int> UserIds_field;
		/// <summary>Field backing the UserThresholdCount property</summary>
		private int UserThresholdCount_field;
		/// <summary>Field backing the UserThresholdNoiseVariance property</summary>
		private double UserThresholdNoiseVariance_field;
		public DistributionStructArray<Gaussian,double>[] UserThresholds_0__gi_0__F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[] UserThresholds_depth2_rep_B_toDef;
		public Gaussian[][] UserThresholds_depth2_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[] UserThresholds_depth2_rep_F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholds_itemUserIds_observation__F;
		/// <summary>Message from use of 'UserThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholds_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholds_use_F_marginal;
		public DistributionStructArray<Gaussian,double>[] UserThresholdsObs_B;
		public Gaussian UserThresholdsObs_B_reduced;
		public DistributionStructArray<Gaussian,double>[] UserThresholdsObs_F;
		/// <summary>Field backing the UserThresholdsPrior property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsPrior_field;
		public DistributionStructArray<Gaussian,double>[] userTrait_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraits_itemUserIds_observation__F;
		/// <summary>Message from use of 'UserTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraits_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraits_use_F_marginal;
		/// <summary>Field backing the UserTraitsPrior property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsPrior_field;
		/// <summary>Field backing the UseSharedUserThresholds property</summary>
		private bool UseSharedUserThresholds_field;
		public bool vbool9_reduced;
		public DistributionStructArray<Gaussian,double>[] vdouble__78_F;
		public DistributionStructArray<Gaussian,double>[] vdouble__88_F;
		public DistributionStructArray<Gaussian,double>[] vdouble__89_F;
		public Gaussian[] vdouble163_F;
		public Gaussian[] vdouble165_F;
		public Gaussian[] vdouble166_F;
		public Gaussian[] vdouble167_F;
		public Gaussian[] vdouble168_F;
		public Gaussian[] vdouble169_F;
		/// <summary>The constant 'vint45'</summary>
		public int vint45;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'AffinityNoiseVariance'</summary>
		public double AffinityNoiseVariance
		{
			get {
				return this.AffinityNoiseVariance_field;
			}
			set {
				if (this.AffinityNoiseVariance_field!=value) {
					this.AffinityNoiseVariance_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ItemBiasPrior'</summary>
		public DistributionStructArray<Gaussian,double> ItemBiasPrior
		{
			get {
				return this.ItemBiasPrior_field;
			}
			set {
				this.ItemBiasPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ItemBiasPrior_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ItemCount'</summary>
		public int ItemCount
		{
			get {
				return this.ItemCount_field;
			}
			set {
				if (this.ItemCount_field!=value) {
					this.ItemCount_field = value;
					this.numberOfIterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'ItemIds'</summary>
		public IReadOnlyList<int> ItemIds
		{
			get {
				return this.ItemIds_field;
			}
			set {
				if ((value!=null)&&(value.Count!=this.ObservationCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Count)+" when length ")+this.ObservationCount)+" was expected for variable \'ItemIds\'");
				}
				this.ItemIds_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_isDone = false;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone = false;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ItemTraitsPrior'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsPrior
		{
			get {
				return this.ItemTraitsPrior_field;
			}
			set {
				this.ItemTraitsPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_isDone = false;
				this.Changed_ItemTraitsPrior_isDone = false;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_isDone = false;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'ObservationCount'</summary>
		public int ObservationCount
		{
			get {
				return this.ObservationCount_field;
			}
			set {
				if (this.ObservationCount_field!=value) {
					this.ObservationCount_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ObservationCount_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_isDone = false;
					this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_isDone = false;
					this.Changed_ObservationCount_UserIds_UserTraitsPrior_isDone = false;
					this.Changed_ObservationCount_TraitCount_isDone = false;
					this.Changed_ItemBiasPrior_ItemIds_ObservationCount_isDone = false;
					this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_isDone = false;
					this.Changed_ObservationCount_UserBiasPrior_UserIds_isDone = false;
					this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone = false;
					this.Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
					this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
					this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'TraitCount'</summary>
		public int TraitCount
		{
			get {
				return this.TraitCount_field;
			}
			set {
				if (this.TraitCount_field!=value) {
					this.TraitCount_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ObservationCount_TraitCount_isDone = false;
					this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_isDone = false;
					this.Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
					this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
					this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'UserBiasPrior'</summary>
		public DistributionStructArray<Gaussian,double> UserBiasPrior
		{
			get {
				return this.UserBiasPrior_field;
			}
			set {
				this.UserBiasPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_UserBiasPrior_isDone = false;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'UserCount'</summary>
		public int UserCount
		{
			get {
				return this.UserCount_field;
			}
			set {
				if (this.UserCount_field!=value) {
					this.UserCount_field = value;
					this.numberOfIterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'UserIds'</summary>
		public IReadOnlyList<int> UserIds
		{
			get {
				return this.UserIds_field;
			}
			set {
				if ((value!=null)&&(value.Count!=this.ObservationCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Count)+" when length ")+this.ObservationCount)+" was expected for variable \'UserIds\'");
				}
				this.UserIds_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ObservationCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_ObservationCount_UserBiasPrior_UserIds_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone = false;
				this.Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
				this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
				this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'UserThresholdCount'</summary>
		public int UserThresholdCount
		{
			get {
				return this.UserThresholdCount_field;
			}
			set {
				if (this.UserThresholdCount_field!=value) {
					this.UserThresholdCount_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_UserThresholdCount_UseSharedUserThresholds_isDone = false;
					this.Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_UserThresholdCount_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'UserThresholdNoiseVariance'</summary>
		public double UserThresholdNoiseVariance
		{
			get {
				return this.UserThresholdNoiseVariance_field;
			}
			set {
				if (this.UserThresholdNoiseVariance_field!=value) {
					this.UserThresholdNoiseVariance_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'UserThresholdsPrior'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsPrior
		{
			get {
				return this.UserThresholdsPrior_field;
			}
			set {
				this.UserThresholdsPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
				this.Changed_UserThresholdsPrior_isDone = false;
				this.Changed_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
				this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
				this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
				this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'UserTraitsPrior'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsPrior
		{
			get {
				return this.UserTraitsPrior_field;
			}
			set {
				this.UserTraitsPrior_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ObservationCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_UserTraitsPrior_isDone = false;
				this.Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = false;
				this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = false;
				this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'UseSharedUserThresholds'</summary>
		public bool UseSharedUserThresholds
		{
			get {
				return this.UseSharedUserThresholds_field;
			}
			set {
				if (this.UseSharedUserThresholds_field!=value) {
					this.UseSharedUserThresholds_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_UseSharedUserThresholds_isDone = false;
					this.Changed_UserThresholdCount_UseSharedUserThresholds_isDone = false;
					this.Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UseSharedUserThresholds_isDone = false;
					this.Changed_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = false;
					this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone = false;
					this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of AffinityNoiseVariance and ItemBiasPrior and ItemIds and ItemTraitsPrior and ObservationCount and TraitCount and UserBiasPrior and UserIds and UserTraitsPrior</summary>
		private void Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27()
		{
			if (this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.vdouble169_F[observation] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.vdouble168_F[observation], this.AffinityNoiseVariance);
			}
			this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of AffinityNoiseVariance and ItemBiasPrior and ItemIds and ItemTraitsPrior and ObservationCount and TraitCount and UserBiasPrior and UserIds and UserThresholdCount and UserThresholdNoiseVariance and UserThresholdsPrior and UserTraitsPrior and UseSharedUserThresholds</summary>
		private void Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29()
		{
			if (this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				for(int ratingValue = 0; ratingValue<this.vint45; ratingValue++) {
					this.true_logZ[observation][ratingValue] = IsBetweenGaussianOp.LogZ(Bernoulli.PointMass(true), this.vdouble169_F[observation], this.vdouble__89_F[observation][this.CurrentRating_reduced[ratingValue]], this.vdouble__89_F[observation][this.NextRating_reduced[ratingValue]]);
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][6] = Bernoulli.FromLogOdds(IsBetweenGaussianOp.LogEvidenceRatio(true, this.vdouble169_F[observation], this.vdouble__89_F[observation][this.CurrentRating_reduced[ratingValue]], this.vdouble__89_F[observation][this.NextRating_reduced[ratingValue]], this.true_logZ[observation][ratingValue]));
					this.Ratings_observation__selector_cases_B[observation][ratingValue] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Ratings_observation__selector_cases_uses_B[observation][ratingValue], this.Ratings_observation__selector_cases_B[observation][ratingValue]);
				}
				this.Ratings_observation__selector_uses_B[observation][0] = IntCasesOp.IAverageConditional(this.Ratings_observation__selector_cases_B[observation], this.Ratings_observation__selector_uses_B[observation][0]);
				this.Ratings_observation__selector_uses_B_toDef[observation] = ReplicateOp_Divide.ToDef<Discrete>(this.Ratings_observation__selector_uses_B[observation], this.Ratings_observation__selector_uses_B_toDef[observation]);
				this.Ratings_marginal_F[observation] = VariableOp.MarginalAverageConditional<Discrete>(this.Ratings_observation__selector_uses_B_toDef[observation], this.Ratings_F_reduced, this.Ratings_marginal_F[observation]);
			}
			this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemBiasPrior</summary>
		private void Changed_ItemBiasPrior()
		{
			if (this.Changed_ItemBiasPrior_isDone) {
				return ;
			}
			this.ItemBias_use_B = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.ItemBiasPrior);
			this.ItemBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.ItemBiasPrior);
			this.ItemBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.ItemBiasPrior, this.ItemBias_use_B, this.ItemBias_use_F_marginal);
			this.Changed_ItemBiasPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemBiasPrior and ItemIds and ItemTraitsPrior and ObservationCount and TraitCount and UserBiasPrior and UserIds and UserTraitsPrior</summary>
		private void Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26()
		{
			if (this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.vdouble168_F[observation] = DoublePlusOp.SumAverageConditional(this.vdouble166_F[observation], this.vdouble167_F[observation]);
			}
			this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemBiasPrior and ItemIds and ObservationCount</summary>
		private void Changed_ItemBiasPrior_ItemIds_ObservationCount()
		{
			if (this.Changed_ItemBiasPrior_ItemIds_ObservationCount_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.ItemBias_itemItemIds_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.itemBiasObs_B[observation], this.ItemBiasPrior, this.ItemBias_use_F_marginal, this.ItemIds, observation, this.ItemBias_itemItemIds_observation__F[observation]);
				this.vdouble165_F[observation] = GaussianProductOp_SHG09.ProductAverageConditional(this.ItemBias_itemItemIds_observation__F[observation], 1.0, this.itemBiasObs_B[observation]);
			}
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemBiasPrior and ItemIds and ObservationCount and UserBiasPrior and UserIds</summary>
		private void Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds()
		{
			if (this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.vdouble166_F[observation] = DoublePlusOp.SumAverageConditional(this.vdouble163_F[observation], this.vdouble165_F[observation]);
			}
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemIds and ItemTraitsPrior and ObservationCount</summary>
		private void Changed_ItemIds_ItemTraitsPrior_ObservationCount()
		{
			if (this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.ItemTraits_itemItemIds_observation__F[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.ItemTraitsPrior[this.ItemIds[observation]]);
			}
			this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemIds and ItemTraitsPrior and ObservationCount and TraitCount</summary>
		private void Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount()
		{
			if (this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.ItemTraits_itemItemIds_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTrait_B[observation], this.ItemTraitsPrior, this.ItemTraits_use_F_marginal, this.ItemIds, observation, this.ItemTraits_itemItemIds_observation__F[observation]);
			}
			this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemIds and ItemTraitsPrior and ObservationCount and TraitCount and UserIds and UserTraitsPrior</summary>
		private void Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior()
		{
			if (this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				for(int trait = 0; trait<this.TraitCount; trait++) {
					this.vdouble__78_F[observation][trait] = GaussianProductOp_SHG09.ProductAverageConditional(this.UserTraits_itemUserIds_observation__F[observation][trait], this.ItemTraits_itemItemIds_observation__F[observation][trait], this.userTrait_B[observation][trait], this.itemTrait_B[observation][trait]);
				}
				this.vdouble167_F[observation] = FastSumOp.SumAverageConditional(this.vdouble__78_F[observation]);
			}
			this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ItemTraitsPrior</summary>
		private void Changed_ItemTraitsPrior()
		{
			if (this.Changed_ItemTraitsPrior_isDone) {
				return ;
			}
			this.ItemTraits_use_B = ArrayHelper.MakeUniform<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.ItemTraitsPrior);
			this.ItemTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.ItemTraitsPrior);
			this.ItemTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.ItemTraitsPrior, this.ItemTraits_use_B, this.ItemTraits_use_F_marginal);
			this.Changed_ItemTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount</summary>
		private void Changed_ObservationCount()
		{
			if (this.Changed_ObservationCount_isDone) {
				return ;
			}
			this.Ratings_F_reduced = default(Discrete);
			this.Ratings_marginal_F = new DistributionRefArray<Discrete,int>(this.ObservationCount);
			this.vdouble__78_F = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			this.vdouble166_F = new Gaussian[this.ObservationCount];
			this.vdouble165_F = new Gaussian[this.ObservationCount];
			this.ItemBias_itemItemIds_observation__F = new DistributionStructArray<Gaussian,double>(this.ObservationCount);
			this.itemBiasObs_B = new Gaussian[this.ObservationCount];
			this.vdouble163_F = new Gaussian[this.ObservationCount];
			this.UserBias_itemUserIds_observation__F = new DistributionStructArray<Gaussian,double>(this.ObservationCount);
			this.userBiasObs_B = new Gaussian[this.ObservationCount];
			this.itemTrait_B = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			this.Ratings_observation__selector_uses_B = new Discrete[this.ObservationCount][];
			this.vdouble__88_F = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			this.Ratings_observation__selector_cases_uses_B = new Bernoulli[this.ObservationCount][][];
			this.vdouble__89_F = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			this.ItemTraits_itemItemIds_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.ObservationCount);
			this.true_logZ = new double[this.ObservationCount][];
			this.vdouble169_F = new Gaussian[this.ObservationCount];
			this.userTrait_B = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			this.vdouble168_F = new Gaussian[this.ObservationCount];
			this.vdouble167_F = new Gaussian[this.ObservationCount];
			this.UserTraits_itemUserIds_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.ObservationCount);
			this.UserThresholdsObs_F = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			this.Ratings_observation__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.ObservationCount];
			this.UserThresholdsObs_B = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			this.CurrentRating_reduced = default(int[]);
			this.NextRating_reduced = default(int[]);
			this.Ratings_observation__selector_uses_B_toDef = new Discrete[this.ObservationCount];
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.Ratings_observation__selector_uses_B[observation] = new Discrete[3];
				this.vdouble169_F[observation] = Gaussian.Uniform();
				this.vdouble168_F[observation] = Gaussian.Uniform();
				this.vdouble166_F[observation] = Gaussian.Uniform();
				this.vdouble163_F[observation] = Gaussian.Uniform();
				this.UserBias_itemUserIds_observation__F[observation] = Gaussian.Uniform();
				this.userBiasObs_B[observation] = Gaussian.Uniform();
				this.vdouble165_F[observation] = Gaussian.Uniform();
				this.ItemBias_itemItemIds_observation__F[observation] = Gaussian.Uniform();
				this.itemBiasObs_B[observation] = Gaussian.Uniform();
				this.vdouble167_F[observation] = Gaussian.Uniform();
			}
			this.Changed_ObservationCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and TraitCount</summary>
		private void Changed_ObservationCount_TraitCount()
		{
			if (this.Changed_ObservationCount_TraitCount_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.vdouble__78_F[observation] = new DistributionStructArray<Gaussian,double>(this.TraitCount);
				this.userTrait_B[observation] = new DistributionStructArray<Gaussian,double>(this.TraitCount);
				for(int trait = 0; trait<this.TraitCount; trait++) {
					this.userTrait_B[observation][trait] = Gaussian.Uniform();
				}
				this.itemTrait_B[observation] = new DistributionStructArray<Gaussian,double>(this.TraitCount);
				for(int trait = 0; trait<this.TraitCount; trait++) {
					this.itemTrait_B[observation][trait] = Gaussian.Uniform();
					this.vdouble__78_F[observation][trait] = Gaussian.Uniform();
				}
			}
			this.Changed_ObservationCount_TraitCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and TraitCount and UserIds and UserTraitsPrior</summary>
		private void Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior()
		{
			if (this.Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.UserTraits_itemUserIds_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTrait_B[observation], this.UserTraitsPrior, this.UserTraits_use_F_marginal, this.UserIds, observation, this.UserTraits_itemUserIds_observation__F[observation]);
			}
			this.Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserBiasPrior and UserIds</summary>
		private void Changed_ObservationCount_UserBiasPrior_UserIds()
		{
			if (this.Changed_ObservationCount_UserBiasPrior_UserIds_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.UserBias_itemUserIds_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBiasObs_B[observation], this.UserBiasPrior, this.UserBias_use_F_marginal, this.UserIds, observation, this.UserBias_itemUserIds_observation__F[observation]);
				this.vdouble163_F[observation] = GaussianProductOp_SHG09.ProductAverageConditional(this.UserBias_itemUserIds_observation__F[observation], 1.0, this.userBiasObs_B[observation]);
			}
			this.Changed_ObservationCount_UserBiasPrior_UserIds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserIds and UserThresholdCount and UserThresholdNoiseVariance and UserThresholdsPrior and UseSharedUserThresholds</summary>
		private void Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28()
		{
			if (this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				for(int userThreshold = 0; userThreshold<this.UserThresholdCount; userThreshold++) {
					this.vdouble__89_F[observation][userThreshold] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.vdouble__88_F[observation][userThreshold], this.UserThresholdNoiseVariance);
				}
			}
			this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserIds and UserThresholdCount and UserThresholdsPrior and UseSharedUserThresholds</summary>
		private void Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds()
		{
			if (this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				if (!this.UseSharedUserThresholds) {
					if (!this.UseSharedUserThresholds) {
						this.UserThresholds_itemUserIds_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.UserThresholdsObs_B[observation], this.UserThresholdsPrior, this.UserThresholds_use_F_marginal, this.UserIds, observation, this.UserThresholds_itemUserIds_observation__F[observation]);
					}
				}
				for(int userThreshold = 0; userThreshold<this.UserThresholdCount; userThreshold++) {
					if (!this.UseSharedUserThresholds) {
						this.UserThresholdsObs_F[observation][userThreshold] = ArrayHelper.SetTo<Gaussian>(this.UserThresholdsObs_F[observation][userThreshold], this.UserThresholds_itemUserIds_observation__F[observation][userThreshold]);
					}
					this.vdouble__88_F[observation][userThreshold] = GaussianProductOp_SHG09.ProductAverageConditional(this.UserThresholdsObs_F[observation][userThreshold], 1.0, this.UserThresholdsObs_B_reduced);
				}
			}
			this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserIds and UserTraitsPrior</summary>
		private void Changed_ObservationCount_UserIds_UserTraitsPrior()
		{
			if (this.Changed_ObservationCount_UserIds_UserTraitsPrior_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.UserTraits_itemUserIds_observation__F[observation] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.UserTraitsPrior[this.UserIds[observation]]);
			}
			this.Changed_ObservationCount_UserIds_UserTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserThresholdCount</summary>
		private void Changed_ObservationCount_UserThresholdCount()
		{
			if (this.Changed_ObservationCount_UserThresholdCount_isDone) {
				return ;
			}
			if (this.ObservationCount>0) {
				this.Ratings_F_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint45));
			}
			this.UserThresholdsObs_B_reduced = default(Gaussian);
			if (this.ObservationCount>0) {
				if (this.UserThresholdCount>0) {
					this.UserThresholdsObs_B_reduced = Gaussian.Uniform();
				}
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.UserThresholdsObs_B[observation] = new DistributionStructArray<Gaussian,double>(this.UserThresholdCount);
				for(int userThreshold = 0; userThreshold<this.UserThresholdCount; userThreshold++) {
					this.UserThresholdsObs_B[observation][userThreshold] = this.UserThresholdsObs_B_reduced;
				}
			}
			if (this.ObservationCount>0) {
				this.CurrentRating_reduced = new int[this.vint45];
			}
			for(int ratingValue = 0; ratingValue<this.vint45; ratingValue++) {
				if (this.ObservationCount>0) {
					this.CurrentRating_reduced[ratingValue] = Factor.Plus(ratingValue, 0);
				}
			}
			if (this.ObservationCount>0) {
				this.NextRating_reduced = new int[this.vint45];
			}
			for(int ratingValue = 0; ratingValue<this.vint45; ratingValue++) {
				if (this.ObservationCount>0) {
					this.NextRating_reduced[ratingValue] = Factor.Plus(ratingValue, 1);
				}
			}
			this.vbool9_reduced = default(bool);
			if (this.ObservationCount>0) {
				if (this.vint45>0) {
					this.vbool9_reduced = true;
				}
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				this.Ratings_marginal_F[observation] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint45));
				this.Ratings_observation__selector_uses_B[observation][2] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint45));
				this.Ratings_observation__selector_uses_B[observation][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint45));
				this.Ratings_observation__selector_cases_uses_B[observation] = new Bernoulli[this.vint45][];
				this.Ratings_observation__selector_cases_B[observation] = new DistributionStructArray<Bernoulli,bool>(this.vint45);
				this.true_logZ[observation] = new double[this.vint45];
				this.vdouble__88_F[observation] = new DistributionStructArray<Gaussian,double>(this.UserThresholdCount);
				this.UserThresholdsObs_F[observation] = new DistributionStructArray<Gaussian,double>(this.UserThresholdCount);
				this.vdouble__89_F[observation] = new DistributionStructArray<Gaussian,double>(this.UserThresholdCount);
				for(int userThreshold = 0; userThreshold<this.UserThresholdCount; userThreshold++) {
					this.vdouble__88_F[observation][userThreshold] = Gaussian.Uniform();
					this.vdouble__89_F[observation][userThreshold] = Gaussian.Uniform();
				}
				for(int ratingValue = 0; ratingValue<this.vint45; ratingValue++) {
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue] = new Bernoulli[8];
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][5] = Bernoulli.Uniform();
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][4] = Bernoulli.Uniform();
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][3] = Bernoulli.Uniform();
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][2] = Bernoulli.Uniform();
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][1] = Bernoulli.Uniform();
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][0] = Bernoulli.Uniform();
					this.true_logZ[observation][ratingValue] = default(double);
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][6] = Bernoulli.Uniform();
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][7] = Bernoulli.Uniform();
					this.Ratings_observation__selector_cases_uses_B[observation][ratingValue][7] = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, this.vbool9_reduced));
					this.Ratings_observation__selector_cases_B[observation][ratingValue] = Bernoulli.Uniform();
				}
				this.Ratings_observation__selector_uses_B[observation][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.vint45));
				this.Ratings_observation__selector_uses_B_toDef[observation] = ReplicateOp_Divide.ToDefInit<Discrete>(this.Ratings_F_reduced);
			}
			this.Changed_ObservationCount_UserThresholdCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserThresholdCount and UserThresholdsPrior and UseSharedUserThresholds</summary>
		private void Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds()
		{
			if (this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone) {
				return ;
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				for(int _gi = 0; _gi<this.UserThresholdCount; _gi++) {
					if (this.UseSharedUserThresholds) {
						this.UserThresholds_depth2_rep_F[_gi][observation] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.UserThresholdsObs_B_reduced, this.UserThresholds_depth2_rep_F_marginal[_gi], observation, this.UserThresholds_depth2_rep_F[_gi][observation]);
						this.UserThresholds_0__gi_0__F[observation][_gi] = ArrayHelper.SetTo<Gaussian>(this.UserThresholds_0__gi_0__F[observation][_gi], this.UserThresholds_depth2_rep_F[_gi][observation]);
					}
				}
				for(int userThreshold = 0; userThreshold<this.UserThresholdCount; userThreshold++) {
					if (this.UseSharedUserThresholds) {
						this.UserThresholdsObs_F[observation][userThreshold] = ArrayHelper.SetTo<Gaussian>(this.UserThresholdsObs_F[observation][userThreshold], this.UserThresholds_0__gi_0__F[observation][userThreshold]);
					}
				}
			}
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UserThresholdCount and UseSharedUserThresholds</summary>
		private void Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds()
		{
			if (this.Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds_isDone) {
				return ;
			}
			for(int _gi = 0; _gi<this.UserThresholdCount; _gi++) {
				if (this.UseSharedUserThresholds) {
					this.UserThresholds_depth2_rep_F[_gi] = new Gaussian[this.ObservationCount];
				}
			}
			for(int observation = 0; observation<this.ObservationCount; observation++) {
				for(int _gi = 0; _gi<this.UserThresholdCount; _gi++) {
					if (this.UseSharedUserThresholds) {
						this.UserThresholds_depth2_rep_F[_gi][observation] = Gaussian.Uniform();
					}
				}
				if (!this.UseSharedUserThresholds) {
					if (!this.UseSharedUserThresholds) {
						this.UserThresholds_itemUserIds_observation__F[observation] = new DistributionStructArray<Gaussian,double>(this.UserThresholdCount);
					}
				}
				for(int _gi = 0; _gi<this.UserThresholdCount; _gi++) {
					if (!this.UseSharedUserThresholds) {
						if (!this.UseSharedUserThresholds) {
							this.UserThresholds_itemUserIds_observation__F[observation][_gi] = Gaussian.Uniform();
						}
					}
				}
				for(int userThreshold = 0; userThreshold<this.UserThresholdCount; userThreshold++) {
					this.UserThresholdsObs_F[observation][userThreshold] = Gaussian.Uniform();
				}
				if (this.UseSharedUserThresholds) {
					this.UserThresholds_0__gi_0__F[observation] = new DistributionStructArray<Gaussian,double>(this.UserThresholdCount);
				}
				for(int _gi = 0; _gi<this.UserThresholdCount; _gi++) {
					if (this.UseSharedUserThresholds) {
						this.UserThresholds_0__gi_0__F[observation][_gi] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ObservationCount and UseSharedUserThresholds</summary>
		private void Changed_ObservationCount_UseSharedUserThresholds()
		{
			if (this.Changed_ObservationCount_UseSharedUserThresholds_isDone) {
				return ;
			}
			this.UserThresholds_0__gi_0__F = new DistributionStructArray<Gaussian,double>[this.ObservationCount];
			if (!this.UseSharedUserThresholds) {
				if (!this.UseSharedUserThresholds) {
					this.UserThresholds_itemUserIds_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.ObservationCount);
				}
			}
			this.Changed_ObservationCount_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UserBiasPrior</summary>
		private void Changed_UserBiasPrior()
		{
			if (this.Changed_UserBiasPrior_isDone) {
				return ;
			}
			this.UserBias_use_B = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.UserBiasPrior);
			this.UserBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.UserBiasPrior);
			this.UserBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.UserBiasPrior, this.UserBias_use_B, this.UserBias_use_F_marginal);
			this.Changed_UserBiasPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UserThresholdCount</summary>
		private void Changed_UserThresholdCount()
		{
			if (this.Changed_UserThresholdCount_isDone) {
				return ;
			}
			this.vint45 = checked(this.UserThresholdCount-1);
			this.Changed_UserThresholdCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UserThresholdCount and UserThresholdsPrior and UseSharedUserThresholds</summary>
		private void Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds()
		{
			if (this.Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone) {
				return ;
			}
			for(int _gi = 0; _gi<this.UserThresholdCount; _gi++) {
				if (this.UseSharedUserThresholds) {
					this.UserThresholds_depth2_rep_B_toDef[_gi] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.UserThresholdsPrior[0][_gi]);
					this.UserThresholds_depth2_rep_F_marginal[_gi] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.UserThresholdsPrior[0][_gi]);
					this.UserThresholds_depth2_rep_F_marginal[_gi] = ReplicateOp_Divide.Marginal<Gaussian>(this.UserThresholds_depth2_rep_B_toDef[_gi], this.UserThresholdsPrior[0][_gi], this.UserThresholds_depth2_rep_F_marginal[_gi]);
				}
			}
			this.Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UserThresholdCount and UseSharedUserThresholds</summary>
		private void Changed_UserThresholdCount_UseSharedUserThresholds()
		{
			if (this.Changed_UserThresholdCount_UseSharedUserThresholds_isDone) {
				return ;
			}
			if (this.UseSharedUserThresholds) {
				this.UserThresholds_depth2_rep_F = new Gaussian[this.UserThresholdCount][];
				this.UserThresholds_depth2_rep_F_marginal = new Gaussian[this.UserThresholdCount];
				this.UserThresholds_depth2_rep_B_toDef = new Gaussian[this.UserThresholdCount];
			}
			this.Changed_UserThresholdCount_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UserThresholdsPrior</summary>
		private void Changed_UserThresholdsPrior()
		{
			if (this.Changed_UserThresholdsPrior_isDone) {
				return ;
			}
			this.UserThresholds_use_B = ArrayHelper.MakeUniform<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.UserThresholdsPrior);
			this.Changed_UserThresholdsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UserThresholdsPrior and UseSharedUserThresholds</summary>
		private void Changed_UserThresholdsPrior_UseSharedUserThresholds()
		{
			if (this.Changed_UserThresholdsPrior_UseSharedUserThresholds_isDone) {
				return ;
			}
			if (!this.UseSharedUserThresholds) {
				if (!this.UseSharedUserThresholds) {
					this.UserThresholds_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.UserThresholdsPrior);
				}
				this.UserThresholds_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.UserThresholdsPrior, this.UserThresholds_use_B, this.UserThresholds_use_F_marginal);
			}
			this.Changed_UserThresholdsPrior_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UserTraitsPrior</summary>
		private void Changed_UserTraitsPrior()
		{
			if (this.Changed_UserTraitsPrior_isDone) {
				return ;
			}
			this.UserTraits_use_B = ArrayHelper.MakeUniform<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.UserTraitsPrior);
			this.UserTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.UserTraitsPrior);
			this.UserTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.UserTraitsPrior, this.UserTraits_use_B, this.UserTraits_use_F_marginal);
			this.Changed_UserTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of UseSharedUserThresholds</summary>
		private void Changed_UseSharedUserThresholds()
		{
			if (this.Changed_UseSharedUserThresholds_isDone) {
				return ;
			}
			this.UserThresholds_depth2_rep_F = default(Gaussian[][]);
			this.UserThresholds_depth2_rep_F_marginal = default(Gaussian[]);
			this.UserThresholds_depth2_rep_B_toDef = default(Gaussian[]);
			this.UserThresholds_itemUserIds_observation__F = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
			this.UserThresholds_use_F_marginal = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
			this.Changed_UseSharedUserThresholds_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			this.Changed_UseSharedUserThresholds();
			this.Changed_UserThresholdCount_UseSharedUserThresholds();
			this.Changed_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds();
			this.Changed_ObservationCount_UseSharedUserThresholds();
			this.Constant();
			this.Changed_ObservationCount();
			this.Changed_ItemIds_ItemTraitsPrior_ObservationCount();
			this.Changed_ObservationCount_UserIds_UserTraitsPrior();
			this.Changed_ObservationCount_TraitCount();
			this.Changed_ItemBiasPrior();
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount();
			this.Changed_ItemTraitsPrior();
			this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount();
			this.Changed_UserThresholdsPrior();
			this.Changed_UserThresholdsPrior_UseSharedUserThresholds();
			this.Changed_UserBiasPrior();
			this.Changed_ObservationCount_UserBiasPrior_UserIds();
			this.Changed_ItemBiasPrior_ItemIds_ObservationCount_UserBiasPrior_UserIds();
			this.Changed_UserTraitsPrior();
			this.Changed_ObservationCount_TraitCount_UserIds_UserTraitsPrior();
			this.Changed_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserIds_UserTraitsPrior();
			this.Changed_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_UserBiasPrior_UserIds_User26();
			this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User27();
			this.Changed_UserThresholdCount();
			this.Changed_ObservationCount_UserThresholdCount();
			this.Changed_ObservationCount_UserThresholdCount_UseSharedUserThresholds();
			this.Changed_ObservationCount_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds();
			this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdsPrior_UseSharedUserThresholds();
			this.Changed_ObservationCount_UserIds_UserThresholdCount_UserThresholdNoiseVariance_UserThresholdsPrior_U28();
			this.Changed_AffinityNoiseVariance_ItemBiasPrior_ItemIds_ItemTraitsPrior_ObservationCount_TraitCount_User29();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="UserCount") {
				return this.UserCount;
			}
			if (variableName=="ItemCount") {
				return this.ItemCount;
			}
			if (variableName=="UserThresholdCount") {
				return this.UserThresholdCount;
			}
			if (variableName=="ObservationCount") {
				return this.ObservationCount;
			}
			if (variableName=="TraitCount") {
				return this.TraitCount;
			}
			if (variableName=="UserTraitsPrior") {
				return this.UserTraitsPrior;
			}
			if (variableName=="UserBiasPrior") {
				return this.UserBiasPrior;
			}
			if (variableName=="UserThresholdsPrior") {
				return this.UserThresholdsPrior;
			}
			if (variableName=="ItemTraitsPrior") {
				return this.ItemTraitsPrior;
			}
			if (variableName=="ItemBiasPrior") {
				return this.ItemBiasPrior;
			}
			if (variableName=="UserIds") {
				return this.UserIds;
			}
			if (variableName=="ItemIds") {
				return this.ItemIds;
			}
			if (variableName=="AffinityNoiseVariance") {
				return this.AffinityNoiseVariance;
			}
			if (variableName=="UserThresholdNoiseVariance") {
				return this.UserThresholdNoiseVariance;
			}
			if (variableName=="UseSharedUserThresholds") {
				return this.UseSharedUserThresholds;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Ratings") {
				return this.RatingsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'Ratings' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> RatingsMarginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<Discrete,int>>(this.Ratings_marginal_F);
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="UserCount") {
				this.UserCount = (int)value;
				return ;
			}
			if (variableName=="ItemCount") {
				this.ItemCount = (int)value;
				return ;
			}
			if (variableName=="UserThresholdCount") {
				this.UserThresholdCount = (int)value;
				return ;
			}
			if (variableName=="ObservationCount") {
				this.ObservationCount = (int)value;
				return ;
			}
			if (variableName=="TraitCount") {
				this.TraitCount = (int)value;
				return ;
			}
			if (variableName=="UserTraitsPrior") {
				this.UserTraitsPrior = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="UserBiasPrior") {
				this.UserBiasPrior = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="UserThresholdsPrior") {
				this.UserThresholdsPrior = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="ItemTraitsPrior") {
				this.ItemTraitsPrior = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="ItemBiasPrior") {
				this.ItemBiasPrior = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="UserIds") {
				this.UserIds = (IReadOnlyList<int>)value;
				return ;
			}
			if (variableName=="ItemIds") {
				this.ItemIds = (IReadOnlyList<int>)value;
				return ;
			}
			if (variableName=="AffinityNoiseVariance") {
				this.AffinityNoiseVariance = (double)value;
				return ;
			}
			if (variableName=="UserThresholdNoiseVariance") {
				this.UserThresholdNoiseVariance = (double)value;
				return ;
			}
			if (variableName=="UseSharedUserThresholds") {
				this.UseSharedUserThresholds = (bool)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
