// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Microsoft.ML.Probabilistic.Learners.BayesPointMachineClassifierInternal
{
	public partial class GaussianDenseBinaryBpmTrainingEvidence_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8 has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount has executed. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount</summary>
		public bool Changed_FeatureCount_InstanceCount_isDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7 has executed. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7</summary>
		public bool Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7</summary>
		public bool Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isInitialised;
		/// <summary>True if Changed_FeatureCount has executed. Set this to false to force re-execution of Changed_FeatureCount</summary>
		public bool Changed_FeatureCount_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4 has executed. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isInitialised;
		/// <summary>True if Changed_InstanceCount has executed. Set this to false to force re-execution of Changed_InstanceCount</summary>
		public bool Changed_InstanceCount_isDone;
		/// <summary>True if Changed_WeightConstraints_WeightPriors has executed. Set this to false to force re-execution of Changed_WeightConstraints_WeightPriors</summary>
		public bool Changed_WeightConstraints_WeightPriors_isDone;
		/// <summary>True if Changed_WeightPriors has executed. Set this to false to force re-execution of Changed_WeightPriors</summary>
		public bool Changed_WeightPriors_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		public DistributionStructArray<Gaussian,double>[] FeatureScores_B;
		public DistributionStructArray<Gaussian,double>[] FeatureScores_F;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		/// <summary>Field backing the Labels property</summary>
		private bool[] labels;
		/// <summary>Message to marginal of 'ModelSelector'</summary>
		public Bernoulli ModelSelector_marginal_F;
		public Bernoulli ModelSelector_selector_B;
		public Bernoulli ModelSelector_selector_cases_0_B;
		public Bernoulli[] ModelSelector_selector_cases_0_rep3_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep3'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep3_uses_B;
		public Bernoulli[] ModelSelector_selector_cases_0_rep8_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0'</summary>
		public Bernoulli[] ModelSelector_selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_B;
		public Gaussian[] NoisyScore_F;
		/// <summary>Message from use of 'NoisyScore'</summary>
		public Gaussian[] NoisyScore_use_B;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public Gaussian[] Score_B;
		public Gaussian[] Score_F;
		/// <summary>The constant 'vBernoulli0'</summary>
		public Bernoulli vBernoulli0;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionStructArray<Gaussian,double> weightConstraints;
		/// <summary>Field backing the WeightPriors property</summary>
		private DistributionStructArray<Gaussian,double> weightPriors;
		public Gaussian[][] Weights_depth1_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[] Weights_depth1_rep_B_toDef;
		public Gaussian[][] Weights_depth1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[] Weights_depth1_rep_F_marginal;
		/// <summary>Message to marginal of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double> Weights_marginal_F;
		/// <summary>Message from use of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double> Weights_use_B;
		/// <summary>Messages from uses of 'Weights_use'</summary>
		public DistributionStructArray<Gaussian,double>[] Weights_uses_B;
		/// <summary>Messages to uses of 'Weights_use'</summary>
		public DistributionStructArray<Gaussian,double>[] Weights_uses_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_FeatureCount_isDone = false;
					this.Changed_FeatureCount_InstanceCount_isDone = false;
					this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_isDone = false;
					this.Changed_FeatureCount_InstanceCount_isDone = false;
					this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isInitialised = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public bool[] Labels
		{
			get {
				return this.labels;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'Labels\'");
				}
				this.labels = value;
				this.numberOfIterationsDone = 0;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionStructArray<Gaussian,double> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isInitialised = false;
				this.Changed_WeightConstraints_WeightPriors_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WeightPriors'</summary>
		public DistributionStructArray<Gaussian,double> WeightPriors
		{
			get {
				return this.weightPriors;
			}
			set {
				this.weightPriors = value;
				this.numberOfIterationsDone = 0;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isInitialised = false;
				this.Changed_WeightPriors_isDone = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isDone = false;
				this.Changed_WeightConstraints_WeightPriors_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of FeatureCount</summary>
		private void Changed_FeatureCount()
		{
			if (this.Changed_FeatureCount_isDone) {
				return ;
			}
			this.Weights_depth1_rep_F_marginal = new Gaussian[this.featureCount];
			this.Weights_depth1_rep_B_toDef = new Gaussian[this.featureCount];
			this.Weights_depth1_rep_F = new Gaussian[this.featureCount][];
			this.Weights_depth1_rep_B = new Gaussian[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep3_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep3_B = new Bernoulli[this.featureCount];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep3_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.Changed_FeatureCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount and Labels and numberOfIterations and WeightConstraints and WeightPriors</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8(int numberOfIterations)
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone) {
				return ;
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_depth1_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_depth1_rep_B_toDef[FeatureRange], this.Weights_uses_F[1][FeatureRange], this.Weights_depth1_rep_F_marginal[FeatureRange]);
				}
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_depth1_rep_F[FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_depth1_rep_B[FeatureRange][InstanceRange], this.Weights_depth1_rep_F_marginal[FeatureRange], InstanceRange, this.Weights_depth1_rep_F[FeatureRange][InstanceRange]);
						this.FeatureScores_F[InstanceRange][FeatureRange] = GaussianProductOpBase.ProductAverageConditional(this.featureValues[InstanceRange][FeatureRange], this.Weights_depth1_rep_F[FeatureRange][InstanceRange]);
					}
					this.Score_F[InstanceRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange]);
					this.NoisyScore_F[InstanceRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Score_F[InstanceRange], 1.0);
					this.NoisyScore_use_B[InstanceRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.labels[InstanceRange]), this.NoisyScore_F[InstanceRange]);
					this.Score_B[InstanceRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScore_use_B[InstanceRange], 1.0);
					this.FeatureScores_B[InstanceRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Score_B[InstanceRange], this.Score_F[InstanceRange], this.FeatureScores_F[InstanceRange], this.FeatureScores_B[InstanceRange]);
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_depth1_rep_B[FeatureRange][InstanceRange] = GaussianProductOpBase.BAverageConditional(this.FeatureScores_B[InstanceRange][FeatureRange], this.featureValues[InstanceRange][FeatureRange]);
						this.Weights_depth1_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalIncrement<Gaussian>(this.Weights_depth1_rep_F_marginal[FeatureRange], this.Weights_depth1_rep_F[FeatureRange][InstanceRange], this.Weights_depth1_rep_B[FeatureRange][InstanceRange]);
					}
				}
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_depth1_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_depth1_rep_B[FeatureRange], this.Weights_depth1_rep_B_toDef[FeatureRange]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int _iv = 0; _iv<this.featureCount; _iv++) {
				this.Weights_uses_B[1][_iv] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[1][_iv], this.Weights_depth1_rep_B_toDef[_iv]);
			}
			this.Weights_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.Weights_uses_B, this.weightPriors, 0, this.Weights_uses_F[0]);
			this.ModelSelector_selector_cases_0_uses_B[6] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.Weights_uses_B, this.weightPriors, this.Weights_uses_F));
			this.ModelSelector_selector_cases_0_uses_B[7] = Bernoulli.FromLogOdds(ConstrainEqualRandomOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.Weights_uses_F[0], this.weightConstraints));
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.Weights_depth1_rep_B[FeatureRange], this.Weights_uses_F[1][FeatureRange], this.Weights_depth1_rep_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep3_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep3_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[12] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep3_B, this.ModelSelector_selector_cases_0_uses_B[12]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep8_B[InstanceRange] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(this.labels[InstanceRange], this.NoisyScore_F[InstanceRange]));
			}
			this.ModelSelector_selector_cases_0_uses_B[17] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep8_B, this.ModelSelector_selector_cases_0_uses_B[17]);
			this.ModelSelector_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_uses_B, this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(this.ModelSelector_selector_cases_B[0], this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_B = CasesOp.BAverageConditional(this.ModelSelector_selector_cases_B);
			this.ModelSelector_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.ModelSelector_selector_B, this.vBernoulli0, this.ModelSelector_marginal_F);
			this.Weights_use_B = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gaussian,double>>(this.Weights_uses_B, this.Weights_use_B);
			this.Weights_marginal_F = VariableOp.MarginalAverageConditional<DistributionStructArray<Gaussian,double>>(this.Weights_use_B, this.weightPriors, this.Weights_marginal_F);
			this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and InstanceCount</summary>
		private void Changed_FeatureCount_InstanceCount()
		{
			if (this.Changed_FeatureCount_InstanceCount_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_depth1_rep_F[FeatureRange] = new Gaussian[this.instanceCount];
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_depth1_rep_F[FeatureRange][InstanceRange] = Gaussian.Uniform();
				}
				this.FeatureScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.FeatureScores_F[InstanceRange][FeatureRange] = Gaussian.Uniform();
				}
				this.FeatureScores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.FeatureScores_B[InstanceRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_depth1_rep_B[FeatureRange] = new Gaussian[this.instanceCount];
			}
			this.Changed_FeatureCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and InstanceCount and numberOfIterationsDecreased and must reset on changes to FeatureValues and Labels and WeightConstraints and WeightPriors</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7(bool initialise)
		{
			if (this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isDone&&((!initialise)||this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_depth1_rep_B[FeatureRange][InstanceRange] = Gaussian.Uniform();
				}
			}
			this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isDone = true;
			this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and numberOfIterationsDecreased and WeightPriors and must reset on changes to FeatureValues and InstanceCount and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4(bool initialise)
		{
			if (this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isDone&&((!initialise)||this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_depth1_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Weights_uses_F[1][FeatureRange]);
				this.Weights_depth1_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Weights_uses_F[1][FeatureRange]);
			}
			this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isDone = true;
			this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_isDone) {
				return ;
			}
			this.FeatureScores_F = new DistributionStructArray<Gaussian,double>[this.instanceCount];
			this.Score_F = new Gaussian[this.instanceCount];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_F[InstanceRange] = Gaussian.Uniform();
			}
			this.NoisyScore_F = new Gaussian[this.instanceCount];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_F[InstanceRange] = Gaussian.Uniform();
			}
			this.NoisyScore_use_B = new Gaussian[this.instanceCount];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_use_B[InstanceRange] = Gaussian.Uniform();
			}
			this.Score_B = new Gaussian[this.instanceCount];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_B[InstanceRange] = Gaussian.Uniform();
			}
			this.FeatureScores_B = new DistributionStructArray<Gaussian,double>[this.instanceCount];
			this.ModelSelector_selector_cases_0_rep8_B = new Bernoulli[this.instanceCount];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep8_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.Changed_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WeightConstraints and WeightPriors</summary>
		private void Changed_WeightConstraints_WeightPriors()
		{
			if (this.Changed_WeightConstraints_WeightPriors_isDone) {
				return ;
			}
			this.Weights_uses_B[0] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.Weights_uses_B[0], this.weightConstraints);
			this.Weights_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.Weights_uses_B, this.weightPriors, 1, this.Weights_uses_F[1]);
			this.Changed_WeightConstraints_WeightPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WeightPriors</summary>
		private void Changed_WeightPriors()
		{
			if (this.Changed_WeightPriors_isDone) {
				return ;
			}
			this.Weights_uses_B[1] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.weightPriors);
			this.Weights_uses_B[0] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.weightPriors);
			this.Weights_uses_F[1] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.weightPriors);
			this.Weights_uses_F[0] = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.weightPriors);
			this.Weights_marginal_F = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.weightPriors);
			this.Weights_use_B = ArrayHelper.MakeUniform<DistributionStructArray<Gaussian,double>>(this.weightPriors);
			this.Changed_WeightPriors_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vBernoulli0 = Bernoulli.Uniform();
			this.ModelSelector_marginal_F = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				this.ModelSelector_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_uses_B = new Bernoulli[18];
			this.ModelSelector_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			this.Weights_uses_B = new DistributionStructArray<Gaussian,double>[2];
			this.Weights_uses_F = new DistributionStructArray<Gaussian,double>[2];
			this.ModelSelector_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_B = Bernoulli.Uniform();
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4_isDone = false;
				}
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8_isDone = false;
			}
			this.Constant();
			this.Changed_InstanceCount();
			this.Changed_FeatureCount();
			this.Changed_FeatureCount_InstanceCount();
			this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst7(initialise);
			this.Changed_WeightPriors();
			this.Changed_FeatureCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Label4(initialise);
			this.Changed_WeightConstraints_WeightPriors();
			this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP8(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="WeightPriors") {
				return this.WeightPriors;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="ModelSelector") {
				return this.ModelSelectorMarginal();
			}
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'ModelSelector' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli ModelSelectorMarginal()
		{
			return this.ModelSelector_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="WeightPriors") {
				this.WeightPriors = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginalDividedByPrior()
		{
			return this.Weights_use_B;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
