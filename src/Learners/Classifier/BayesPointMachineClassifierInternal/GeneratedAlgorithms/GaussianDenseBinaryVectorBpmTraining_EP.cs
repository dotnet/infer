// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Microsoft.ML.Probabilistic.Learners.BayesPointMachineClassifierInternal
{
	public partial class GaussianDenseBinaryVectorBpmTraining_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors has executed. Set this to false to force re-execution of Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors</summary>
		public bool Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone;
		/// <summary>True if Changed_InstanceCount has executed. Set this to false to force re-execution of Changed_InstanceCount</summary>
		public bool Changed_InstanceCount_isDone;
		/// <summary>True if Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6 has executed. Set this to false to force re-execution of Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6</summary>
		public bool Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isDone;
		/// <summary>True if Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6 has performed initialisation. Set this to false to force re-execution of Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6</summary>
		public bool Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isInitialised;
		/// <summary>True if Changed_InstanceCount_WeightPriors has executed. Set this to false to force re-execution of Changed_InstanceCount_WeightPriors</summary>
		public bool Changed_InstanceCount_WeightPriors_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3</summary>
		public bool Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3</summary>
		public bool Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised;
		/// <summary>True if Changed_WeightConstraints_WeightPriors has executed. Set this to false to force re-execution of Changed_WeightConstraints_WeightPriors</summary>
		public bool Changed_WeightConstraints_WeightPriors_isDone;
		/// <summary>True if Changed_WeightPriors has executed. Set this to false to force re-execution of Changed_WeightPriors</summary>
		public bool Changed_WeightPriors_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the FeatureValues property</summary>
		private Vector[] FeatureValues_field;
		/// <summary>Field backing the InstanceCount property</summary>
		private int InstanceCount_field;
		/// <summary>Field backing the Labels property</summary>
		private bool[] Labels_field;
		public Gaussian[] NoisyScore_F;
		/// <summary>Message from use of 'NoisyScore'</summary>
		public Gaussian[] NoisyScore_use_B;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public Gaussian[] Score_B;
		public Gaussian[] Score_F;
		/// <summary>Field backing the WeightConstraints property</summary>
		private VectorGaussian WeightConstraints_field;
		/// <summary>Field backing the WeightPriors property</summary>
		private VectorGaussian WeightPriors_field;
		/// <summary>Message to marginal of 'Weights'</summary>
		public VectorGaussian Weights_marginal_F;
		public VectorGaussian[] Weights_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;VectorGaussian&gt;</summary>
		public VectorGaussian Weights_rep_B_toDef;
		public VectorGaussian[] Weights_rep_F;
		/// <summary>Buffer for InnerProductOpBase.InnerProductAverageConditional</summary>
		public DenseVector[] Weights_rep_F_InstanceRange__AMean;
		/// <summary>Buffer for InnerProductOpBase.AMean</summary>
		public PositiveDefiniteMatrix[] Weights_rep_F_InstanceRange__AVariance;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;VectorGaussian&gt;</summary>
		public VectorGaussian Weights_rep_F_marginal;
		/// <summary>Message from use of 'Weights'</summary>
		public VectorGaussian Weights_use_B;
		/// <summary>Messages from uses of 'Weights_use'</summary>
		public VectorGaussian[] Weights_uses_B;
		/// <summary>Messages to uses of 'Weights_use'</summary>
		public VectorGaussian[] Weights_uses_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public Vector[] FeatureValues
		{
			get {
				return this.FeatureValues_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.InstanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.InstanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.FeatureValues_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
				this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.InstanceCount_field;
			}
			set {
				if (this.InstanceCount_field!=value) {
					this.InstanceCount_field = value;
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_isDone = false;
					this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isDone = false;
					this.Changed_InstanceCount_WeightPriors_isDone = false;
					this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
					this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public bool[] Labels
		{
			get {
				return this.Labels_field;
			}
			set {
				if ((value!=null)&&(value.Length!=this.InstanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.InstanceCount)+" was expected for variable \'Labels\'");
				}
				this.Labels_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
				this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public VectorGaussian WeightConstraints
		{
			get {
				return this.WeightConstraints_field;
			}
			set {
				this.WeightConstraints_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
				this.Changed_WeightConstraints_WeightPriors_isDone = false;
				this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WeightPriors'</summary>
		public VectorGaussian WeightPriors
		{
			get {
				return this.WeightPriors_field;
			}
			set {
				this.WeightPriors_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isDone = false;
				this.Changed_InstanceCount_WeightPriors_isDone = false;
				this.Changed_WeightPriors_isDone = false;
				this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone = false;
				this.Changed_WeightConstraints_WeightPriors_isDone = false;
				this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of FeatureValues and InstanceCount and Labels and numberOfIterations and WeightConstraints and WeightPriors</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors(int numberOfIterations)
		{
			if (this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone) {
				return ;
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.Weights_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.Weights_rep_B_toDef, this.Weights_uses_F[1], this.Weights_rep_F_marginal);
				for(int InstanceRange = 0; InstanceRange<this.InstanceCount; InstanceRange++) {
					this.Weights_rep_F[InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.Weights_rep_B[InstanceRange], this.Weights_rep_F_marginal, InstanceRange, this.Weights_rep_F[InstanceRange]);
					this.Weights_rep_F_InstanceRange__AVariance[InstanceRange] = InnerProductOpBase.AVariance(this.Weights_rep_F[InstanceRange], this.Weights_rep_F_InstanceRange__AVariance[InstanceRange]);
					this.Weights_rep_F_InstanceRange__AMean[InstanceRange] = InnerProductOpBase.AMean(this.Weights_rep_F[InstanceRange], this.Weights_rep_F_InstanceRange__AVariance[InstanceRange], this.Weights_rep_F_InstanceRange__AMean[InstanceRange]);
					this.Score_F[InstanceRange] = InnerProductOpBase.InnerProductAverageConditional(this.Weights_rep_F_InstanceRange__AMean[InstanceRange], this.Weights_rep_F_InstanceRange__AVariance[InstanceRange], this.FeatureValues[InstanceRange]);
					this.NoisyScore_F[InstanceRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Score_F[InstanceRange], 1.0);
					this.NoisyScore_use_B[InstanceRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.Labels[InstanceRange]), this.NoisyScore_F[InstanceRange]);
					this.Score_B[InstanceRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScore_use_B[InstanceRange], 1.0);
					this.Weights_rep_B[InstanceRange] = InnerProductOpBase.AAverageConditional(this.Score_B[InstanceRange], this.FeatureValues[InstanceRange], this.Weights_rep_B[InstanceRange]);
					this.Weights_rep_F_marginal = ReplicateOp_Divide.MarginalIncrement<VectorGaussian>(this.Weights_rep_F_marginal, this.Weights_rep_F[InstanceRange], this.Weights_rep_B[InstanceRange]);
				}
				this.Weights_rep_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(this.Weights_rep_B, this.Weights_rep_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Weights_uses_B[1] = ArrayHelper.SetTo<VectorGaussian>(this.Weights_uses_B[1], this.Weights_rep_B_toDef);
			this.Weights_use_B = ReplicateOp_NoDivide.DefAverageConditional<VectorGaussian>(this.Weights_uses_B, this.Weights_use_B);
			this.Weights_marginal_F = VariableOp.MarginalAverageConditional<VectorGaussian>(this.Weights_use_B, this.WeightPriors, this.Weights_marginal_F);
			this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_isDone) {
				return ;
			}
			this.Weights_rep_F = new VectorGaussian[this.InstanceCount];
			this.Weights_rep_F_InstanceRange__AMean = new DenseVector[this.InstanceCount];
			this.Weights_rep_F_InstanceRange__AVariance = new PositiveDefiniteMatrix[this.InstanceCount];
			this.Score_F = new Gaussian[this.InstanceCount];
			for(int InstanceRange = 0; InstanceRange<this.InstanceCount; InstanceRange++) {
				this.Score_F[InstanceRange] = Gaussian.Uniform();
			}
			this.NoisyScore_F = new Gaussian[this.InstanceCount];
			for(int InstanceRange = 0; InstanceRange<this.InstanceCount; InstanceRange++) {
				this.NoisyScore_F[InstanceRange] = Gaussian.Uniform();
			}
			this.NoisyScore_use_B = new Gaussian[this.InstanceCount];
			for(int InstanceRange = 0; InstanceRange<this.InstanceCount; InstanceRange++) {
				this.NoisyScore_use_B[InstanceRange] = Gaussian.Uniform();
			}
			this.Score_B = new Gaussian[this.InstanceCount];
			for(int InstanceRange = 0; InstanceRange<this.InstanceCount; InstanceRange++) {
				this.Score_B[InstanceRange] = Gaussian.Uniform();
			}
			this.Weights_rep_B = new VectorGaussian[this.InstanceCount];
			this.Changed_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and numberOfIterationsDecreased and WeightPriors and must reset on changes to FeatureValues and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6(bool initialise)
		{
			if (this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isDone&&((!initialise)||this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.InstanceCount; InstanceRange++) {
				this.Weights_rep_B[InstanceRange] = ArrayHelper.MakeUniform<VectorGaussian>(this.WeightPriors);
			}
			this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isDone = true;
			this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and WeightPriors</summary>
		private void Changed_InstanceCount_WeightPriors()
		{
			if (this.Changed_InstanceCount_WeightPriors_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.InstanceCount; InstanceRange++) {
				this.Weights_rep_F[InstanceRange] = ArrayHelper.MakeUniform<VectorGaussian>(this.WeightPriors);
				this.Weights_rep_F_InstanceRange__AMean[InstanceRange] = InnerProductOpBase.AMeanInit(this.Weights_rep_F[InstanceRange]);
				this.Weights_rep_F_InstanceRange__AVariance[InstanceRange] = InnerProductOpBase.AVarianceInit(this.Weights_rep_F[InstanceRange]);
			}
			this.Changed_InstanceCount_WeightPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and WeightPriors and must reset on changes to FeatureValues and InstanceCount and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised)) {
				return ;
			}
			this.Weights_rep_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(this.Weights_uses_F[1]);
			this.Weights_rep_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(this.Weights_uses_F[1]);
			this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone = true;
			this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of WeightConstraints and WeightPriors</summary>
		private void Changed_WeightConstraints_WeightPriors()
		{
			if (this.Changed_WeightConstraints_WeightPriors_isDone) {
				return ;
			}
			this.Weights_uses_B[0] = ArrayHelper.SetTo<VectorGaussian>(this.Weights_uses_B[0], this.WeightConstraints);
			this.Weights_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<VectorGaussian>(this.Weights_uses_B, this.WeightPriors, 1, this.Weights_uses_F[1]);
			this.Changed_WeightConstraints_WeightPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of WeightPriors</summary>
		private void Changed_WeightPriors()
		{
			if (this.Changed_WeightPriors_isDone) {
				return ;
			}
			this.Weights_marginal_F = ArrayHelper.MakeUniform<VectorGaussian>(this.WeightPriors);
			this.Weights_use_B = ArrayHelper.MakeUniform<VectorGaussian>(this.WeightPriors);
			this.Weights_uses_B[1] = ArrayHelper.MakeUniform<VectorGaussian>(this.WeightPriors);
			this.Weights_uses_B[0] = ArrayHelper.MakeUniform<VectorGaussian>(this.WeightPriors);
			this.Weights_uses_F[1] = ArrayHelper.MakeUniform<VectorGaussian>(this.WeightPriors);
			this.Changed_WeightPriors_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.Weights_uses_F = new VectorGaussian[2];
			this.Weights_uses_B = new VectorGaussian[2];
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6_isDone = false;
					this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone = false;
				}
				this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors_isDone = false;
			}
			this.Constant();
			this.Changed_InstanceCount();
			this.Changed_InstanceCount_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_Labels_WeightConst6(initialise);
			this.Changed_InstanceCount_WeightPriors();
			this.Changed_WeightPriors();
			this.Changed_numberOfIterationsDecreased_WeightPriors_Init_FeatureValues_InstanceCount_Labels_WeightConst3(initialise);
			this.Changed_WeightConstraints_WeightPriors();
			this.Changed_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightPriors(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="WeightPriors") {
				return this.WeightPriors;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (Vector[])value;
				return ;
			}
			if (variableName=="WeightPriors") {
				this.WeightPriors = (VectorGaussian)value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (VectorGaussian)value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public VectorGaussian WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public VectorGaussian WeightsMarginalDividedByPrior()
		{
			return this.Weights_use_B;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
