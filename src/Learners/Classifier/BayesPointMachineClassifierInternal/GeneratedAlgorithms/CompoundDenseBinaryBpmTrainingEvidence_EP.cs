// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Microsoft.ML.Probabilistic.Learners.BayesPointMachineClassifierInternal
{
	public partial class CompoundDenseBinaryBpmTrainingEvidence_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_isDone;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12 has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8 has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isInitialised;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount has executed. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount</summary>
		public bool Changed_FeatureCount_InstanceCount_isDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10 has executed. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10</summary>
		public bool Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10</summary>
		public bool Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isInitialised;
		/// <summary>True if Changed_FeatureCount has executed. Set this to false to force re-execution of Changed_FeatureCount</summary>
		public bool Changed_FeatureCount_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3 has executed. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised;
		/// <summary>True if Changed_FeatureCount_WeightConstraints has executed. Set this to false to force re-execution of Changed_FeatureCount_WeightConstraints</summary>
		public bool Changed_FeatureCount_WeightConstraints_isDone;
		/// <summary>True if Changed_FeatureCount_WeightPrecisionRateConstraints has executed. Set this to false to force re-execution of Changed_FeatureCount_WeightPrecisionRateConstraints</summary>
		public bool Changed_FeatureCount_WeightPrecisionRateConstraints_isDone;
		/// <summary>True if Changed_InstanceCount has executed. Set this to false to force re-execution of Changed_InstanceCount</summary>
		public bool Changed_InstanceCount_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9</summary>
		public bool Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9</summary>
		public bool Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised;
		public Gamma CommonWeightPrecision_F;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public Gamma CommonWeightPrecision_rep_B_toDef;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gamma&gt;</summary>
		public Gamma CommonWeightPrecision_rep_F_marginal;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> FeatureScores_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> FeatureScores_F;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		/// <summary>Field backing the Labels property</summary>
		private bool[] labels;
		/// <summary>Message to marginal of 'ModelSelector'</summary>
		public Bernoulli ModelSelector_marginal_F;
		public Bernoulli ModelSelector_selector_B;
		public Bernoulli ModelSelector_selector_cases_0_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep10_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep10'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep10_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep15_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep2_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep2'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep2_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep3_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep4_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep4'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep4_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep5_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep5'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep5_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep6_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep6_rep_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep7_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep7'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep7_uses_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0'</summary>
		public Bernoulli[] ModelSelector_selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_B;
		public DistributionStructArray<Gaussian,double> NoisyScore_F;
		/// <summary>Message from use of 'NoisyScore'</summary>
		public DistributionStructArray<Gaussian,double> NoisyScore_use_B;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public DistributionStructArray<Gaussian,double> Score_B;
		public DistributionStructArray<Gaussian,double> Score_F;
		/// <summary>Buffer for GammaFromShapeAndRateOp_Laplace.LogEvidenceRatio</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_B_FeatureRange__Q;
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_F;
		/// <summary>Message from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_use_B;
		/// <summary>Messages from uses of 'SharedWeightPrecisionRates_use'</summary>
		public Gamma[][] SharedWeightPrecisionRates_uses_B;
		/// <summary>Messages to uses of 'SharedWeightPrecisionRates_use'</summary>
		public Gamma[][] SharedWeightPrecisionRates_uses_F;
		/// <summary>The constant 'vBernoulli4'</summary>
		public Bernoulli vBernoulli4;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionStructArray<Gaussian,double> weightConstraints;
		/// <summary>Field backing the WeightPrecisionRateConstraints property</summary>
		private DistributionStructArray<Gamma,double> weightPrecisionRateConstraints;
		public Gamma WeightPrecisionRateRates_F_reduced;
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_F;
		/// <summary>Message to marginal of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisionRates_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisionRates_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_rep_F_marginal;
		/// <summary>Message from use of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_use_B;
		/// <summary>Messages from uses of 'WeightPrecisionRates_use'</summary>
		public Gamma[][] WeightPrecisionRates_uses_B;
		/// <summary>Messages to uses of 'WeightPrecisionRates_use'</summary>
		public Gamma[][] WeightPrecisionRates_uses_F;
		public DistributionStructArray<Gamma,double> WeightPrecisions_B;
		/// <summary>Buffer for GammaRatioOp_Laplace.LogEvidenceRatio</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_B_FeatureRange__Q;
		public DistributionStructArray<Gamma,double> WeightPrecisions_F;
		public DistributionStructArray<Gaussian,double> Weights_depth0_F;
		public DistributionStructArray<Gaussian,double> Weights_F;
		/// <summary>Message to marginal of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double> Weights_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> Weights_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> Weights_rep_F_marginal;
		/// <summary>Message from use of 'Weights'</summary>
		public DistributionStructArray<Gaussian,double> Weights_use_B;
		/// <summary>Messages from uses of 'Weights_use'</summary>
		public Gaussian[][] Weights_uses_B;
		/// <summary>Messages to uses of 'Weights_use'</summary>
		public Gaussian[][] Weights_uses_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised = false;
					this.Changed_FeatureCount_isDone = false;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = false;
					this.Changed_FeatureCount_InstanceCount_isDone = false;
					this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone = false;
					this.Changed_FeatureCount_WeightConstraints_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised = false;
					this.Changed_FeatureCount_InstanceCount_isDone = false;
					this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public bool[] Labels
		{
			get {
				return this.labels;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'Labels\'");
				}
				this.labels = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionStructArray<Gaussian,double> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised = false;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isInitialised = false;
				this.Changed_FeatureCount_WeightConstraints_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WeightPrecisionRateConstraints'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRateConstraints
		{
			get {
				return this.weightPrecisionRateConstraints;
			}
			set {
				this.weightPrecisionRateConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = false;
				this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of FeatureCount</summary>
		private void Changed_FeatureCount()
		{
			if (this.Changed_FeatureCount_isDone) {
				return ;
			}
			this.ModelSelector_selector_cases_0_rep2_uses_B = new Bernoulli[this.featureCount][];
			this.WeightPrecisionRates_depth0_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisionRates_marginal_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.SharedWeightPrecisionRates_uses_F = new Gamma[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_uses_F[FeatureRange] = new Gamma[2];
			}
			this.WeightPrecisionRateRates_F_reduced = default(Gamma);
			if (this.featureCount>0) {
				this.WeightPrecisionRateRates_F_reduced = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			}
			this.Weights_uses_F = new Gaussian[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_uses_F[FeatureRange] = new Gaussian[2];
				this.Weights_uses_F[FeatureRange][1] = Gaussian.Uniform();
			}
			this.Weights_uses_B = new Gaussian[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_uses_B[FeatureRange] = new Gaussian[2];
				this.Weights_uses_B[FeatureRange][0] = Gaussian.Uniform();
				this.Weights_uses_B[FeatureRange][1] = Gaussian.Uniform();
			}
			this.Weights_F = new DistributionStructArray<Gaussian,double>(this.featureCount);
			this.WeightPrecisions_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisions_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.SharedWeightPrecisionRates_uses_B = new Gamma[this.featureCount][];
			this.WeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisionRates_uses_B = new Gamma[this.featureCount][];
			this.WeightPrecisionRates_rep_B_toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisionRates_uses_F = new Gamma[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_F[FeatureRange] = new Gamma[2];
				this.WeightPrecisionRates_uses_F[FeatureRange][1] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_rep_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.WeightPrecisionRates_uses_F[FeatureRange][1]);
				this.WeightPrecisionRates_uses_B[FeatureRange] = new Gamma[2];
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = Gamma.Uniform();
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = Gamma.Uniform();
				this.WeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_uses_B[FeatureRange] = new Gamma[2];
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = Gamma.Uniform();
			}
			this.SharedWeightPrecisionRates_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.SharedWeightPrecisionRates_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.SharedWeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.CommonWeightPrecision_rep_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.CommonWeightPrecision_rep_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.Weights_use_B = new DistributionStructArray<Gaussian,double>(this.featureCount);
			this.Weights_rep_F_marginal = new DistributionStructArray<Gaussian,double>(this.featureCount);
			this.Weights_rep_B_toDef = new DistributionStructArray<Gaussian,double>(this.featureCount);
			this.Weights_rep_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			this.Weights_rep_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			this.WeightPrecisions_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep2_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep5_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep5_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep2_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep2_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep2_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][1] = Gamma.Uniform();
				this.ModelSelector_selector_cases_0_rep2_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep2_B[FeatureRange] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep5_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep5_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep5_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.WeightPrecisionRates_uses_F[FeatureRange][0] = Gamma.Uniform();
				this.ModelSelector_selector_cases_0_rep5_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep5_B[FeatureRange] = Bernoulli.Uniform();
				this.WeightPrecisionRates_depth0_F[FeatureRange] = Gamma.Uniform();
				this.WeightPrecisionRates_marginal_F[FeatureRange] = Gamma.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep3_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep3_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep4_uses_B = new Bernoulli[this.featureCount][];
			this.Weights_depth0_F = new DistributionStructArray<Gaussian,double>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep4_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.Weights_uses_F[FeatureRange][0] = Gaussian.Uniform();
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep4_B[FeatureRange] = Bernoulli.Uniform();
				this.Weights_depth0_F[FeatureRange] = Gaussian.Uniform();
			}
			this.WeightPrecisionRates_rep_F_marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.WeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			this.WeightPrecisionRates_rep_F = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep7_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep7_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep7_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep10_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep10_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep10_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.Weights_marginal_F = new DistributionStructArray<Gaussian,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_marginal_F[FeatureRange] = Gaussian.Uniform();
			}
			this.Changed_FeatureCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount</summary>
		private void Changed_FeatureCount_FeatureValues_InstanceCount()
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange] = GaussianOpBase.PrecisionAverageConditional(this.featureValues[InstanceRange][FeatureRange], 0.0);
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisionRates_rep_B[FeatureRange], this.WeightPrecisionRates_rep_B_toDef[FeatureRange]);
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_rep_B_toDef[FeatureRange]);
			}
			this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount and Labels and numberOfIterations and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12(int numberOfIterations)
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone) {
				return ;
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_uses_F[FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[FeatureRange], this.Weights_F[FeatureRange], 1, this.Weights_uses_F[FeatureRange][1]);
					this.Weights_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_rep_B_toDef[FeatureRange], this.Weights_uses_F[FeatureRange][1], this.Weights_rep_F_marginal[FeatureRange]);
				}
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_rep_F[FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_rep_B[FeatureRange][InstanceRange], this.Weights_rep_F_marginal[FeatureRange], InstanceRange, this.Weights_rep_F[FeatureRange][InstanceRange]);
						this.FeatureScores_F[InstanceRange][FeatureRange] = GaussianProductOpBase.ProductAverageConditional(this.featureValues[InstanceRange][FeatureRange], this.Weights_rep_F[FeatureRange][InstanceRange]);
					}
					this.Score_F[InstanceRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange]);
					this.NoisyScore_F[InstanceRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Score_F[InstanceRange], 1.0);
					this.NoisyScore_use_B[InstanceRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.labels[InstanceRange]), this.NoisyScore_F[InstanceRange]);
					this.Score_B[InstanceRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScore_use_B[InstanceRange], 1.0);
					this.FeatureScores_B[InstanceRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Score_B[InstanceRange], this.Score_F[InstanceRange], this.FeatureScores_F[InstanceRange], this.FeatureScores_B[InstanceRange]);
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_rep_B[FeatureRange][InstanceRange] = GaussianProductOpBase.BAverageConditional(this.FeatureScores_B[InstanceRange][FeatureRange], this.featureValues[InstanceRange][FeatureRange]);
						this.Weights_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalIncrement<Gaussian>(this.Weights_rep_F_marginal[FeatureRange], this.Weights_rep_F[FeatureRange][InstanceRange], this.Weights_rep_B[FeatureRange][InstanceRange]);
					}
				}
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced);
					this.Weights_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_rep_B[FeatureRange], this.Weights_rep_B_toDef[FeatureRange]);
					this.Weights_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[FeatureRange][1], this.Weights_rep_B_toDef[FeatureRange]);
					this.Weights_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Weights_uses_B[FeatureRange], this.Weights_use_B[FeatureRange]);
					this.WeightPrecisions_B[FeatureRange] = GaussianOp.PrecisionAverageConditional(this.Weights_use_B[FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_F[FeatureRange]);
					this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.CommonWeightPrecision_rep_B[FeatureRange] = GammaRatioOp_Laplace.AAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
				}
				this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_rep_B_toDef);
				this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = GammaRatioOp_Laplace.BAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
					this.SharedWeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_use_B[FeatureRange]);
					this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.Weights_F[FeatureRange] = GaussianOp.SampleAverageConditional(this.Weights_use_B[FeatureRange], 0.0, this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_B[FeatureRange]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep2_uses_B[FeatureRange][0] = Bernoulli.FromLogOdds(GammaFromShapeAndRateOp_Laplace.LogEvidenceRatio(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_F[FeatureRange], this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]));
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 1, this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
				this.ModelSelector_selector_cases_0_rep2_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep2_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep2_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep2_B[FeatureRange]);
				this.WeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], 0, this.WeightPrecisionRates_uses_F[FeatureRange][0]);
				this.WeightPrecisionRates_uses_F[FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], 1, this.WeightPrecisionRates_uses_F[FeatureRange][1]);
				this.ModelSelector_selector_cases_0_rep5_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_uses_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep5_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep5_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep5_B[FeatureRange]);
				this.WeightPrecisionRates_depth0_F[FeatureRange] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_depth0_F[FeatureRange], this.WeightPrecisionRates_uses_F[FeatureRange][0]);
				this.WeightPrecisionRates_marginal_F[FeatureRange] = DerivedVariableOp.MarginalAverageConditional<Gamma>(this.WeightPrecisionRates_use_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_marginal_F[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[13] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep2_B, this.ModelSelector_selector_cases_0_uses_B[13]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep3_B[FeatureRange] = Bernoulli.FromLogOdds(GammaRatioOp_Laplace.LogEvidenceRatio(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]));
			}
			this.ModelSelector_selector_cases_0_uses_B[17] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep3_B, this.ModelSelector_selector_cases_0_uses_B[17]);
			this.ModelSelector_selector_cases_0_uses_B[19] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F));
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][0] = Bernoulli.FromLogOdds(GaussianOp.LogEvidenceRatio(this.Weights_use_B[FeatureRange], 0.0, this.WeightPrecisions_F[FeatureRange], this.Weights_F[FeatureRange], this.WeightPrecisions_B[FeatureRange]));
				this.Weights_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[FeatureRange], this.Weights_F[FeatureRange], 0, this.Weights_uses_F[FeatureRange][0]);
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.Weights_uses_B[FeatureRange], this.Weights_F[FeatureRange], this.Weights_uses_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep4_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep4_B[FeatureRange]);
				this.Weights_depth0_F[FeatureRange] = ArrayHelper.SetTo<Gaussian>(this.Weights_depth0_F[FeatureRange], this.Weights_uses_F[FeatureRange][0]);
			}
			this.ModelSelector_selector_cases_0_uses_B[20] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep4_B, this.ModelSelector_selector_cases_0_uses_B[20]);
			this.ModelSelector_selector_cases_0_uses_B[26] = Bernoulli.FromLogOdds(ConstrainEqualRandomOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.Weights_depth0_F, this.weightConstraints));
			this.ModelSelector_selector_cases_0_uses_B[27] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep5_B, this.ModelSelector_selector_cases_0_uses_B[27]);
			this.ModelSelector_selector_cases_0_uses_B[33] = Bernoulli.FromLogOdds(ConstrainEqualRandomOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_F, this.weightPrecisionRateConstraints));
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gamma>(this.WeightPrecisionRates_rep_B_toDef[FeatureRange], this.WeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_rep_F_marginal[FeatureRange]);
			}
			for(int iteration = 0; iteration<numberOfIterations; iteration++) {
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange], this.WeightPrecisionRates_rep_F_marginal[FeatureRange], InstanceRange, this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange]);
						this.WeightPrecisionRates_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalIncrement<Gamma>(this.WeightPrecisionRates_rep_F_marginal[FeatureRange], this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange], this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.ModelSelector_selector_cases_0_rep6_rep_B[InstanceRange][FeatureRange] = Bernoulli.FromLogOdds(GaussianOpBase.LogEvidenceRatio(this.featureValues[InstanceRange][FeatureRange], 0.0, this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange]));
				}
				this.ModelSelector_selector_cases_0_rep6_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep6_rep_B[InstanceRange], this.ModelSelector_selector_cases_0_rep6_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[34] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep6_B, this.ModelSelector_selector_cases_0_uses_B[34]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisionRates_rep_B[FeatureRange], this.WeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_rep_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep7_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep7_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[35] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep7_B, this.ModelSelector_selector_cases_0_uses_B[35]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.Weights_rep_B[FeatureRange], this.Weights_uses_F[FeatureRange][1], this.Weights_rep_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep10_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep10_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[38] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep10_B, this.ModelSelector_selector_cases_0_uses_B[38]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep15_B[InstanceRange] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(this.labels[InstanceRange], this.NoisyScore_F[InstanceRange]));
			}
			this.ModelSelector_selector_cases_0_uses_B[43] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep15_B, this.ModelSelector_selector_cases_0_uses_B[43]);
			this.ModelSelector_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_uses_B, this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(this.ModelSelector_selector_cases_B[0], this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_B = CasesOp.BAverageConditional(this.ModelSelector_selector_cases_B);
			this.ModelSelector_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.ModelSelector_selector_B, this.vBernoulli4, this.ModelSelector_marginal_F);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_marginal_F[FeatureRange] = VariableOp.MarginalAverageConditional<Gaussian>(this.Weights_use_B[FeatureRange], this.Weights_F[FeatureRange], this.Weights_marginal_F[FeatureRange]);
			}
			this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount and numberOfIterationsDecreased and WeightPrecisionRateConstraints and must reset on changes to Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8(bool initialise)
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone&&((!initialise)||this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_B[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				this.Weights_F[FeatureRange] = GaussianOp.SampleAverageConditional(this.Weights_use_B[FeatureRange], 0.0, this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_B[FeatureRange]);
			}
			this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone = true;
			this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount and WeightPrecisionRateConstraints</summary>
		private void Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints()
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.WeightPrecisionRates_use_B[FeatureRange]);
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_use_B[FeatureRange]);
			}
			this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and InstanceCount</summary>
		private void Changed_FeatureCount_InstanceCount()
		{
			if (this.Changed_FeatureCount_InstanceCount_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_B[FeatureRange] = new DistributionStructArray<Gamma,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange] = Gamma.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_rep_F[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_rep_F[FeatureRange][InstanceRange] = Gaussian.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_rep_B[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.FeatureScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.FeatureScores_F[InstanceRange][FeatureRange] = Gaussian.Uniform();
				}
				this.FeatureScores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.FeatureScores_B[InstanceRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_F[FeatureRange] = new DistributionStructArray<Gamma,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange] = Gamma.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep6_rep_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.ModelSelector_selector_cases_0_rep6_rep_B[InstanceRange][FeatureRange] = Bernoulli.Uniform();
				}
			}
			this.Changed_FeatureCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and InstanceCount and numberOfIterationsDecreased and must reset on changes to FeatureValues and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10(bool initialise)
		{
			if (this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isDone&&((!initialise)||this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_rep_B[FeatureRange][InstanceRange] = Gaussian.Uniform();
				}
			}
			this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isDone = true;
			this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and numberOfIterationsDecreased and must reset on changes to FeatureValues and InstanceCount and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3(bool initialise)
		{
			if (this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone&&((!initialise)||this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_F[FeatureRange] = Gaussian.Uniform();
				this.WeightPrecisions_B[FeatureRange] = Gamma.Uniform();
				this.WeightPrecisions_F[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_F[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = default(Gamma);
				this.SharedWeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced);
				this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
				this.CommonWeightPrecision_rep_F[FeatureRange] = Gamma.Uniform();
				this.CommonWeightPrecision_rep_B[FeatureRange] = Gamma.Uniform();
				this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
				this.Weights_use_B[FeatureRange] = Gaussian.Uniform();
				this.Weights_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Weights_uses_F[FeatureRange][1]);
				this.Weights_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Weights_uses_F[FeatureRange][1]);
				this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = default(Gamma);
			}
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone = true;
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightConstraints</summary>
		private void Changed_FeatureCount_WeightConstraints()
		{
			if (this.Changed_FeatureCount_WeightConstraints_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.Weights_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[FeatureRange][0], this.weightConstraints[FeatureRange]);
			}
			this.Changed_FeatureCount_WeightConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightPrecisionRateConstraints</summary>
		private void Changed_FeatureCount_WeightPrecisionRateConstraints()
		{
			if (this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][0], this.weightPrecisionRateConstraints[FeatureRange]);
			}
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_isDone) {
				return ;
			}
			this.FeatureScores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.Score_F = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_F[InstanceRange] = Gaussian.Uniform();
			}
			this.NoisyScore_F = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_F[InstanceRange] = Gaussian.Uniform();
			}
			this.NoisyScore_use_B = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScore_use_B[InstanceRange] = Gaussian.Uniform();
			}
			this.Score_B = new DistributionStructArray<Gaussian,double>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Score_B[InstanceRange] = Gaussian.Uniform();
			}
			this.FeatureScores_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep6_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep6_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep6_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep15_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep15_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.Changed_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to FeatureCount and FeatureValues and InstanceCount and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised)) {
				return ;
			}
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.CommonWeightPrecision_F);
			this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.CommonWeightPrecision_F);
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isInitialised = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vBernoulli4 = Bernoulli.Uniform();
			this.ModelSelector_marginal_F = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				this.ModelSelector_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_uses_B = new Bernoulli[44];
			this.ModelSelector_selector_cases_0_uses_B[42] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[41] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[40] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[39] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			this.CommonWeightPrecision_F = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			this.ModelSelector_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[43] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_B = Bernoulli.Uniform();
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9_isDone = false;
					this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8_isDone = false;
				}
				this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12_isDone = false;
			}
			this.Constant();
			this.Changed_InstanceCount();
			this.Changed_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_InstanceCount_Labels_WeightConst9(initialise);
			this.Changed_FeatureCount();
			this.Changed_FeatureCount_WeightPrecisionRateConstraints();
			this.Changed_FeatureCount_InstanceCount();
			this.Changed_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_WeightConst10(initialise);
			this.Changed_FeatureCount_FeatureValues_InstanceCount();
			this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints();
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_WeightConst3(initialise);
			this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons8(initialise);
			this.Changed_FeatureCount_WeightConstraints();
			this.Changed_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstraints_WeightP12(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				return this.WeightPrecisionRateConstraints;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="ModelSelector") {
				return this.ModelSelectorMarginal();
			}
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			if (variableName=="WeightPrecisionRates") {
				return this.WeightPrecisionRatesMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="WeightPrecisionRates")&&(query=="MarginalDividedByPrior")) {
				return this.WeightPrecisionRatesMarginalDividedByPrior();
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'ModelSelector' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli ModelSelectorMarginal()
		{
			return this.ModelSelector_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionStructArray<Gaussian,double>)value;
				return ;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				this.WeightPrecisionRateConstraints = (DistributionStructArray<Gamma,double>)value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginal()
		{
			return this.WeightPrecisionRates_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginalDividedByPrior()
		{
			return this.WeightPrecisionRates_use_B;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gaussian,double> WeightsMarginalDividedByPrior()
		{
			return this.Weights_use_B;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
