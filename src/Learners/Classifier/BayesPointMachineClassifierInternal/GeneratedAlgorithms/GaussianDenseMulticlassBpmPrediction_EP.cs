// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Microsoft.ML.Probabilistic.Learners.BayesPointMachineClassifierInternal
{
	public partial class GaussianDenseMulticlassBpmPrediction_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_InstanceCount has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_InstanceCount</summary>
		public bool Changed_ClassCount_FeatureCount_InstanceCount_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10</summary>
		public bool Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10</summary>
		public bool Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isInitialised;
		/// <summary>True if Changed_ClassCount_FeatureCount has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount</summary>
		public bool Changed_ClassCount_FeatureCount_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6</summary>
		public bool Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6</summary>
		public bool Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isInitialised;
		/// <summary>True if Changed_ClassCount_FeatureCount_WeightConstraints has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints</summary>
		public bool Changed_ClassCount_FeatureCount_WeightConstraints_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors</summary>
		public bool Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_WeightPriors has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_WeightPriors</summary>
		public bool Changed_ClassCount_FeatureCount_WeightPriors_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount</summary>
		public bool Changed_ClassCount_InstanceCount_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11 has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11</summary>
		public bool Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11</summary>
		public bool Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isInitialised;
		/// <summary>True if Changed_ClassCount has executed. Set this to false to force re-execution of Changed_ClassCount</summary>
		public bool Changed_ClassCount_isDone;
		/// <summary>True if Changed_InstanceCount has executed. Set this to false to force re-execution of Changed_InstanceCount</summary>
		public bool Changed_InstanceCount_isDone;
		/// <summary>Field backing the ClassCount property</summary>
		private int classCount;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] FeatureScores_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] FeatureScores_F;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		public Discrete Labels_F_reduced;
		public Discrete[] Labels_InstanceRange__selector_B;
		public DistributionStructArray<Bernoulli,bool>[] Labels_InstanceRange__selector_cases_B;
		public Bernoulli[][][] Labels_InstanceRange__selector_cases_rep7_B;
		/// <summary>Messages from uses of 'Labels_InstanceRange__selector_cases_rep7'</summary>
		public Bernoulli[][][][] Labels_InstanceRange__selector_cases_rep7_uses_B;
		public Bernoulli[][] Labels_InstanceRange__selector_cases_rep8_B_reduced;
		/// <summary>Messages from uses of 'Labels_InstanceRange__selector_cases'</summary>
		public Bernoulli[][][] Labels_InstanceRange__selector_cases_uses_B;
		public Discrete Labels_InstanceRange__selector_rep_B_reduced;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Discrete&gt;</summary>
		public Discrete[] Labels_InstanceRange__selector_rep_B_toDef;
		public Discrete[][] Labels_InstanceRange__selector_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Discrete&gt;</summary>
		public Discrete[] Labels_InstanceRange__selector_rep_F_marginal;
		/// <summary>Messages from uses of 'Labels_InstanceRange__selector'</summary>
		public Discrete[][] Labels_InstanceRange__selector_uses_B;
		/// <summary>Messages to uses of 'Labels_InstanceRange__selector'</summary>
		public Discrete[][] Labels_InstanceRange__selector_uses_F;
		/// <summary>Message to marginal of 'Labels'</summary>
		public DistributionRefArray<Discrete,int> Labels_marginal_F;
		/// <summary>Message from use of 'Labels'</summary>
		public DistributionRefArray<Discrete,int> Labels_use_B;
		/// <summary>Messages from uses of 'Labels_use'</summary>
		public Discrete[][] Labels_uses_B;
		/// <summary>Messages to uses of 'Labels_use'</summary>
		public Discrete[][] Labels_uses_F;
		public Gaussian[][][] MaxNoisyScore_0__B;
		public Gaussian[][][] MaxNoisyScore_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][] MaxNoisyScore_rep_B_toDef;
		public Gaussian[][][] MaxNoisyScore_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][] MaxNoisyScore_rep_F_marginal;
		public Gaussian[][][] NoisyScoreDeltas_B;
		public Gaussian[][][] NoisyScoreDeltas_F;
		public Gaussian[][][] NoisyScores__B;
		public Gaussian[][] NoisyScores__B_reduced;
		public DistributionStructArray<Gaussian,double>[] NoisyScores_F;
		/// <summary>Message from use of 'NoisyScores'</summary>
		public DistributionStructArray<Gaussian,double>[] NoisyScores_use_B;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public DistributionStructArray<Gaussian,double>[] Scores_B;
		public DistributionStructArray<Gaussian,double>[] Scores_F;
		public Gaussian SharedWeightsFirst_B_reduced;
		public bool[][] vbool72_reduced;
		public Gaussian[][][] vdouble710_B;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> weightConstraints;
		/// <summary>Field backing the WeightPriors property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> weightPriors;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_F;
		public Gaussian[][][] Weights_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[][] Weights_rep_B_toDef;
		public Gaussian[][][] Weights_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public Gaussian[][] Weights_rep_F_marginal;
		/// <summary>Messages from uses of 'Weights'</summary>
		public Gaussian[][][] Weights_uses_B;
		/// <summary>Messages to uses of 'Weights'</summary>
		public Gaussian[][][] Weights_uses_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'ClassCount'</summary>
		public int ClassCount
		{
			get {
				return this.classCount;
			}
			set {
				if (this.classCount!=value) {
					this.classCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isDone = false;
					this.Changed_ClassCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightPriors_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightPriors_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = false;
				}
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WeightPriors'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightPriors
		{
			get {
				return this.weightPriors;
			}
			set {
				this.weightPriors = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightPriors_isDone = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of ClassCount</summary>
		private void Changed_ClassCount()
		{
			if (this.Changed_ClassCount_isDone) {
				return ;
			}
			this.Weights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_rep_B_toDef = new Gaussian[this.classCount][];
			this.Weights_uses_F = new Gaussian[this.classCount][][];
			this.Weights_uses_B = new Gaussian[this.classCount][][];
			this.Weights_rep_F_marginal = new Gaussian[this.classCount][];
			this.Weights_rep_F = new Gaussian[this.classCount][][];
			this.Weights_rep_B = new Gaussian[this.classCount][][];
			this.Changed_ClassCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount</summary>
		private void Changed_ClassCount_FeatureCount()
		{
			if (this.Changed_ClassCount_FeatureCount_isDone) {
				return ;
			}
			this.SharedWeightsFirst_B_reduced = default(Gaussian);
			if (this.classCount>0) {
				if (this.featureCount>0) {
					this.SharedWeightsFirst_B_reduced = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_F[ClassRange][_iv] = Gaussian.Uniform();
				}
				this.Weights_uses_F[ClassRange] = new Gaussian[this.featureCount][];
				this.Weights_uses_B[ClassRange] = new Gaussian[this.featureCount][];
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_F[ClassRange][_iv] = new Gaussian[2];
					this.Weights_uses_F[ClassRange][_iv][1] = Gaussian.Uniform();
					this.Weights_uses_B[ClassRange][_iv] = new Gaussian[2];
					this.Weights_uses_B[ClassRange][_iv][0] = Gaussian.Uniform();
				}
				this.Weights_rep_F_marginal[ClassRange] = new Gaussian[this.featureCount];
				this.Weights_rep_B_toDef[ClassRange] = new Gaussian[this.featureCount];
				this.Weights_rep_F[ClassRange] = new Gaussian[this.featureCount][];
				this.Weights_rep_B[ClassRange] = new Gaussian[this.featureCount][];
			}
			this.Changed_ClassCount_FeatureCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and FeatureValues and InstanceCount and numberOfIterations and WeightConstraints and WeightPriors</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12(int numberOfIterations)
		{
			if (this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone) {
				return ;
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_rep_F_marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_rep_B_toDef[ClassRange][FeatureRange], this.Weights_uses_F[ClassRange][FeatureRange][1], this.Weights_rep_F_marginal[ClassRange][FeatureRange]);
					}
				}
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
							this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange], this.Weights_rep_F_marginal[ClassRange][FeatureRange], InstanceRange, this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange]);
							this.FeatureScores_F[InstanceRange][ClassRange][FeatureRange] = GaussianProductOpBase.ProductAverageConditional(this.featureValues[InstanceRange][FeatureRange], this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange]);
						}
						this.Scores_F[InstanceRange][ClassRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange][ClassRange]);
						this.NoisyScores_F[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Scores_F[InstanceRange][ClassRange], 1.0);
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.Marginal<Gaussian>(this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore]);
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore], ClassRange, this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.AAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange]);
								this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								this.vdouble710_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.SumAverageConditional(this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange]);
								this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.vdouble710_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								this.Labels_InstanceRange__selector_cases_rep7_uses_B[InstanceRange][ClassMaxNoisyScore][ClassRange][0] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(true, this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]));
							}
						}
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDef<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
						this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.Marginal<Gaussian>(this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore]);
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore], ClassRange, this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
						}
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassMaxNoisyScore][7] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore]));
						for(int _a7 = 0; _a7<this.classCount; _a7++) {
							this.Labels_InstanceRange__selector_cases_rep7_B[InstanceRange][ClassMaxNoisyScore][_a7] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Labels_InstanceRange__selector_cases_rep7_uses_B[InstanceRange][ClassMaxNoisyScore][_a7], this.Labels_InstanceRange__selector_cases_rep7_B[InstanceRange][ClassMaxNoisyScore][_a7]);
						}
						this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassMaxNoisyScore][11] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Labels_InstanceRange__selector_cases_rep7_B[InstanceRange][ClassMaxNoisyScore], this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassMaxNoisyScore][11]);
						this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDef<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Labels_InstanceRange__selector_cases_B[InstanceRange][ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange], this.Labels_InstanceRange__selector_cases_B[InstanceRange][ClassRange]);
					}
					this.Labels_InstanceRange__selector_uses_B[InstanceRange][0] = IntCasesOp.IAverageConditional(this.Labels_InstanceRange__selector_cases_B[InstanceRange], this.Labels_InstanceRange__selector_uses_B[InstanceRange][0]);
					this.Labels_InstanceRange__selector_uses_F[InstanceRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Discrete>(this.Labels_InstanceRange__selector_uses_B[InstanceRange], this.Labels_uses_F[InstanceRange][1], 1, this.Labels_InstanceRange__selector_uses_F[InstanceRange][1]);
					this.Labels_InstanceRange__selector_rep_F_marginal[InstanceRange] = ReplicateOp_Divide.Marginal<Discrete>(this.Labels_InstanceRange__selector_rep_B_toDef[InstanceRange], this.Labels_InstanceRange__selector_uses_F[InstanceRange][1], this.Labels_InstanceRange__selector_rep_F_marginal[InstanceRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						if (this.classCount>0) {
							this.NoisyScores__B_reduced[InstanceRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores__B_reduced[InstanceRange][ClassRange], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassRange]);
						}
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							this.NoisyScores__B[InstanceRange][ClassRange][ClassMaxNoisyScore] = this.NoisyScores__B_reduced[InstanceRange][ClassRange];
						}
						this.Labels_InstanceRange__selector_rep_F[InstanceRange][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Discrete>(this.Labels_InstanceRange__selector_rep_B_reduced, this.Labels_InstanceRange__selector_rep_F_marginal[InstanceRange], ClassRange, this.Labels_InstanceRange__selector_rep_F[InstanceRange][ClassRange]);
						this.NoisyScores_use_B[InstanceRange][ClassRange] = GateEnterOp<double>.ValueAverageConditional<Gaussian>(this.NoisyScores__B[InstanceRange][ClassRange], this.Labels_InstanceRange__selector_rep_F[InstanceRange][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange], this.NoisyScores_use_B[InstanceRange][ClassRange]);
						this.Scores_B[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScores_use_B[InstanceRange][ClassRange], 1.0);
						this.FeatureScores_B[InstanceRange][ClassRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Scores_B[InstanceRange][ClassRange], this.Scores_F[InstanceRange][ClassRange], this.FeatureScores_F[InstanceRange][ClassRange], this.FeatureScores_B[InstanceRange][ClassRange]);
						for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
							this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange] = GaussianProductOpBase.BAverageConditional(this.FeatureScores_B[InstanceRange][ClassRange][FeatureRange], this.featureValues[InstanceRange][FeatureRange]);
							this.Weights_rep_F_marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.MarginalIncrement<Gaussian>(this.Weights_rep_F_marginal[ClassRange][FeatureRange], this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange], this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange]);
						}
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_rep_B_toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_rep_B[ClassRange][FeatureRange], this.Weights_rep_B_toDef[ClassRange][FeatureRange]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Labels_InstanceRange__selector_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Discrete>(this.Labels_InstanceRange__selector_uses_B[InstanceRange], this.Labels_InstanceRange__selector_B[InstanceRange]);
				this.Labels_uses_B[InstanceRange][1] = ArrayHelper.SetTo<Discrete>(this.Labels_uses_B[InstanceRange][1], this.Labels_InstanceRange__selector_B[InstanceRange]);
				this.Labels_use_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Discrete>(this.Labels_uses_B[InstanceRange], this.Labels_use_B[InstanceRange]);
				this.Labels_marginal_F[InstanceRange] = VariableOp.MarginalAverageConditional<Discrete>(this.Labels_use_B[InstanceRange], this.Labels_F_reduced, this.Labels_marginal_F[InstanceRange]);
			}
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and InstanceCount</summary>
		private void Changed_ClassCount_FeatureCount_InstanceCount()
		{
			if (this.Changed_ClassCount_FeatureCount_InstanceCount_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.FeatureScores_F[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.FeatureScores_F[InstanceRange][ClassRange][FeatureRange] = Gaussian.Uniform();
					}
					this.FeatureScores_B[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.FeatureScores_B[InstanceRange][ClassRange][FeatureRange] = Gaussian.Uniform();
					}
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_rep_F[ClassRange][FeatureRange] = new Gaussian[this.instanceCount];
				}
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange] = Gaussian.Uniform();
					}
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_rep_B[ClassRange][FeatureRange] = new Gaussian[this.instanceCount];
				}
			}
			this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and InstanceCount and numberOfIterationsDecreased and must reset on changes to FeatureValues and WeightConstraints and WeightPriors</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10(bool initialise)
		{
			if (this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isDone&&((!initialise)||this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isDone = true;
			this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and numberOfIterationsDecreased and must reset on changes to FeatureValues and InstanceCount and WeightConstraints and WeightPriors</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6(bool initialise)
		{
			if (this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isDone&&((!initialise)||this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isInitialised)) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_rep_F_marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Weights_uses_F[ClassRange][FeatureRange][1]);
					this.Weights_rep_B_toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Weights_uses_F[ClassRange][FeatureRange][1]);
				}
			}
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isDone = true;
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and WeightConstraints</summary>
		private void Changed_ClassCount_FeatureCount_WeightConstraints()
		{
			if (this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_B[ClassRange][_iv][0] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][_iv][0], this.weightConstraints[ClassRange][_iv]);
				}
			}
			this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and WeightConstraints and WeightPriors</summary>
		private void Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors()
		{
			if (this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors_isDone) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_uses_F[ClassRange][FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], 1, this.Weights_uses_F[ClassRange][FeatureRange][1]);
				}
			}
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and WeightPriors</summary>
		private void Changed_ClassCount_FeatureCount_WeightPriors()
		{
			if (this.Changed_ClassCount_FeatureCount_WeightPriors_isDone) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.Weights_F[ClassRange][FeatureRange] = SequentialCopyOp.SecondAverageConditional<Gaussian>(this.weightPriors[ClassRange][FeatureRange], this.SharedWeightsFirst_B_reduced, this.Weights_F[ClassRange][FeatureRange]);
				}
			}
			this.Changed_ClassCount_FeatureCount_WeightPriors_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount</summary>
		private void Changed_ClassCount_InstanceCount()
		{
			if (this.Changed_ClassCount_InstanceCount_isDone) {
				return ;
			}
			if (this.instanceCount>0) {
				this.Labels_F_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.FeatureScores_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				this.FeatureScores_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				this.Scores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				this.Scores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				this.NoisyScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.NoisyScores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				this.MaxNoisyScore_rep_F_marginal[InstanceRange] = new Gaussian[this.classCount];
				this.MaxNoisyScore_rep_B_toDef[InstanceRange] = new Gaussian[this.classCount];
			}
			this.Labels_InstanceRange__selector_rep_B_reduced = default(Discrete);
			if (this.instanceCount>0) {
				if (this.classCount>0) {
					this.Labels_InstanceRange__selector_rep_B_reduced = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				}
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Labels_uses_F[InstanceRange][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
			}
			if (this.instanceCount>0) {
				this.vbool72_reduced = new bool[this.classCount][];
				this.Labels_InstanceRange__selector_cases_rep8_B_reduced = new Bernoulli[this.classCount][];
			}
			for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
				if (this.instanceCount>0) {
					this.Labels_InstanceRange__selector_cases_rep8_B_reduced[ClassMaxNoisyScore] = new Bernoulli[this.classCount];
				}
				for(int _a8 = 0; _a8<this.classCount; _a8++) {
					if (this.instanceCount>0) {
						this.Labels_InstanceRange__selector_cases_rep8_B_reduced[ClassMaxNoisyScore][_a8] = Bernoulli.Uniform();
					}
				}
				if (this.instanceCount>0) {
					this.vbool72_reduced[ClassMaxNoisyScore] = new bool[this.classCount];
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.instanceCount>0) {
						if (ClassMaxNoisyScore!=ClassRange) {
							this.vbool72_reduced[ClassMaxNoisyScore][ClassRange] = true;
							this.Labels_InstanceRange__selector_cases_rep8_B_reduced[ClassMaxNoisyScore][ClassRange] = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, this.vbool72_reduced[ClassMaxNoisyScore][ClassRange]));
						}
					}
				}
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange] = new Bernoulli[this.classCount][];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange] = new Bernoulli[13];
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][10] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][9] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][8] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][6] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][5] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][4] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][3] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][2] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][1] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][0] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][7] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][11] = Bernoulli.Uniform();
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassRange][12] = Bernoulli.Uniform();
				}
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassMaxNoisyScore][12] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Labels_InstanceRange__selector_cases_rep8_B_reduced[ClassMaxNoisyScore], this.Labels_InstanceRange__selector_cases_uses_B[InstanceRange][ClassMaxNoisyScore][12]);
				}
				this.NoisyScoreDeltas_F[InstanceRange] = new Gaussian[this.classCount][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore] = new Gaussian[this.classCount];
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (ClassMaxNoisyScore!=ClassRange) {
							this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
					}
				}
				this.NoisyScoreDeltas_B[InstanceRange] = new Gaussian[this.classCount][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore] = new Gaussian[this.classCount];
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (ClassMaxNoisyScore!=ClassRange) {
							this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
					}
				}
				this.vdouble710_B[InstanceRange] = new Gaussian[this.classCount][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.vdouble710_B[InstanceRange][ClassMaxNoisyScore] = new Gaussian[this.classCount];
				}
				this.MaxNoisyScore_0__B[InstanceRange] = new Gaussian[this.classCount][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore] = new Gaussian[this.classCount];
				}
				this.MaxNoisyScore_rep_B[InstanceRange] = new Gaussian[this.classCount][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore] = new Gaussian[this.classCount];
				}
				this.MaxNoisyScore_rep_F[InstanceRange] = new Gaussian[this.classCount][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore] = new Gaussian[this.classCount];
				}
				this.Labels_InstanceRange__selector_cases_rep7_uses_B[InstanceRange] = new Bernoulli[this.classCount][][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.Labels_InstanceRange__selector_cases_rep7_uses_B[InstanceRange][ClassMaxNoisyScore] = new Bernoulli[this.classCount][];
					for(int _a7 = 0; _a7<this.classCount; _a7++) {
						this.Labels_InstanceRange__selector_cases_rep7_uses_B[InstanceRange][ClassMaxNoisyScore][_a7] = new Bernoulli[2];
						this.Labels_InstanceRange__selector_cases_rep7_uses_B[InstanceRange][ClassMaxNoisyScore][_a7][1] = Bernoulli.Uniform();
						this.Labels_InstanceRange__selector_cases_rep7_uses_B[InstanceRange][ClassMaxNoisyScore][_a7][0] = Bernoulli.Uniform();
					}
				}
				this.Labels_InstanceRange__selector_cases_rep7_B[InstanceRange] = new Bernoulli[this.classCount][];
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.Labels_InstanceRange__selector_cases_rep7_B[InstanceRange][ClassMaxNoisyScore] = new Bernoulli[this.classCount];
					for(int _a7 = 0; _a7<this.classCount; _a7++) {
						this.Labels_InstanceRange__selector_cases_rep7_B[InstanceRange][ClassMaxNoisyScore][_a7] = Bernoulli.Uniform();
					}
				}
				this.Labels_InstanceRange__selector_cases_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Labels_InstanceRange__selector_cases_B[InstanceRange][ClassRange] = Bernoulli.Uniform();
				}
				this.Labels_InstanceRange__selector_uses_B[InstanceRange][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				this.Labels_InstanceRange__selector_uses_F[InstanceRange][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				this.Labels_InstanceRange__selector_rep_F_marginal[InstanceRange] = ReplicateOp_Divide.MarginalInit<Discrete>(this.Labels_InstanceRange__selector_uses_F[InstanceRange][1]);
				this.Labels_InstanceRange__selector_rep_B_toDef[InstanceRange] = ReplicateOp_Divide.ToDefInit<Discrete>(this.Labels_InstanceRange__selector_uses_F[InstanceRange][1]);
				this.Labels_InstanceRange__selector_rep_F[InstanceRange] = new Discrete[this.classCount];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Labels_InstanceRange__selector_rep_F[InstanceRange][ClassRange] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				}
				this.NoisyScores__B_reduced[InstanceRange] = new Gaussian[this.classCount];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.NoisyScores__B_reduced[InstanceRange][ClassRange] = default(Gaussian);
					if (this.classCount>0) {
						this.NoisyScores__B_reduced[InstanceRange][ClassRange] = Gaussian.Uniform();
					}
				}
				this.NoisyScores__B[InstanceRange] = new Gaussian[this.classCount][];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.NoisyScores__B[InstanceRange][ClassRange] = new Gaussian[this.classCount];
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						this.NoisyScores__B[InstanceRange][ClassRange][ClassMaxNoisyScore] = this.NoisyScores__B_reduced[InstanceRange][ClassRange];
					}
				}
				this.NoisyScores_use_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.NoisyScores_use_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				this.Labels_marginal_F[InstanceRange] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				this.Labels_use_B[InstanceRange] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				this.Labels_uses_B[InstanceRange][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				this.Labels_uses_B[InstanceRange][0] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				this.Labels_InstanceRange__selector_uses_B[InstanceRange][1] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
				this.Labels_InstanceRange__selector_B[InstanceRange] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.classCount));
			}
			this.Changed_ClassCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and numberOfIterationsDecreased and must reset on changes to FeatureCount and FeatureValues and WeightConstraints and WeightPriors</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11(bool initialise)
		{
			if (this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isDone&&((!initialise)||this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore]);
					this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore]);
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (ClassMaxNoisyScore!=ClassRange) {
							this.vdouble710_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
						this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						if (ClassMaxNoisyScore!=ClassRange) {
							this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.vdouble710_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
						}
					}
				}
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDef<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
				}
			}
			this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isDone = true;
			this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_isDone) {
				return ;
			}
			this.Labels_F_reduced = default(Discrete);
			this.FeatureScores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[this.instanceCount];
			this.FeatureScores_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[this.instanceCount];
			this.Scores_F = new DistributionStructArray<Gaussian,double>[this.instanceCount];
			this.Scores_B = new DistributionStructArray<Gaussian,double>[this.instanceCount];
			this.NoisyScores_F = new DistributionStructArray<Gaussian,double>[this.instanceCount];
			this.MaxNoisyScore_rep_F_marginal = new Gaussian[this.instanceCount][];
			this.MaxNoisyScore_rep_B_toDef = new Gaussian[this.instanceCount][];
			this.Labels_uses_F = new Discrete[this.instanceCount][];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Labels_uses_F[InstanceRange] = new Discrete[2];
			}
			this.Labels_InstanceRange__selector_cases_uses_B = new Bernoulli[this.instanceCount][][];
			this.vbool72_reduced = default(bool[][]);
			this.Labels_InstanceRange__selector_cases_rep8_B_reduced = default(Bernoulli[][]);
			this.NoisyScoreDeltas_F = new Gaussian[this.instanceCount][][];
			this.NoisyScoreDeltas_B = new Gaussian[this.instanceCount][][];
			this.vdouble710_B = new Gaussian[this.instanceCount][][];
			this.MaxNoisyScore_0__B = new Gaussian[this.instanceCount][][];
			this.MaxNoisyScore_rep_B = new Gaussian[this.instanceCount][][];
			this.MaxNoisyScore_rep_F = new Gaussian[this.instanceCount][][];
			this.Labels_InstanceRange__selector_cases_rep7_uses_B = new Bernoulli[this.instanceCount][][][];
			this.Labels_InstanceRange__selector_cases_rep7_B = new Bernoulli[this.instanceCount][][];
			this.Labels_InstanceRange__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.instanceCount];
			this.Labels_InstanceRange__selector_uses_B = new Discrete[this.instanceCount][];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Labels_InstanceRange__selector_uses_B[InstanceRange] = new Discrete[2];
			}
			this.Labels_InstanceRange__selector_uses_F = new Discrete[this.instanceCount][];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Labels_InstanceRange__selector_uses_F[InstanceRange] = new Discrete[2];
			}
			this.Labels_InstanceRange__selector_rep_F_marginal = new Discrete[this.instanceCount];
			this.Labels_InstanceRange__selector_rep_B_toDef = new Discrete[this.instanceCount];
			this.Labels_InstanceRange__selector_rep_F = new Discrete[this.instanceCount][];
			this.NoisyScores__B_reduced = new Gaussian[this.instanceCount][];
			this.NoisyScores__B = new Gaussian[this.instanceCount][][];
			this.NoisyScores_use_B = new DistributionStructArray<Gaussian,double>[this.instanceCount];
			this.Labels_marginal_F = new DistributionRefArray<Discrete,int>(this.instanceCount);
			this.Labels_use_B = new DistributionRefArray<Discrete,int>(this.instanceCount);
			this.Labels_uses_B = new Discrete[this.instanceCount][];
			this.Labels_InstanceRange__selector_B = new Discrete[this.instanceCount];
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.Labels_uses_B[InstanceRange] = new Discrete[2];
			}
			this.Changed_InstanceCount_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6_isDone = false;
				}
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12_isDone = false;
			}
			this.Constant();
			this.Changed_InstanceCount();
			this.Changed_ClassCount_InstanceCount();
			this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_WeightC11(initialise);
			this.Changed_ClassCount();
			this.Changed_ClassCount_FeatureCount();
			this.Changed_ClassCount_FeatureCount_InstanceCount();
			this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_WeightC10(initialise);
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_WeightC6(initialise);
			this.Changed_ClassCount_FeatureCount_WeightPriors();
			this.Changed_ClassCount_FeatureCount_WeightConstraints();
			this.Changed_ClassCount_FeatureCount_WeightConstraints_WeightPriors();
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterations_WeightConstraints_Wei12(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="ClassCount") {
				return this.ClassCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="WeightPriors") {
				return this.WeightPriors;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Labels' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Discrete,int> LabelsMarginal()
		{
			return this.Labels_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="Labels") {
				return this.LabelsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="ClassCount") {
				this.ClassCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="WeightPriors") {
				this.WeightPriors = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
