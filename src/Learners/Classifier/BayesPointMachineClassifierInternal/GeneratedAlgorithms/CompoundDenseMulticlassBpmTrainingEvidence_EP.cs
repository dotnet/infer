// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Microsoft.ML.Probabilistic.Learners.BayesPointMachineClassifierInternal
{
	public partial class CompoundDenseMulticlassBpmTrainingEvidence_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isInitialised;
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isInitialised;
		/// <summary>True if Changed_ClassCount_FeatureCount_InstanceCount has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_InstanceCount</summary>
		public bool Changed_ClassCount_FeatureCount_InstanceCount_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15</summary>
		public bool Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15</summary>
		public bool Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isInitialised;
		/// <summary>True if Changed_ClassCount_FeatureCount has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount</summary>
		public bool Changed_ClassCount_FeatureCount_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4</summary>
		public bool Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4</summary>
		public bool Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised;
		/// <summary>True if Changed_ClassCount_FeatureCount_WeightConstraints has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints</summary>
		public bool Changed_ClassCount_FeatureCount_WeightConstraints_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount</summary>
		public bool Changed_ClassCount_InstanceCount_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_Labels has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_Labels</summary>
		public bool Changed_ClassCount_InstanceCount_Labels_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21 has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21</summary>
		public bool Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21</summary>
		public bool Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isInitialised;
		/// <summary>True if Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19 has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19</summary>
		public bool Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19</summary>
		public bool Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised;
		/// <summary>True if Changed_ClassCount has executed. Set this to false to force re-execution of Changed_ClassCount</summary>
		public bool Changed_ClassCount_isDone;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_isDone;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9 has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isInitialised;
		/// <summary>True if Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints has executed. Set this to false to force re-execution of Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints</summary>
		public bool Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone;
		/// <summary>True if Changed_FeatureCount_InstanceCount has executed. Set this to false to force re-execution of Changed_FeatureCount_InstanceCount</summary>
		public bool Changed_FeatureCount_InstanceCount_isDone;
		/// <summary>True if Changed_FeatureCount has executed. Set this to false to force re-execution of Changed_FeatureCount</summary>
		public bool Changed_FeatureCount_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2 has executed. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised;
		/// <summary>True if Changed_FeatureCount_WeightPrecisionRateConstraints has executed. Set this to false to force re-execution of Changed_FeatureCount_WeightPrecisionRateConstraints</summary>
		public bool Changed_FeatureCount_WeightPrecisionRateConstraints_isDone;
		/// <summary>True if Changed_InstanceCount has executed. Set this to false to force re-execution of Changed_InstanceCount</summary>
		public bool Changed_InstanceCount_isDone;
		/// <summary>True if Changed_InstanceCount_Labels has executed. Set this to false to force re-execution of Changed_InstanceCount_Labels</summary>
		public bool Changed_InstanceCount_Labels_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10</summary>
		public bool Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10</summary>
		public bool Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised;
		/// <summary>Field backing the ClassCount property</summary>
		private int classCount;
		public Gamma CommonWeightPrecision_F;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public Gamma CommonWeightPrecision_rep_B_toDef;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gamma&gt;</summary>
		public Gamma CommonWeightPrecision_rep_F_marginal;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> FeatureScores_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> FeatureScores_F;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		/// <summary>Field backing the Labels property</summary>
		private int[] labels;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_0__B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> MaxNoisyScore_rep_B_toDef;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> MaxNoisyScore_rep_F_marginal;
		/// <summary>Message to marginal of 'ModelSelector'</summary>
		public Bernoulli ModelSelector_marginal_F;
		public Bernoulli ModelSelector_selector_B;
		public Bernoulli ModelSelector_selector_cases_0_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep10_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep10'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep10_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep11_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep11_rep_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep12_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep12'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep12_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep18_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep18_rep_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep18_rep'</summary>
		public Bernoulli[][][] ModelSelector_selector_cases_0_rep18_rep_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep21_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep28_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep28'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep28_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep3_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep3'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep3_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep32_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep32_rep_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep32_rep'</summary>
		public Bernoulli[][][] ModelSelector_selector_cases_0_rep32_rep_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep33_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep33_rep_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep36_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep37_B;
		public Bernoulli ModelSelector_selector_cases_0_rep37_B_reduced;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep4_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep5_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep5_rep_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep5_rep'</summary>
		public Bernoulli[][][] ModelSelector_selector_cases_0_rep5_rep_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep6_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep6'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep6_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep9_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep9_rep_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep9_rep'</summary>
		public Bernoulli[][][] ModelSelector_selector_cases_0_rep9_rep_uses_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0'</summary>
		public Bernoulli[] ModelSelector_selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScoreDeltas_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScoreDeltas_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScores_ClassRange_ClassMaxNoisyScore_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> NoisyScores_F;
		/// <summary>Message from use of 'NoisyScores'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> NoisyScores_use_B;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Scores_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Scores_F;
		/// <summary>Buffer for GammaFromShapeAndRateOp_Laplace.LogEvidenceRatio</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_B_FeatureRange__Q;
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_F;
		/// <summary>Message from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_use_B;
		/// <summary>Messages from uses of 'SharedWeightPrecisionRates_use'</summary>
		public Gamma[][] SharedWeightPrecisionRates_uses_B;
		/// <summary>Messages to uses of 'SharedWeightPrecisionRates_use'</summary>
		public Gamma[][] SharedWeightPrecisionRates_uses_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeights_F;
		/// <summary>Message from use of 'SharedWeights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeights_use_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeightsFirst_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> TransposedWeights_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> TransposedWeights_F;
		public double TransposedWeightSums_reduced;
		/// <summary>The constant 'vBernoulli6'</summary>
		public Bernoulli vBernoulli6;
		/// <summary>The constant 'vbool57'</summary>
		public bool[][][] vbool57;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> vdouble574_B;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> weightConstraints;
		/// <summary>Field backing the WeightPrecisionRateConstraints property</summary>
		private DistributionStructArray<Gamma,double> weightPrecisionRateConstraints;
		public Gamma WeightPrecisionRateRates_F_reduced;
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_F;
		/// <summary>Message to marginal of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisionRates_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisionRates_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_rep_F_marginal;
		/// <summary>Message from use of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_use_B;
		/// <summary>Messages from uses of 'WeightPrecisionRates_use'</summary>
		public Gamma[][] WeightPrecisionRates_uses_B;
		/// <summary>Messages to uses of 'WeightPrecisionRates_use'</summary>
		public Gamma[][] WeightPrecisionRates_uses_F;
		/// <summary>Buffer for GammaRatioOp_Laplace.LogEvidenceRatio</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_B_FeatureRange__Q;
		public DistributionStructArray<Gamma,double> WeightPrecisions_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisions_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisions_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_rep_F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth0_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_F;
		/// <summary>Message to marginal of 'Weights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_marginal_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Weights_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_rep_B_toDef;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Weights_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_rep_F_marginal;
		/// <summary>Message from use of 'Weights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_use_B;
		/// <summary>Messages from uses of 'Weights_use'</summary>
		public Gaussian[][][] Weights_uses_B;
		/// <summary>Messages to uses of 'Weights_use'</summary>
		public Gaussian[][][] Weights_uses_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'ClassCount'</summary>
		public int ClassCount
		{
			get {
				return this.classCount;
			}
			set {
				if (this.classCount!=value) {
					this.classCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_isDone = false;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isDone = false;
					this.Changed_ClassCount_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised = false;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = false;
					this.Changed_FeatureCount_isDone = false;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = false;
					this.Changed_FeatureCount_InstanceCount_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
				this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_isDone = false;
					this.Changed_InstanceCount_Labels_isDone = false;
					this.Changed_ClassCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_isDone = false;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = false;
					this.Changed_FeatureCount_InstanceCount_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public int[] Labels
		{
			get {
				return this.labels;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'Labels\'");
				}
				this.labels = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InstanceCount_Labels_isDone = false;
				this.Changed_ClassCount_InstanceCount_Labels_isDone = false;
				this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WeightPrecisionRateConstraints'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRateConstraints
		{
			get {
				return this.weightPrecisionRateConstraints;
			}
			set {
				this.weightPrecisionRateConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = false;
				this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised = false;
				this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of ClassCount</summary>
		private void Changed_ClassCount()
		{
			if (this.Changed_ClassCount_isDone) {
				return ;
			}
			this.SharedWeights_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_uses_B = new Gaussian[this.classCount][][];
			this.Weights_rep_B_toDef = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_uses_F = new Gaussian[this.classCount][][];
			this.Weights_rep_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.classCount);
			this.Weights_rep_F_marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.SharedWeightsFirst_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.SharedWeights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_rep_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.classCount);
			this.ModelSelector_selector_cases_0_rep5_rep_uses_B = new Bernoulli[this.classCount][][];
			this.ModelSelector_selector_cases_0_rep5_B = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			this.ModelSelector_selector_cases_0_rep5_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.classCount);
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep5_B[ClassRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep9_rep_uses_B = new Bernoulli[this.classCount][][];
			this.ModelSelector_selector_cases_0_rep9_B = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			this.ModelSelector_selector_cases_0_rep9_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.classCount);
			this.Weights_depth0_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep9_B[ClassRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep18_rep_uses_B = new Bernoulli[this.classCount][][];
			this.ModelSelector_selector_cases_0_rep18_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.classCount);
			this.ModelSelector_selector_cases_0_rep18_B = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep18_B[ClassRange] = Bernoulli.Uniform();
			}
			this.Weights_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Changed_ClassCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount</summary>
		private void Changed_ClassCount_FeatureCount()
		{
			if (this.Changed_ClassCount_FeatureCount_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_rep_B[FeatureRange] = new DistributionStructArray<Gamma,double>(this.classCount);
				this.WeightPrecisions_rep_F[FeatureRange] = new DistributionStructArray<Gamma,double>(this.classCount);
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.SharedWeights_use_B[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				this.Weights_use_B[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				this.Weights_uses_B[ClassRange] = new Gaussian[this.featureCount][];
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_B[ClassRange][_iv] = new Gaussian[2];
					this.Weights_uses_B[ClassRange][_iv][0] = Gaussian.Uniform();
				}
				this.Weights_uses_F[ClassRange] = new Gaussian[this.featureCount][];
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_F[ClassRange][_iv] = new Gaussian[2];
					this.Weights_uses_F[ClassRange][_iv][0] = Gaussian.Uniform();
				}
				this.Weights_rep_B_toDef[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				this.Weights_rep_F[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
				this.Weights_rep_F_marginal[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				this.Weights_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.TransposedWeights_B[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.TransposedWeights_F[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.SharedWeightsFirst_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				this.SharedWeights_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				this.Weights_rep_B[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
				this.ModelSelector_selector_cases_0_rep5_rep_uses_B[ClassRange] = new Bernoulli[this.featureCount][];
				this.ModelSelector_selector_cases_0_rep5_rep_B[ClassRange] = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep5_rep_uses_B[ClassRange][FeatureRange] = new Bernoulli[2];
					this.ModelSelector_selector_cases_0_rep5_rep_uses_B[ClassRange][FeatureRange][1] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep5_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep5_rep_B[ClassRange][FeatureRange] = Bernoulli.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange] = new Bernoulli[this.featureCount][];
				this.ModelSelector_selector_cases_0_rep9_rep_B[ClassRange] = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange][FeatureRange] = new Bernoulli[3];
					this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange][FeatureRange][1] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange][FeatureRange][2] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep9_rep_B[ClassRange][FeatureRange] = Bernoulli.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_depth0_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_depth0_F[ClassRange][_iv] = Gaussian.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep18_rep_uses_B[ClassRange] = new Bernoulli[this.featureCount][];
				this.ModelSelector_selector_cases_0_rep18_rep_B[ClassRange] = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep18_rep_uses_B[ClassRange][FeatureRange] = new Bernoulli[2];
					this.ModelSelector_selector_cases_0_rep18_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep18_rep_uses_B[ClassRange][FeatureRange][1] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep18_rep_B[ClassRange][FeatureRange] = Bernoulli.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_marginal_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_marginal_F[ClassRange][_iv] = Gaussian.Uniform();
				}
			}
			this.Changed_ClassCount_FeatureCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and FeatureValues and InstanceCount and Labels and numberOfIterations and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23(int numberOfIterations)
		{
			if (this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone) {
				return ;
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisions_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisions_rep_B[FeatureRange], this.WeightPrecisions_rep_B_toDef[FeatureRange]);
					this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced);
					this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.CommonWeightPrecision_rep_B[FeatureRange] = GammaRatioOp_Laplace.AAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
				}
				this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_rep_B_toDef);
				this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
					this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gamma>(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_rep_F_marginal[FeatureRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.WeightPrecisions_rep_B[FeatureRange][ClassRange], this.WeightPrecisions_rep_F_marginal[FeatureRange], ClassRange, this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
						this.SharedWeights_F[ClassRange][FeatureRange] = GaussianOp.SampleAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], 0.0, this.WeightPrecisions_rep_F[FeatureRange][ClassRange], this.WeightPrecisions_rep_B[FeatureRange][ClassRange]);
						this.SharedWeightsFirst_F[ClassRange][FeatureRange] = SequentialCopyOp.FirstAverageConditional<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.Weights_use_B[ClassRange][FeatureRange], this.SharedWeightsFirst_F[ClassRange][FeatureRange]);
						this.TransposedWeights_F[FeatureRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.TransposedWeights_F[FeatureRange][ClassRange], this.SharedWeightsFirst_F[ClassRange][FeatureRange]);
					}
					this.TransposedWeights_B[FeatureRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(0.0, this.TransposedWeights_F[FeatureRange], this.TransposedWeights_B[FeatureRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Weights_F[ClassRange][FeatureRange] = SequentialCopyOp.SecondAverageConditional<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_F[ClassRange][FeatureRange]);
						this.Weights_uses_F[ClassRange][FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], 1, this.Weights_uses_F[ClassRange][FeatureRange][1]);
						this.Weights_rep_F_marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_rep_B_toDef[ClassRange][FeatureRange], this.Weights_uses_F[ClassRange][FeatureRange][1], this.Weights_rep_F_marginal[ClassRange][FeatureRange]);
					}
				}
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange], this.Weights_rep_F_marginal[ClassRange][FeatureRange], InstanceRange, this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange]);
							this.FeatureScores_F[InstanceRange][ClassRange][FeatureRange] = GaussianProductOpBase.ProductAverageConditional(this.featureValues[InstanceRange][FeatureRange], this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange]);
						}
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Scores_F[InstanceRange][ClassRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange][ClassRange]);
						this.NoisyScores_F[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Scores_F[InstanceRange][ClassRange], 1.0);
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.Marginal<Gaussian>(this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore]);
						}
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
								this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore], ClassRange, this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								if (ClassMaxNoisyScore!=ClassRange) {
									this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.AAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange]);
									this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									this.vdouble574_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.SumAverageConditional(this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange]);
									this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.vdouble574_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								}
							}
						}
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDef<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
						}
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
								if (ClassMaxNoisyScore!=ClassRange) {
									this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.BAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								}
								this.NoisyScores_use_B[InstanceRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_use_B[InstanceRange][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							}
						}
						this.Scores_B[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScores_use_B[InstanceRange][ClassRange], 1.0);
						this.FeatureScores_B[InstanceRange][ClassRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Scores_B[InstanceRange][ClassRange], this.Scores_F[InstanceRange][ClassRange], this.FeatureScores_F[InstanceRange][ClassRange], this.FeatureScores_B[InstanceRange][ClassRange]);
					}
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
							this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange] = GaussianProductOpBase.BAverageConditional(this.FeatureScores_B[InstanceRange][ClassRange][FeatureRange], this.featureValues[InstanceRange][FeatureRange]);
							this.Weights_rep_F_marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.MarginalIncrement<Gaussian>(this.Weights_rep_F_marginal[ClassRange][FeatureRange], this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange], this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange]);
						}
					}
				}
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = GammaRatioOp_Laplace.BAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
					this.SharedWeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_use_B[FeatureRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Weights_rep_B_toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_rep_B[ClassRange][FeatureRange], this.Weights_rep_B_toDef[ClassRange][FeatureRange]);
						this.Weights_uses_B[ClassRange][FeatureRange][1] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange][1], this.Weights_rep_B_toDef[ClassRange][FeatureRange]);
						this.Weights_use_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_use_B[ClassRange][FeatureRange]);
						this.SharedWeights_use_B[ClassRange][FeatureRange] = SequentialCopyOp.ValueAverageConditional<Gaussian>(this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_use_B[ClassRange][FeatureRange], this.SharedWeights_use_B[ClassRange][FeatureRange]);
						this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = GaussianOp.PrecisionAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][0] = Bernoulli.FromLogOdds(GammaFromShapeAndRateOp_Laplace.LogEvidenceRatio(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_F[FeatureRange], this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]));
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 1, this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep3_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep3_B[FeatureRange]);
				this.WeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], 0, this.WeightPrecisionRates_uses_F[FeatureRange][0]);
				this.WeightPrecisionRates_uses_F[FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], 1, this.WeightPrecisionRates_uses_F[FeatureRange][1]);
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_uses_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep10_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep10_B[FeatureRange]);
				this.WeightPrecisionRates_depth0_F[FeatureRange] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_depth0_F[FeatureRange], this.WeightPrecisionRates_uses_F[FeatureRange][0]);
				this.WeightPrecisionRates_marginal_F[FeatureRange] = DerivedVariableOp.MarginalAverageConditional<Gamma>(this.WeightPrecisionRates_use_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_marginal_F[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[14] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep3_B, this.ModelSelector_selector_cases_0_uses_B[14]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep4_B[FeatureRange] = Bernoulli.FromLogOdds(GammaRatioOp_Laplace.LogEvidenceRatio(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]));
			}
			this.ModelSelector_selector_cases_0_uses_B[18] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep4_B, this.ModelSelector_selector_cases_0_uses_B[18]);
			this.ModelSelector_selector_cases_0_uses_B[20] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F));
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep5_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.FromLogOdds(GaussianOp.LogEvidenceRatio(this.SharedWeights_use_B[ClassRange][FeatureRange], 0.0, this.WeightPrecisions_rep_F[FeatureRange][ClassRange], this.SharedWeights_F[ClassRange][FeatureRange], this.WeightPrecisions_rep_B[FeatureRange][ClassRange]));
					this.ModelSelector_selector_cases_0_rep5_rep_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep5_rep_uses_B[ClassRange][FeatureRange], this.ModelSelector_selector_cases_0_rep5_rep_B[ClassRange][FeatureRange]);
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep5_B[ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep5_rep_B[ClassRange], this.ModelSelector_selector_cases_0_rep5_B[ClassRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[21] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep5_B, this.ModelSelector_selector_cases_0_uses_B[21]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep6_uses_B[FeatureRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisions_rep_B[FeatureRange], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_rep_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep6_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep6_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep6_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[22] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep6_B, this.ModelSelector_selector_cases_0_uses_B[22]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_uses_F[ClassRange][FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], 0, this.Weights_uses_F[ClassRange][FeatureRange][0]);
					this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.FromLogOdds(SequentialCopyOp.LogEvidenceRatio<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_use_B[ClassRange][FeatureRange]));
					this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange][FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], this.Weights_uses_F[ClassRange][FeatureRange]));
					this.ModelSelector_selector_cases_0_rep9_rep_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep9_rep_uses_B[ClassRange][FeatureRange], this.ModelSelector_selector_cases_0_rep9_rep_B[ClassRange][FeatureRange]);
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep9_B[ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep9_rep_B[ClassRange], this.ModelSelector_selector_cases_0_rep9_B[ClassRange]);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_depth0_F[ClassRange][_iv] = ArrayHelper.SetTo<Gaussian>(this.Weights_depth0_F[ClassRange][_iv], this.Weights_uses_F[ClassRange][_iv][0]);
				}
			}
			this.ModelSelector_selector_cases_0_uses_B[29] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep9_B, this.ModelSelector_selector_cases_0_uses_B[29]);
			this.ModelSelector_selector_cases_0_uses_B[35] = Bernoulli.FromLogOdds(ConstrainEqualRandomOp<double[][]>.LogEvidenceRatio<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.Weights_depth0_F, this.weightConstraints));
			this.ModelSelector_selector_cases_0_uses_B[36] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep10_B, this.ModelSelector_selector_cases_0_uses_B[36]);
			this.ModelSelector_selector_cases_0_uses_B[42] = Bernoulli.FromLogOdds(ConstrainEqualRandomOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_F, this.weightPrecisionRateConstraints));
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gamma>(this.WeightPrecisionRates_rep_B_toDef[FeatureRange], this.WeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_rep_F_marginal[FeatureRange]);
			}
			for(int iteration = 0; iteration<numberOfIterations; iteration++) {
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
						this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange], this.WeightPrecisionRates_rep_F_marginal[FeatureRange], InstanceRange, this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange]);
						this.WeightPrecisionRates_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalIncrement<Gamma>(this.WeightPrecisionRates_rep_F_marginal[FeatureRange], this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange], this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.ModelSelector_selector_cases_0_rep11_rep_B[InstanceRange][FeatureRange] = Bernoulli.FromLogOdds(GaussianOpBase.LogEvidenceRatio(this.featureValues[InstanceRange][FeatureRange], 0.0, this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange]));
				}
				this.ModelSelector_selector_cases_0_rep11_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep11_rep_B[InstanceRange], this.ModelSelector_selector_cases_0_rep11_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[43] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep11_B, this.ModelSelector_selector_cases_0_uses_B[43]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep12_uses_B[FeatureRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisionRates_rep_B[FeatureRange], this.WeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_rep_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep12_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep12_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep12_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[44] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep12_B, this.ModelSelector_selector_cases_0_uses_B[44]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep18_rep_uses_B[ClassRange][FeatureRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.Weights_rep_B[ClassRange][FeatureRange], this.Weights_uses_F[ClassRange][FeatureRange][1], this.Weights_rep_F[ClassRange][FeatureRange]));
					this.ModelSelector_selector_cases_0_rep18_rep_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep18_rep_uses_B[ClassRange][FeatureRange], this.ModelSelector_selector_cases_0_rep18_rep_B[ClassRange][FeatureRange]);
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep18_B[ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep18_rep_B[ClassRange], this.ModelSelector_selector_cases_0_rep18_B[ClassRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[50] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep18_B, this.ModelSelector_selector_cases_0_uses_B[50]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.ModelSelector_selector_cases_0_rep28_uses_B[InstanceRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore]));
					}
				}
				this.ModelSelector_selector_cases_0_rep28_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep28_uses_B[InstanceRange], this.ModelSelector_selector_cases_0_rep28_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[60] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep28_B, this.ModelSelector_selector_cases_0_uses_B[60]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.ModelSelector_selector_cases_0_rep32_rep_uses_B[InstanceRange][ClassRange][0] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(true, this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]));
							}
						}
					}
					this.ModelSelector_selector_cases_0_rep32_rep_B[InstanceRange][ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep32_rep_uses_B[InstanceRange][ClassRange], this.ModelSelector_selector_cases_0_rep32_rep_B[InstanceRange][ClassRange]);
				}
				this.ModelSelector_selector_cases_0_rep32_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep32_rep_B[InstanceRange], this.ModelSelector_selector_cases_0_rep32_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[64] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep32_B, this.ModelSelector_selector_cases_0_uses_B[64]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep36_B[FeatureRange] = Bernoulli.FromLogOdds(FastSumOp.LogEvidenceRatio(0.0, this.TransposedWeights_F[FeatureRange]));
			}
			this.ModelSelector_selector_cases_0_uses_B[69] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep36_B, this.ModelSelector_selector_cases_0_uses_B[69]);
			this.ModelSelector_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_uses_B, this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(this.ModelSelector_selector_cases_B[0], this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_B = CasesOp.BAverageConditional(this.ModelSelector_selector_cases_B);
			this.ModelSelector_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.ModelSelector_selector_B, this.vBernoulli6, this.ModelSelector_marginal_F);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_marginal_F[ClassRange][FeatureRange] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.Weights_use_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], this.Weights_marginal_F[ClassRange][FeatureRange]);
				}
			}
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and FeatureValues and InstanceCount and Labels and numberOfIterationsDecreased and WeightConstraints and WeightPrecisionRateConstraints</summary>
		private void Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22()
		{
			if (this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange], this.Weights_rep_F_marginal[ClassRange][FeatureRange], InstanceRange, this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange]);
						this.FeatureScores_F[InstanceRange][ClassRange][FeatureRange] = GaussianProductOpBase.ProductAverageConditional(this.featureValues[InstanceRange][FeatureRange], this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_F[InstanceRange][ClassRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange][ClassRange]);
					this.NoisyScores_F[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Scores_F[InstanceRange][ClassRange], 1.0);
				}
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.Marginal<Gaussian>(this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore], ClassRange, this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.AAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange]);
								this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.BAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							}
							this.NoisyScores_use_B[InstanceRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_use_B[InstanceRange][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
						}
					}
					this.Scores_B[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScores_use_B[InstanceRange][ClassRange], 1.0);
					this.FeatureScores_B[InstanceRange][ClassRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Scores_B[InstanceRange][ClassRange], this.Scores_F[InstanceRange][ClassRange], this.FeatureScores_F[InstanceRange][ClassRange], this.FeatureScores_B[InstanceRange][ClassRange]);
				}
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange] = GaussianProductOpBase.BAverageConditional(this.FeatureScores_B[InstanceRange][ClassRange][FeatureRange], this.featureValues[InstanceRange][FeatureRange]);
					}
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_rep_B_toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDef<Gaussian>(this.Weights_rep_B[ClassRange][FeatureRange], this.Weights_rep_B_toDef[ClassRange][FeatureRange]);
					this.Weights_uses_B[ClassRange][FeatureRange][1] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange][1], this.Weights_rep_B_toDef[ClassRange][FeatureRange]);
					this.Weights_use_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_use_B[ClassRange][FeatureRange]);
					this.SharedWeights_use_B[ClassRange][FeatureRange] = SequentialCopyOp.ValueAverageConditional<Gaussian>(this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_use_B[ClassRange][FeatureRange], this.SharedWeights_use_B[ClassRange][FeatureRange]);
					this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = GaussianOp.PrecisionAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
				}
			}
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and FeatureValues and InstanceCount and numberOfIterationsDecreased and WeightConstraints and WeightPrecisionRateConstraints and must reset on changes to Labels</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16(bool initialise)
		{
			if (this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone&&((!initialise)||this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_uses_F[ClassRange][FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], 1, this.Weights_uses_F[ClassRange][FeatureRange][1]);
					this.Weights_rep_F_marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.Marginal<Gaussian>(this.Weights_rep_B_toDef[ClassRange][FeatureRange], this.Weights_uses_F[ClassRange][FeatureRange][1], this.Weights_rep_F_marginal[ClassRange][FeatureRange]);
				}
			}
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = true;
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and FeatureValues and InstanceCount and numberOfIterationsDecreased and WeightPrecisionRateConstraints and must reset on changes to Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11(bool initialise)
		{
			if (this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone&&((!initialise)||this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.WeightPrecisions_rep_B[FeatureRange][ClassRange], this.WeightPrecisions_rep_F_marginal[FeatureRange], ClassRange, this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
					this.SharedWeights_F[ClassRange][FeatureRange] = GaussianOp.SampleAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], 0.0, this.WeightPrecisions_rep_F[FeatureRange][ClassRange], this.WeightPrecisions_rep_B[FeatureRange][ClassRange]);
					this.SharedWeightsFirst_F[ClassRange][FeatureRange] = SequentialCopyOp.FirstAverageConditional<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.Weights_use_B[ClassRange][FeatureRange], this.SharedWeightsFirst_F[ClassRange][FeatureRange]);
					this.TransposedWeights_F[FeatureRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.TransposedWeights_F[FeatureRange][ClassRange], this.SharedWeightsFirst_F[ClassRange][FeatureRange]);
				}
				this.TransposedWeights_B[FeatureRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(0.0, this.TransposedWeights_F[FeatureRange], this.TransposedWeights_B[FeatureRange]);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_F[ClassRange][FeatureRange] = SequentialCopyOp.SecondAverageConditional<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_F[ClassRange][FeatureRange]);
				}
			}
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone = true;
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and InstanceCount</summary>
		private void Changed_ClassCount_FeatureCount_InstanceCount()
		{
			if (this.Changed_ClassCount_FeatureCount_InstanceCount_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_rep_F[ClassRange][FeatureRange] = new DistributionStructArray<Gaussian,double>(this.instanceCount);
					this.Weights_rep_B[ClassRange][FeatureRange] = new DistributionStructArray<Gaussian,double>(this.instanceCount);
				}
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.FeatureScores_F[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
					this.FeatureScores_B[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				}
			}
			this.Changed_ClassCount_FeatureCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and InstanceCount and numberOfIterationsDecreased and must reset on changes to FeatureValues and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15(bool initialise)
		{
			if (this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isDone&&((!initialise)||this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Weights_rep_F[ClassRange][FeatureRange][InstanceRange] = Gaussian.Uniform();
						this.Weights_rep_B[ClassRange][FeatureRange][InstanceRange] = Gaussian.Uniform();
						this.FeatureScores_F[InstanceRange][ClassRange][FeatureRange] = Gaussian.Uniform();
						this.FeatureScores_B[InstanceRange][ClassRange][FeatureRange] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isDone = true;
			this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and numberOfIterationsDecreased and must reset on changes to FeatureValues and InstanceCount and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4(bool initialise)
		{
			if (this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isDone&&((!initialise)||this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = Gamma.Uniform();
					this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = Gamma.Uniform();
					this.SharedWeights_use_B[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_use_B[ClassRange][_iv] = Gaussian.Uniform();
					this.Weights_uses_B[ClassRange][_iv][1] = Gaussian.Uniform();
					this.Weights_uses_F[ClassRange][_iv][1] = Gaussian.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_rep_B_toDef[ClassRange][FeatureRange] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.Weights_uses_F[ClassRange][FeatureRange][1]);
					this.Weights_rep_F_marginal[ClassRange][FeatureRange] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.Weights_uses_F[ClassRange][FeatureRange][1]);
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_F[ClassRange][_iv] = Gaussian.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.TransposedWeights_B[FeatureRange][ClassRange] = Gaussian.Uniform();
					this.TransposedWeights_F[FeatureRange][ClassRange] = Gaussian.Uniform();
					this.SharedWeightsFirst_F[ClassRange][FeatureRange] = Gaussian.Uniform();
					this.SharedWeights_F[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isDone = true;
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and WeightConstraints</summary>
		private void Changed_ClassCount_FeatureCount_WeightConstraints()
		{
			if (this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_B[ClassRange][_iv][0] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][_iv][0], this.weightConstraints[ClassRange][_iv]);
				}
			}
			this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount</summary>
		private void Changed_ClassCount_InstanceCount()
		{
			if (this.Changed_ClassCount_InstanceCount_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.FeatureScores_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				this.Scores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.NoisyScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.NoisyScores_use_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.Scores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.FeatureScores_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				this.ModelSelector_selector_cases_0_rep32_rep_uses_B[InstanceRange] = new Bernoulli[this.classCount][];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep32_rep_uses_B[InstanceRange][ClassRange] = new Bernoulli[2];
					this.ModelSelector_selector_cases_0_rep32_rep_uses_B[InstanceRange][ClassRange][1] = Bernoulli.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep32_rep_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep32_rep_B[InstanceRange][ClassRange] = Bernoulli.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep33_rep_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			}
			this.Changed_ClassCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and Labels</summary>
		private void Changed_ClassCount_InstanceCount_Labels()
		{
			if (this.Changed_ClassCount_InstanceCount_Labels_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.MaxNoisyScore_rep_F_marginal[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.MaxNoisyScore_0__B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.vdouble574_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.vdouble574_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.MaxNoisyScore_rep_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.MaxNoisyScore_rep_B_toDef[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.MaxNoisyScore_rep_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.NoisyScoreDeltas_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.NoisyScoreDeltas_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.ModelSelector_selector_cases_0_rep21_B[InstanceRange] = Bernoulli.FromLogOdds(DiscreteUniform.LogEvidenceRatio(this.labels[InstanceRange], this.classCount));
			}
			this.ModelSelector_selector_cases_0_uses_B[53] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep21_B, this.ModelSelector_selector_cases_0_uses_B[53]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep32_rep_uses_B[InstanceRange][ClassRange][0] = Bernoulli.Uniform();
				}
				this.vbool57[InstanceRange] = new bool[this.classCount][];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep33_rep_B[InstanceRange][ClassRange] = Bernoulli.Uniform();
				}
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.vbool57[InstanceRange][ClassMaxNoisyScore] = new bool[this.classCount];
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.vbool57[InstanceRange][ClassMaxNoisyScore][ClassRange] = true;
								this.ModelSelector_selector_cases_0_rep33_rep_B[InstanceRange][ClassRange] = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, this.vbool57[InstanceRange][ClassMaxNoisyScore][ClassRange]));
							}
						}
					}
				}
				this.ModelSelector_selector_cases_0_rep33_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep33_rep_B[InstanceRange], this.ModelSelector_selector_cases_0_rep33_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[65] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep33_B, this.ModelSelector_selector_cases_0_uses_B[65]);
			this.Changed_ClassCount_InstanceCount_Labels_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and Labels and numberOfIterationsDecreased and must reset on changes to FeatureCount and FeatureValues and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21(bool initialise)
		{
			if (this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isDone&&((!initialise)||this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
								this.vdouble574_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
							this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
					}
				}
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							if (ClassMaxNoisyScore!=ClassRange) {
								this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.vdouble574_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							}
						}
					}
				}
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDef<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
								this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
					}
					this.NoisyScores_use_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
			}
			this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isDone = true;
			this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and numberOfIterationsDecreased and must reset on changes to FeatureCount and FeatureValues and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19(bool initialise)
		{
			if (this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isDone&&((!initialise)||this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
					this.NoisyScores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
					this.Scores_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
			}
			this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isDone = true;
			this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount</summary>
		private void Changed_FeatureCount()
		{
			if (this.Changed_FeatureCount_isDone) {
				return ;
			}
			this.ModelSelector_selector_cases_0_rep3_uses_B = new Bernoulli[this.featureCount][];
			this.WeightPrecisionRates_depth0_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep3_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep10_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			this.SharedWeightPrecisionRates_uses_F = new Gamma[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_uses_F[FeatureRange] = new Gamma[2];
			}
			this.WeightPrecisions_rep_B_toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisions_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisions_rep_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			this.WeightPrecisions_rep_F = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			this.WeightPrecisions_rep_F_marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.SharedWeightPrecisionRates_uses_B = new Gamma[this.featureCount][];
			this.WeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisionRates_uses_B = new Gamma[this.featureCount][];
			this.WeightPrecisionRates_rep_B_toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisionRates_uses_F = new Gamma[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_F[FeatureRange] = new Gamma[2];
				this.WeightPrecisionRates_uses_F[FeatureRange][1] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_rep_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.WeightPrecisionRates_uses_F[FeatureRange][1]);
				this.WeightPrecisionRates_uses_B[FeatureRange] = new Gamma[2];
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = Gamma.Uniform();
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = Gamma.Uniform();
				this.WeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_uses_B[FeatureRange] = new Gamma[2];
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = Gamma.Uniform();
			}
			this.SharedWeightPrecisionRates_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.SharedWeightPrecisionRates_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.SharedWeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisionRateRates_F_reduced = default(Gamma);
			if (this.featureCount>0) {
				this.WeightPrecisionRateRates_F_reduced = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			}
			this.CommonWeightPrecision_rep_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.CommonWeightPrecision_rep_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.TransposedWeights_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			this.TransposedWeights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			this.WeightPrecisions_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep10_uses_B = new Bernoulli[this.featureCount][];
			this.WeightPrecisionRates_marginal_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][1] = Gamma.Uniform();
				this.ModelSelector_selector_cases_0_rep3_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep3_B[FeatureRange] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.WeightPrecisionRates_uses_F[FeatureRange][0] = Gamma.Uniform();
				this.ModelSelector_selector_cases_0_rep10_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep10_B[FeatureRange] = Bernoulli.Uniform();
				this.WeightPrecisionRates_depth0_F[FeatureRange] = Gamma.Uniform();
				this.WeightPrecisionRates_marginal_F[FeatureRange] = Gamma.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep4_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep4_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep6_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep6_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep6_uses_B[FeatureRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep6_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep6_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep6_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.WeightPrecisionRates_rep_F_marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.WeightPrecisionRates_uses_F[FeatureRange][1]);
			}
			this.WeightPrecisionRates_rep_F = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep12_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep12_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep12_uses_B[FeatureRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep12_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep12_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep12_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep36_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep36_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.TransposedWeightSums_reduced = default(double);
			if (this.featureCount>0) {
				this.TransposedWeightSums_reduced = 0.0;
			}
			this.ModelSelector_selector_cases_0_rep37_B_reduced = default(Bernoulli);
			if (this.featureCount>0) {
				this.ModelSelector_selector_cases_0_rep37_B_reduced = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep37_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			if (this.featureCount>0) {
				this.ModelSelector_selector_cases_0_rep37_B_reduced = Bernoulli.FromLogOdds(ConstrainEqualOp<double>.LogEvidenceRatio(this.TransposedWeightSums_reduced, 0.0));
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep37_B[FeatureRange] = this.ModelSelector_selector_cases_0_rep37_B_reduced;
				this.ModelSelector_selector_cases_0_rep37_B[FeatureRange] = this.ModelSelector_selector_cases_0_rep37_B_reduced;
			}
			this.ModelSelector_selector_cases_0_uses_B[70] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep37_B, this.ModelSelector_selector_cases_0_uses_B[70]);
			this.Changed_FeatureCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount</summary>
		private void Changed_FeatureCount_FeatureValues_InstanceCount()
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange] = GaussianOpBase.PrecisionAverageConditional(this.featureValues[InstanceRange][FeatureRange], 0.0);
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisionRates_rep_B[FeatureRange], this.WeightPrecisionRates_rep_B_toDef[FeatureRange]);
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_rep_B_toDef[FeatureRange]);
			}
			this.Changed_FeatureCount_FeatureValues_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount and numberOfIterationsDecreased and WeightPrecisionRateConstraints and must reset on changes to ClassCount and Labels and WeightConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9(bool initialise)
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone&&((!initialise)||this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
				this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gamma>(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_rep_F_marginal[FeatureRange]);
			}
			this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone = true;
			this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and FeatureValues and InstanceCount and WeightPrecisionRateConstraints</summary>
		private void Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints()
		{
			if (this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.WeightPrecisionRates_use_B[FeatureRange]);
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_use_B[FeatureRange]);
			}
			this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and InstanceCount</summary>
		private void Changed_FeatureCount_InstanceCount()
		{
			if (this.Changed_FeatureCount_InstanceCount_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_B[FeatureRange] = new DistributionStructArray<Gamma,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_rep_B[FeatureRange][InstanceRange] = Gamma.Uniform();
				}
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_rep_F[FeatureRange] = new DistributionStructArray<Gamma,double>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_rep_F[FeatureRange][InstanceRange] = Gamma.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep11_rep_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.ModelSelector_selector_cases_0_rep11_rep_B[InstanceRange][FeatureRange] = Bernoulli.Uniform();
				}
			}
			this.Changed_FeatureCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and numberOfIterationsDecreased and must reset on changes to ClassCount and FeatureValues and InstanceCount and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2(bool initialise)
		{
			if (this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isDone&&((!initialise)||this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_F[FeatureRange] = Gamma.Uniform();
				this.WeightPrecisions_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.WeightPrecisions_F[FeatureRange]);
				this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.WeightPrecisions_F[FeatureRange]);
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_F[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = default(Gamma);
				this.SharedWeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced);
				this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
				this.CommonWeightPrecision_rep_F[FeatureRange] = Gamma.Uniform();
				this.CommonWeightPrecision_rep_B[FeatureRange] = Gamma.Uniform();
				this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
				this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = default(Gamma);
			}
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isDone = true;
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightPrecisionRateConstraints</summary>
		private void Changed_FeatureCount_WeightPrecisionRateConstraints()
		{
			if (this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][0], this.weightPrecisionRateConstraints[FeatureRange]);
			}
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_isDone) {
				return ;
			}
			this.FeatureScores_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.Scores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.NoisyScores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.MaxNoisyScore_rep_F_marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.MaxNoisyScore_0__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.vdouble574_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.MaxNoisyScore_rep_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.MaxNoisyScore_rep_B_toDef = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.MaxNoisyScore_rep_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScoreDeltas_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScoreDeltas_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScores_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.Scores_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.FeatureScores_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep11_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep11_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep11_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep21_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep21_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep28_uses_B = new Bernoulli[this.instanceCount][];
			this.ModelSelector_selector_cases_0_rep28_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep28_uses_B[InstanceRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep28_uses_B[InstanceRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep28_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep32_rep_uses_B = new Bernoulli[this.instanceCount][][];
			this.ModelSelector_selector_cases_0_rep32_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep32_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep32_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.vbool57 = new bool[this.instanceCount][][];
			this.ModelSelector_selector_cases_0_rep33_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep33_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep33_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.Changed_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and Labels</summary>
		private void Changed_InstanceCount_Labels()
		{
			if (this.Changed_InstanceCount_Labels_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep28_uses_B[InstanceRange][1] = Bernoulli.Uniform();
			}
			this.Changed_InstanceCount_Labels_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to ClassCount and FeatureCount and FeatureValues and InstanceCount and Labels and WeightConstraints and WeightPrecisionRateConstraints</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised)) {
				return ;
			}
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.CommonWeightPrecision_F);
			this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.CommonWeightPrecision_F);
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isInitialised = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vBernoulli6 = Bernoulli.Uniform();
			this.ModelSelector_marginal_F = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				this.ModelSelector_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_uses_B = new Bernoulli[71];
			this.ModelSelector_selector_cases_0_uses_B[68] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[67] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[66] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[63] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[62] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[61] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[59] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[58] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[57] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[56] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[55] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[54] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[52] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[51] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[49] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[48] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[47] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[46] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[45] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[41] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[40] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[39] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			this.CommonWeightPrecision_F = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			this.ModelSelector_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[42] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[43] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[44] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[50] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[53] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[60] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[64] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[65] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[69] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[70] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_B = Bernoulli.Uniform();
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10_isDone = false;
					this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2_isDone = false;
					this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22_isDone = false;
				}
				this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23_isDone = false;
			}
			this.Constant();
			this.Changed_InstanceCount();
			this.Changed_InstanceCount_Labels();
			this.Changed_ClassCount_InstanceCount();
			this.Changed_ClassCount_InstanceCount_Labels();
			this.Changed_ClassCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_Labels_19(initialise);
			this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureValues_21(initialise);
			this.Changed_ClassCount();
			this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_10(initialise);
			this.Changed_FeatureCount();
			this.Changed_FeatureCount_WeightPrecisionRateConstraints();
			this.Changed_FeatureCount_InstanceCount();
			this.Changed_FeatureCount_FeatureValues_InstanceCount();
			this.Changed_FeatureCount_FeatureValues_InstanceCount_WeightPrecisionRateConstraints();
			this.Changed_ClassCount_FeatureCount();
			this.Changed_ClassCount_FeatureCount_InstanceCount();
			this.Changed_ClassCount_FeatureCount_InstanceCount_numberOfIterationsDecreased_Init_FeatureValues_Labels_15(initialise);
			this.Changed_ClassCount_FeatureCount_WeightConstraints();
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureValues_InstanceCount_Labels_4(initialise);
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureValues_InstanceCount_Labels_2(initialise);
			this.Changed_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecisionRateCons9(initialise);
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightPrecis11(initialise);
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_numberOfIterationsDecreased_WeightConstr16(initialise);
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterationsDecreased_Weigh22();
			this.Changed_ClassCount_FeatureCount_FeatureValues_InstanceCount_Labels_numberOfIterations_WeightConstrai23(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="ClassCount") {
				return this.ClassCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				return this.WeightPrecisionRateConstraints;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="ModelSelector") {
				return this.ModelSelectorMarginal();
			}
			if (variableName=="WeightPrecisionRates") {
				return this.WeightPrecisionRatesMarginal();
			}
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="WeightPrecisionRates")&&(query=="MarginalDividedByPrior")) {
				return this.WeightPrecisionRatesMarginalDividedByPrior();
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'ModelSelector' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli ModelSelectorMarginal()
		{
			return this.ModelSelector_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="ClassCount") {
				this.ClassCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				this.WeightPrecisionRateConstraints = (DistributionStructArray<Gamma,double>)value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (int[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginal()
		{
			return this.WeightPrecisionRates_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginalDividedByPrior()
		{
			return this.WeightPrecisionRates_use_B;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightsMarginalDividedByPrior()
		{
			return this.Weights_use_B;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
