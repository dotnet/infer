// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Microsoft.ML.Probabilistic.Learners.BayesPointMachineClassifierInternal
{
	public partial class CompoundSparseMulticlassBpmTrainingEvidence_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18</summary>
		public bool Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount</summary>
		public bool Changed_ClassCount_FeatureCount_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5 has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5</summary>
		public bool Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isDone;
		/// <summary>True if Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5</summary>
		public bool Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised;
		/// <summary>True if Changed_ClassCount_FeatureCount_WeightConstraints has executed. Set this to false to force re-execution of Changed_ClassCount_FeatureCount_WeightConstraints</summary>
		public bool Changed_ClassCount_FeatureCount_WeightConstraints_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_InstanceFeatureCounts has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_InstanceFeatureCounts</summary>
		public bool Changed_ClassCount_InstanceCount_InstanceFeatureCounts_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10 has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10</summary>
		public bool Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10</summary>
		public bool Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised;
		/// <summary>True if Changed_ClassCount_InstanceCount has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount</summary>
		public bool Changed_ClassCount_InstanceCount_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_Labels has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_Labels</summary>
		public bool Changed_ClassCount_InstanceCount_Labels_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13 has executed. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13</summary>
		public bool Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isDone;
		/// <summary>True if Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13 has performed initialisation. Set this to false to force re-execution of Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13</summary>
		public bool Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised;
		/// <summary>True if Changed_ClassCount has executed. Set this to false to force re-execution of Changed_ClassCount</summary>
		public bool Changed_ClassCount_isDone;
		/// <summary>True if Changed_FeatureCount has executed. Set this to false to force re-execution of Changed_FeatureCount</summary>
		public bool Changed_FeatureCount_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2 has executed. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isDone;
		/// <summary>True if Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2 has performed initialisation. Set this to false to force re-execution of Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2</summary>
		public bool Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised;
		/// <summary>True if Changed_FeatureCount_WeightPrecisionRateConstraints has executed. Set this to false to force re-execution of Changed_FeatureCount_WeightPrecisionRateConstraints</summary>
		public bool Changed_FeatureCount_WeightPrecisionRateConstraints_isDone;
		/// <summary>True if Changed_FeatureCount_ZeroFeatureValueInstanceCounts has executed. Set this to false to force re-execution of Changed_FeatureCount_ZeroFeatureValueInstanceCounts</summary>
		public bool Changed_FeatureCount_ZeroFeatureValueInstanceCounts_isDone;
		/// <summary>True if Changed_FeatureValues_InstanceCount_InstanceFeatureCounts has executed. Set this to false to force re-execution of Changed_FeatureValues_InstanceCount_InstanceFeatureCounts</summary>
		public bool Changed_FeatureValues_InstanceCount_InstanceFeatureCounts_isDone;
		/// <summary>True if Changed_InstanceCount_InstanceFeatureCounts has executed. Set this to false to force re-execution of Changed_InstanceCount_InstanceFeatureCounts</summary>
		public bool Changed_InstanceCount_InstanceFeatureCounts_isDone;
		/// <summary>True if Changed_InstanceCount has executed. Set this to false to force re-execution of Changed_InstanceCount</summary>
		public bool Changed_InstanceCount_isDone;
		/// <summary>True if Changed_InstanceCount_Labels has executed. Set this to false to force re-execution of Changed_InstanceCount_Labels</summary>
		public bool Changed_InstanceCount_Labels_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised;
		/// <summary>Field backing the ClassCount property</summary>
		private int classCount;
		public Gamma CommonWeightPrecision_F;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public Gamma CommonWeightPrecision_rep_B_toDef;
		public DistributionStructArray<Gamma,double> CommonWeightPrecision_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gamma&gt;</summary>
		public Gamma CommonWeightPrecision_rep_F_marginal;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the FeatureCount property</summary>
		private int featureCount;
		/// <summary>Field backing the FeatureIndexes property</summary>
		private int[][] featureIndexes;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> FeatureScores_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> FeatureScores_F;
		/// <summary>Field backing the FeatureValues property</summary>
		private double[][] featureValues;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> IndexedWeightPrecisionRates_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> IndexedWeights_B;
		/// <summary>Field backing the InstanceCount property</summary>
		private int instanceCount;
		/// <summary>Field backing the InstanceFeatureCounts property</summary>
		private int[] instanceFeatureCounts;
		/// <summary>Field backing the Labels property</summary>
		private int[] labels;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_0__B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> MaxNoisyScore_rep_B_toDef;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> MaxNoisyScore_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gaussian&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> MaxNoisyScore_rep_F_marginal;
		/// <summary>Message to marginal of 'ModelSelector'</summary>
		public Bernoulli ModelSelector_marginal_F;
		public Bernoulli ModelSelector_selector_B;
		public Bernoulli ModelSelector_selector_cases_0_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep10_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep10_rep_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep10_rep'</summary>
		public Bernoulli[][][] ModelSelector_selector_cases_0_rep10_rep_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep11_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep11'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep11_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep13_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep13_rep_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep15_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep15_rpt_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep15'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep15_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep16_B;
		public Bernoulli ModelSelector_selector_cases_0_rep16_rpt_B_reduced;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep23_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep23'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep23_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep28_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep35_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep35'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep35_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep39_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep39_rep_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep39_rep'</summary>
		public Bernoulli[][][] ModelSelector_selector_cases_0_rep39_rep_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep4_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep4'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep4_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep40_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep40_rep_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep43_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep44_B;
		public Bernoulli ModelSelector_selector_cases_0_rep44_B_reduced;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep5_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep6_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ModelSelector_selector_cases_0_rep6_rep_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep6_rep'</summary>
		public Bernoulli[][][] ModelSelector_selector_cases_0_rep6_rep_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_0_rep7_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0_rep7'</summary>
		public Bernoulli[][] ModelSelector_selector_cases_0_rep7_uses_B;
		/// <summary>Messages from uses of 'ModelSelector_selector_cases_0'</summary>
		public Bernoulli[] ModelSelector_selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> ModelSelector_selector_cases_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScoreDeltas_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScoreDeltas_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScores_ClassRange_ClassMaxNoisyScore_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> NoisyScores_F;
		/// <summary>Message from use of 'NoisyScores'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> NoisyScores_use_B;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Scores_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Scores_F;
		/// <summary>Buffer for GammaFromShapeAndRateOp_Laplace.LogEvidenceRatio</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_B_FeatureRange__Q;
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_F;
		/// <summary>Message from use of 'SharedWeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> SharedWeightPrecisionRates_use_B;
		/// <summary>Messages from uses of 'SharedWeightPrecisionRates_use'</summary>
		public Gamma[][] SharedWeightPrecisionRates_uses_B;
		/// <summary>Messages to uses of 'SharedWeightPrecisionRates_use'</summary>
		public Gamma[][] SharedWeightPrecisionRates_uses_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeights_F;
		/// <summary>Message from use of 'SharedWeights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeights_use_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SharedWeightsFirst_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> TransposedWeights_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> TransposedWeights_F;
		public double TransposedWeightSums_reduced;
		/// <summary>The constant 'vBernoulli7'</summary>
		public Bernoulli vBernoulli7;
		/// <summary>The constant 'vbool62'</summary>
		public bool[][][] vbool62;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> vdouble650_B;
		/// <summary>Field backing the WeightConstraints property</summary>
		private DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> weightConstraints;
		/// <summary>Field backing the WeightPrecisionRateConstraints property</summary>
		private DistributionStructArray<Gamma,double> weightPrecisionRateConstraints;
		public Gamma WeightPrecisionRateRates_F_reduced;
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_B;
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_F;
		/// <summary>Message to marginal of 'WeightPrecisionRates_depth0'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_depth0_marginal_F;
		/// <summary>Messages from uses of 'WeightPrecisionRates_depth0'</summary>
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_depth0_uses_B;
		/// <summary>Messages to uses of 'WeightPrecisionRates_depth0'</summary>
		public DistributionStructArray<Gamma,double>[] WeightPrecisionRates_depth0_uses_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisionRates_FeatureIndexes_F;
		/// <summary>Message to marginal of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_marginal_F;
		public Gamma WeightPrecisionRates_rpt_B_reduced;
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_rpt_F;
		/// <summary>Message from use of 'WeightPrecisionRates'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRates_use_B;
		/// <summary>Messages from uses of 'WeightPrecisionRates_use'</summary>
		public Gamma[][] WeightPrecisionRates_uses_B;
		/// <summary>Messages to uses of 'WeightPrecisionRates_use'</summary>
		public Gamma[][] WeightPrecisionRates_uses_F;
		/// <summary>Buffer for GammaRatioOp_Laplace.LogEvidenceRatio</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_B_FeatureRange__Q;
		public DistributionStructArray<Gamma,double> WeightPrecisions_F;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisions_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_rep_B_toDef;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> WeightPrecisions_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Gamma&gt;</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisions_rep_F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth0_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth1_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth1_F;
		/// <summary>Buffer for JaggedSubarrayOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, Gaussian, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_depth1_F_ClassRange__marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Weights_FeatureIndexes_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> Weights_FeatureIndexes_F;
		/// <summary>Message to marginal of 'Weights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_marginal_F;
		/// <summary>Message from use of 'Weights'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Weights_use_B;
		/// <summary>Messages from uses of 'Weights_use'</summary>
		public Gaussian[][][] Weights_uses_B;
		/// <summary>Messages to uses of 'Weights_use'</summary>
		public Gaussian[][][] Weights_uses_F;
		public double Zero_reduced;
		/// <summary>Field backing the ZeroFeatureValueInstanceCounts property</summary>
		private double[] zeroFeatureValueInstanceCounts;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'ClassCount'</summary>
		public int ClassCount
		{
			get {
				return this.classCount;
			}
			set {
				if (this.classCount!=value) {
					this.classCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isDone = false;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_isDone = false;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureCount'</summary>
		public int FeatureCount
		{
			get {
				return this.featureCount;
			}
			set {
				if (this.featureCount!=value) {
					this.featureCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = false;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
					this.Changed_FeatureCount_isDone = false;
					this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = false;
					this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_isDone = false;
					this.Changed_ClassCount_FeatureCount_isDone = false;
					this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isDone = false;
					this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'FeatureIndexes'</summary>
		public int[][] FeatureIndexes
		{
			get {
				return this.featureIndexes;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureIndexes\'");
				}
				this.featureIndexes = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'FeatureValues'</summary>
		public double[][] FeatureValues
		{
			get {
				return this.featureValues;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'FeatureValues\'");
				}
				this.featureValues = value;
				this.numberOfIterationsDone = 0;
				this.Changed_FeatureValues_InstanceCount_InstanceFeatureCounts_isDone = false;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'InstanceCount'</summary>
		public int InstanceCount
		{
			get {
				return this.instanceCount;
			}
			set {
				if (this.instanceCount!=value) {
					this.instanceCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_InstanceCount_isDone = false;
					this.Changed_InstanceCount_Labels_isDone = false;
					this.Changed_InstanceCount_InstanceFeatureCounts_isDone = false;
					this.Changed_FeatureValues_InstanceCount_InstanceFeatureCounts_isDone = false;
					this.Changed_ClassCount_InstanceCount_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_isDone = false;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isDone = false;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_isDone = false;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
					this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'InstanceFeatureCounts'</summary>
		public int[] InstanceFeatureCounts
		{
			get {
				return this.instanceFeatureCounts;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'InstanceFeatureCounts\'");
				}
				this.instanceFeatureCounts = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InstanceCount_InstanceFeatureCounts_isDone = false;
				this.Changed_FeatureValues_InstanceCount_InstanceFeatureCounts_isDone = false;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_isDone = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Labels'</summary>
		public int[] Labels
		{
			get {
				return this.labels;
			}
			set {
				if ((value!=null)&&(value.Length!=this.instanceCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.instanceCount)+" was expected for variable \'Labels\'");
				}
				this.labels = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InstanceCount_Labels_isDone = false;
				this.Changed_ClassCount_InstanceCount_Labels_isDone = false;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isDone = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'WeightConstraints'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightConstraints
		{
			get {
				return this.weightConstraints;
			}
			set {
				this.weightConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'WeightPrecisionRateConstraints'</summary>
		public DistributionStructArray<Gamma,double> WeightPrecisionRateConstraints
		{
			get {
				return this.weightPrecisionRateConstraints;
			}
			set {
				this.weightPrecisionRateConstraints = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
				this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ZeroFeatureValueInstanceCounts'</summary>
		public double[] ZeroFeatureValueInstanceCounts
		{
			get {
				return this.zeroFeatureValueInstanceCounts;
			}
			set {
				if ((value!=null)&&(value.Length!=this.featureCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.featureCount)+" was expected for variable \'ZeroFeatureValueInstanceCounts\'");
				}
				this.zeroFeatureValueInstanceCounts = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = false;
				this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = false;
				this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_isDone = false;
				this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = false;
				this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = false;
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of ClassCount</summary>
		private void Changed_ClassCount()
		{
			if (this.Changed_ClassCount_isDone) {
				return ;
			}
			this.SharedWeights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.SharedWeights_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.SharedWeightsFirst_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_uses_F = new Gaussian[this.classCount][][];
			this.Weights_uses_B = new Gaussian[this.classCount][][];
			this.Weights_depth1_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_depth1_F_ClassRange__marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Weights_FeatureIndexes_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.classCount);
			this.Weights_FeatureIndexes_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.classCount);
			this.Weights_depth1_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.ModelSelector_selector_cases_0_rep6_rep_uses_B = new Bernoulli[this.classCount][][];
			this.ModelSelector_selector_cases_0_rep6_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.classCount);
			this.ModelSelector_selector_cases_0_rep6_B = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep6_B[ClassRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep10_rep_uses_B = new Bernoulli[this.classCount][][];
			this.ModelSelector_selector_cases_0_rep10_B = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			this.Weights_depth0_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.ModelSelector_selector_cases_0_rep10_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.classCount);
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep10_B[ClassRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep23_uses_B = new Bernoulli[this.classCount][];
			this.ModelSelector_selector_cases_0_rep23_B = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep23_uses_B[ClassRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep23_uses_B[ClassRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep23_uses_B[ClassRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep23_B[ClassRange] = Bernoulli.Uniform();
			}
			this.Weights_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
			this.Changed_ClassCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount</summary>
		private void Changed_ClassCount_FeatureCount()
		{
			if (this.Changed_ClassCount_FeatureCount_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_rep_F[FeatureRange] = new DistributionStructArray<Gamma,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = Gamma.Uniform();
				}
				this.WeightPrecisions_rep_B[FeatureRange] = new DistributionStructArray<Gamma,double>(this.classCount);
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.SharedWeights_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.SharedWeights_F[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.SharedWeights_use_B[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				this.SharedWeightsFirst_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.SharedWeightsFirst_F[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_use_B[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.TransposedWeights_F[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.TransposedWeights_F[FeatureRange][ClassRange] = Gaussian.Uniform();
				}
				this.TransposedWeights_B[FeatureRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.TransposedWeights_B[FeatureRange][ClassRange] = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_F[ClassRange][_iv] = Gaussian.Uniform();
				}
				this.Weights_uses_F[ClassRange] = new Gaussian[this.featureCount][];
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_F[ClassRange][_iv] = new Gaussian[2];
					this.Weights_uses_F[ClassRange][_iv][1] = Gaussian.Uniform();
					this.Weights_uses_F[ClassRange][_iv][0] = Gaussian.Uniform();
				}
				this.Weights_uses_B[ClassRange] = new Gaussian[this.featureCount][];
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_B[ClassRange][_iv] = new Gaussian[2];
					this.Weights_uses_B[ClassRange][_iv][0] = Gaussian.Uniform();
					this.Weights_uses_B[ClassRange][_iv][1] = Gaussian.Uniform();
				}
				this.Weights_depth1_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_depth1_F[ClassRange][_iv] = Gaussian.Uniform();
				}
				this.Weights_depth1_B[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_depth1_B[ClassRange][_iv] = Gaussian.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep6_rep_uses_B[ClassRange] = new Bernoulli[this.featureCount][];
				this.ModelSelector_selector_cases_0_rep6_rep_B[ClassRange] = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep6_rep_uses_B[ClassRange][FeatureRange] = new Bernoulli[2];
					this.ModelSelector_selector_cases_0_rep6_rep_uses_B[ClassRange][FeatureRange][1] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep6_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep6_rep_B[ClassRange][FeatureRange] = Bernoulli.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange] = new Bernoulli[this.featureCount][];
				this.ModelSelector_selector_cases_0_rep10_rep_B[ClassRange] = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange][FeatureRange] = new Bernoulli[3];
					this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange][FeatureRange][1] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange][FeatureRange][2] = Bernoulli.Uniform();
					this.ModelSelector_selector_cases_0_rep10_rep_B[ClassRange][FeatureRange] = Bernoulli.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_depth0_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_depth0_F[ClassRange][_iv] = Gaussian.Uniform();
				}
				this.Weights_marginal_F[ClassRange] = new DistributionStructArray<Gaussian,double>(this.featureCount);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_marginal_F[ClassRange][_iv] = Gaussian.Uniform();
				}
			}
			this.Changed_ClassCount_FeatureCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and FeatureIndexes and FeatureValues and InstanceCount and InstanceFeatureCounts and Labels and numberOfIterations and WeightConstraints and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18(int numberOfIterations)
		{
			if (this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone) {
				return ;
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = GammaFromShapeAndRateOp_Laplace.Q(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced);
					this.SharedWeightPrecisionRates_F[FeatureRange] = GammaFromShapeAndRateOp_Laplace.SampleAverageConditional(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]);
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 0, this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.CommonWeightPrecision_rep_B[FeatureRange] = GammaRatioOp_Laplace.AAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
				}
				this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDef<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_rep_B_toDef);
				this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
					this.WeightPrecisions_F[FeatureRange] = GammaRatioOp_Laplace.RatioAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.Marginal<Gamma>(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_rep_F_marginal[FeatureRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.WeightPrecisions_rep_F[FeatureRange][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.WeightPrecisions_rep_B[FeatureRange][ClassRange], this.WeightPrecisions_rep_F_marginal[FeatureRange], ClassRange, this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
						this.SharedWeights_F[ClassRange][FeatureRange] = GaussianOp.SampleAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], 0.0, this.WeightPrecisions_rep_F[FeatureRange][ClassRange], this.WeightPrecisions_rep_B[FeatureRange][ClassRange]);
						this.SharedWeightsFirst_F[ClassRange][FeatureRange] = SequentialCopyOp.FirstAverageConditional<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.Weights_use_B[ClassRange][FeatureRange], this.SharedWeightsFirst_F[ClassRange][FeatureRange]);
						this.TransposedWeights_F[FeatureRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.TransposedWeights_F[FeatureRange][ClassRange], this.SharedWeightsFirst_F[ClassRange][FeatureRange]);
					}
					this.TransposedWeights_B[FeatureRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(0.0, this.TransposedWeights_F[FeatureRange], this.TransposedWeights_B[FeatureRange]);
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Weights_F[ClassRange][FeatureRange] = SequentialCopyOp.SecondAverageConditional<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_F[ClassRange][FeatureRange]);
						this.Weights_uses_F[ClassRange][FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], 1, this.Weights_uses_F[ClassRange][FeatureRange][1]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int _iv = 0; _iv<this.featureCount; _iv++) {
						this.Weights_depth1_F[ClassRange][_iv] = ArrayHelper.SetTo<Gaussian>(this.Weights_depth1_F[ClassRange][_iv], this.Weights_uses_F[ClassRange][_iv][1]);
					}
					this.Weights_depth1_F_ClassRange__marginal[ClassRange] = JaggedSubarrayOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.Weights_depth1_F[ClassRange], this.Weights_FeatureIndexes_B[ClassRange], this.featureIndexes, this.Weights_depth1_F_ClassRange__marginal[ClassRange]);
				}
				for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
								if (ClassMaxNoisyScore!=ClassRange) {
									this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.vdouble650_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								}
							}
						}
						this.Weights_FeatureIndexes_F[ClassRange][InstanceRange] = JaggedSubarrayOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.IndexedWeights_B[InstanceRange][ClassRange], this.Weights_depth1_F[ClassRange], this.Weights_depth1_F_ClassRange__marginal[ClassRange], this.featureIndexes, InstanceRange, this.Weights_FeatureIndexes_F[ClassRange][InstanceRange]);
						for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
							this.FeatureScores_F[InstanceRange][ClassRange][InstanceFeatureRanges] = GaussianProductOpBase.ProductAverageConditional(this.featureValues[InstanceRange][InstanceFeatureRanges], this.Weights_FeatureIndexes_F[ClassRange][InstanceRange][InstanceFeatureRanges]);
						}
						this.Scores_F[InstanceRange][ClassRange] = FastSumOp.SumAverageConditional(this.FeatureScores_F[InstanceRange][ClassRange]);
						this.NoisyScores_F[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(this.Scores_F[InstanceRange][ClassRange], 1.0);
					}
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDef<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassMaxNoisyScore], this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore]);
							this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.Marginal<Gaussian>(this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore]);
						}
					}
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
							if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
								this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore], ClassRange, this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
								if (ClassMaxNoisyScore!=ClassRange) {
									this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.AAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange]);
									this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.BAverageConditional(this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
									this.vdouble650_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = DoublePlusOp.SumAverageConditional(this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange], this.NoisyScores_F[InstanceRange][ClassRange]);
								}
								this.NoisyScores_use_B[InstanceRange][ClassRange] = ArrayHelper.SetTo<Gaussian>(this.NoisyScores_use_B[InstanceRange][ClassRange], this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange]);
							}
						}
						this.Scores_B[InstanceRange][ClassRange] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.NoisyScores_use_B[InstanceRange][ClassRange], 1.0);
						this.FeatureScores_B[InstanceRange][ClassRange] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(this.Scores_B[InstanceRange][ClassRange], this.Scores_F[InstanceRange][ClassRange], this.FeatureScores_F[InstanceRange][ClassRange], this.FeatureScores_B[InstanceRange][ClassRange]);
						for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
							this.IndexedWeights_B[InstanceRange][ClassRange][InstanceFeatureRanges] = GaussianProductOpBase.BAverageConditional(this.FeatureScores_B[InstanceRange][ClassRange][InstanceFeatureRanges], this.featureValues[InstanceRange][InstanceFeatureRanges]);
						}
						this.Weights_depth1_F_ClassRange__marginal[ClassRange] = JaggedSubarrayOp<double>.MarginalIncrement<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.Weights_depth1_F_ClassRange__marginal[ClassRange], this.Weights_FeatureIndexes_F[ClassRange][InstanceRange], this.IndexedWeights_B[InstanceRange][ClassRange], this.featureIndexes, InstanceRange);
						this.Weights_FeatureIndexes_B[ClassRange][InstanceRange] = ArrayHelper.SetTo<DistributionStructArray<Gaussian,double>>(this.Weights_FeatureIndexes_B[ClassRange][InstanceRange], this.IndexedWeights_B[InstanceRange][ClassRange]);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_depth1_B[ClassRange] = JaggedSubarrayOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>,DistributionStructArray<Gaussian,double>>(this.Weights_FeatureIndexes_B[ClassRange], this.featureIndexes, this.Weights_depth1_B[ClassRange]);
					for(int _iv = 0; _iv<this.featureCount; _iv++) {
						this.Weights_uses_B[ClassRange][_iv][1] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][_iv][1], this.Weights_depth1_B[ClassRange][_iv]);
					}
				}
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
						this.Weights_use_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_use_B[ClassRange][FeatureRange]);
						this.SharedWeights_use_B[ClassRange][FeatureRange] = SequentialCopyOp.ValueAverageConditional<Gaussian>(this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_use_B[ClassRange][FeatureRange], this.SharedWeights_use_B[ClassRange][FeatureRange]);
						this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = GaussianOp.PrecisionAverageConditional(this.SharedWeights_use_B[ClassRange][FeatureRange], Gaussian.PointMass(0.0), this.WeightPrecisions_rep_F[FeatureRange][ClassRange]);
					}
					this.WeightPrecisions_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDef<Gamma>(this.WeightPrecisions_rep_B[FeatureRange], this.WeightPrecisions_rep_B_toDef[FeatureRange]);
					this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = GammaRatioOp_Laplace.Q(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0]);
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = GammaRatioOp_Laplace.BAverageConditional(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]);
					this.SharedWeightPrecisionRates_uses_F[FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], 1, this.SharedWeightPrecisionRates_uses_F[FeatureRange][1]);
					this.WeightPrecisionRates_uses_F[FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], 0, this.WeightPrecisionRates_uses_F[FeatureRange][0]);
					this.WeightPrecisionRates_depth0_F[FeatureRange] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_depth0_F[FeatureRange], this.WeightPrecisionRates_uses_F[FeatureRange][0]);
				}
				this.WeightPrecisionRates_depth0_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B, this.WeightPrecisionRates_depth0_F, 1, this.WeightPrecisionRates_depth0_uses_F[1]);
				this.WeightPrecisionRates_depth0_marginal_F = JaggedSubarrayWithMarginalOp<double>.MarginalAverageConditional<DistributionStructArray<Gamma,double>,Gamma,DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_F[1], this.IndexedWeightPrecisionRates_B, this.featureIndexes, this.WeightPrecisionRates_depth0_marginal_F);
				this.WeightPrecisionRates_depth0_uses_B[1] = JaggedSubarrayWithMarginalOp<double>.ArrayAverageConditional<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_F[1], this.WeightPrecisionRates_depth0_marginal_F, this.WeightPrecisionRates_depth0_uses_B[1]);
				this.WeightPrecisionRates_depth0_B = ReplicateOp_NoDivide.DefAverageConditional<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B, this.WeightPrecisionRates_depth0_B);
				for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
					this.WeightPrecisionRates_uses_B[FeatureRange][0] = ArrayHelper.SetTo<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange][0], this.WeightPrecisionRates_depth0_B[FeatureRange]);
					this.WeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.WeightPrecisionRates_use_B[FeatureRange]);
					this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = ArrayHelper.SetTo<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange][1], this.WeightPrecisionRates_use_B[FeatureRange]);
					this.SharedWeightPrecisionRates_use_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_use_B[FeatureRange]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.WeightPrecisionRates_depth0_marginal_F = JaggedSubarrayWithMarginalOp<double>.MarginalIncrementArray<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_F[1], this.WeightPrecisionRates_depth0_uses_B[1], this.WeightPrecisionRates_depth0_marginal_F);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][0] = Bernoulli.FromLogOdds(GammaFromShapeAndRateOp_Laplace.LogEvidenceRatio(this.SharedWeightPrecisionRates_use_B[FeatureRange], 1.0, this.WeightPrecisionRateRates_F_reduced, this.SharedWeightPrecisionRates_F[FeatureRange], this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.SharedWeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep4_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep4_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[16] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep4_B, this.ModelSelector_selector_cases_0_uses_B[16]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep5_B[FeatureRange] = Bernoulli.FromLogOdds(GammaRatioOp_Laplace.LogEvidenceRatio(this.WeightPrecisions_rep_B_toDef[FeatureRange], this.CommonWeightPrecision_rep_F[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][0], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_B_FeatureRange__Q[FeatureRange]));
			}
			this.ModelSelector_selector_cases_0_uses_B[20] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep5_B, this.ModelSelector_selector_cases_0_uses_B[20]);
			this.ModelSelector_selector_cases_0_uses_B[22] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.CommonWeightPrecision_rep_B, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F));
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep6_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.FromLogOdds(GaussianOp.LogEvidenceRatio(this.SharedWeights_use_B[ClassRange][FeatureRange], 0.0, this.WeightPrecisions_rep_F[FeatureRange][ClassRange], this.SharedWeights_F[ClassRange][FeatureRange], this.WeightPrecisions_rep_B[FeatureRange][ClassRange]));
					this.ModelSelector_selector_cases_0_rep6_rep_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep6_rep_uses_B[ClassRange][FeatureRange], this.ModelSelector_selector_cases_0_rep6_rep_B[ClassRange][FeatureRange]);
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep6_B[ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep6_rep_B[ClassRange], this.ModelSelector_selector_cases_0_rep6_B[ClassRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[23] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep6_B, this.ModelSelector_selector_cases_0_uses_B[23]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisions_rep_B[FeatureRange], this.WeightPrecisions_F[FeatureRange], this.WeightPrecisions_rep_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep7_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep7_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[24] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep7_B, this.ModelSelector_selector_cases_0_uses_B[24]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_uses_F[ClassRange][FeatureRange][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], 0, this.Weights_uses_F[ClassRange][FeatureRange][0]);
					this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange][FeatureRange][0] = Bernoulli.FromLogOdds(SequentialCopyOp.LogEvidenceRatio<Gaussian>(this.SharedWeights_F[ClassRange][FeatureRange], this.TransposedWeights_B[FeatureRange][ClassRange], this.Weights_use_B[ClassRange][FeatureRange]));
					this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange][FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.Weights_uses_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], this.Weights_uses_F[ClassRange][FeatureRange]));
					this.ModelSelector_selector_cases_0_rep10_rep_B[ClassRange][FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep10_rep_uses_B[ClassRange][FeatureRange], this.ModelSelector_selector_cases_0_rep10_rep_B[ClassRange][FeatureRange]);
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep10_B[ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep10_rep_B[ClassRange], this.ModelSelector_selector_cases_0_rep10_B[ClassRange]);
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_depth0_F[ClassRange][_iv] = ArrayHelper.SetTo<Gaussian>(this.Weights_depth0_F[ClassRange][_iv], this.Weights_uses_F[ClassRange][_iv][0]);
				}
			}
			this.ModelSelector_selector_cases_0_uses_B[31] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep10_B, this.ModelSelector_selector_cases_0_uses_B[31]);
			this.ModelSelector_selector_cases_0_uses_B[37] = Bernoulli.FromLogOdds(ConstrainEqualRandomOp<double[][]>.LogEvidenceRatio<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.Weights_depth0_F, this.weightConstraints));
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_F[FeatureRange][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], 1, this.WeightPrecisionRates_uses_F[FeatureRange][1]);
				this.ModelSelector_selector_cases_0_rep11_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisionRates_uses_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_uses_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep11_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep11_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep11_B[FeatureRange]);
				this.WeightPrecisionRates_rpt_F[FeatureRange] = PowerPlateOp.EnterAverageConditional<Gamma>(this.WeightPrecisionRates_rpt_B_reduced, this.WeightPrecisionRates_uses_F[FeatureRange][1], this.zeroFeatureValueInstanceCounts[FeatureRange], this.WeightPrecisionRates_rpt_F[FeatureRange]);
				this.ModelSelector_selector_cases_0_rep15_rpt_B[FeatureRange] = Bernoulli.FromLogOdds(GaussianOpBase.LogEvidenceRatio(0.0, 0.0, this.WeightPrecisionRates_rpt_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange][0] = PowerPlateOp.ValueAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep15_rpt_B[FeatureRange], this.zeroFeatureValueInstanceCounts[FeatureRange], this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange][0]);
				this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange][2] = Bernoulli.FromLogOdds(PowerPlateOp.LogEvidenceRatio<Gamma>(this.WeightPrecisionRates_rpt_B_reduced, this.WeightPrecisionRates_uses_F[FeatureRange][1], this.zeroFeatureValueInstanceCounts[FeatureRange], this.WeightPrecisionRates_rpt_F[FeatureRange]));
				this.ModelSelector_selector_cases_0_rep15_B[FeatureRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange], this.ModelSelector_selector_cases_0_rep15_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[38] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep11_B, this.ModelSelector_selector_cases_0_uses_B[38]);
			this.WeightPrecisionRates_depth0_uses_F[0] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B, this.WeightPrecisionRates_depth0_F, 0, this.WeightPrecisionRates_depth0_uses_F[0]);
			this.ModelSelector_selector_cases_0_uses_B[45] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B, this.WeightPrecisionRates_depth0_F, this.WeightPrecisionRates_depth0_uses_F));
			this.ModelSelector_selector_cases_0_uses_B[46] = Bernoulli.FromLogOdds(ConstrainEqualRandomOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_F[0], this.weightPrecisionRateConstraints));
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.WeightPrecisionRates_FeatureIndexes_F[InstanceRange] = JaggedSubarrayWithMarginalOp<double>.ItemsAverageConditional<DistributionStructArray<Gamma,double>,Gamma,DistributionStructArray<Gamma,double>>(this.IndexedWeightPrecisionRates_B[InstanceRange], this.WeightPrecisionRates_depth0_uses_F[1], this.WeightPrecisionRates_depth0_marginal_F, this.featureIndexes, InstanceRange, this.WeightPrecisionRates_FeatureIndexes_F[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[49] = Bernoulli.FromLogOdds(JaggedSubarrayWithMarginalOp<double>.LogEvidenceRatio<Gamma,DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>,DistributionStructArray<Gamma,double>>(this.IndexedWeightPrecisionRates_B, this.WeightPrecisionRates_depth0_uses_F[1], this.featureIndexes, this.WeightPrecisionRates_FeatureIndexes_F));
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.ModelSelector_selector_cases_0_rep13_rep_B[InstanceRange][InstanceFeatureRanges] = Bernoulli.FromLogOdds(GaussianOpBase.LogEvidenceRatio(this.featureValues[InstanceRange][InstanceFeatureRanges], 0.0, this.WeightPrecisionRates_FeatureIndexes_F[InstanceRange][InstanceFeatureRanges]));
				}
				this.ModelSelector_selector_cases_0_rep13_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep13_rep_B[InstanceRange], this.ModelSelector_selector_cases_0_rep13_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[51] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep13_B, this.ModelSelector_selector_cases_0_uses_B[51]);
			this.ModelSelector_selector_cases_0_uses_B[53] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep15_B, this.ModelSelector_selector_cases_0_uses_B[53]);
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.ModelSelector_selector_cases_0_rep23_uses_B[ClassRange][1] = Bernoulli.FromLogOdds(JaggedSubarrayOp<double>.LogEvidenceRatio<Gaussian,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.Weights_FeatureIndexes_B[ClassRange], this.Weights_depth1_F[ClassRange], this.featureIndexes, this.Weights_FeatureIndexes_F[ClassRange]));
				this.ModelSelector_selector_cases_0_rep23_B[ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep23_uses_B[ClassRange], this.ModelSelector_selector_cases_0_rep23_B[ClassRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[63] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep23_B, this.ModelSelector_selector_cases_0_uses_B[63]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.ModelSelector_selector_cases_0_rep35_uses_B[InstanceRange][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore], this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore], this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore]));
					}
				}
				this.ModelSelector_selector_cases_0_rep35_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep35_uses_B[InstanceRange], this.ModelSelector_selector_cases_0_rep35_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[75] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep35_B, this.ModelSelector_selector_cases_0_uses_B[75]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.ModelSelector_selector_cases_0_rep39_rep_uses_B[InstanceRange][ClassRange][0] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(true, this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange]));
							}
						}
					}
					this.ModelSelector_selector_cases_0_rep39_rep_B[InstanceRange][ClassRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep39_rep_uses_B[InstanceRange][ClassRange], this.ModelSelector_selector_cases_0_rep39_rep_B[InstanceRange][ClassRange]);
				}
				this.ModelSelector_selector_cases_0_rep39_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep39_rep_B[InstanceRange], this.ModelSelector_selector_cases_0_rep39_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[79] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep39_B, this.ModelSelector_selector_cases_0_uses_B[79]);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep43_B[FeatureRange] = Bernoulli.FromLogOdds(FastSumOp.LogEvidenceRatio(0.0, this.TransposedWeights_F[FeatureRange]));
			}
			this.ModelSelector_selector_cases_0_uses_B[84] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep43_B, this.ModelSelector_selector_cases_0_uses_B[84]);
			this.ModelSelector_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_uses_B, this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(this.ModelSelector_selector_cases_B[0], this.ModelSelector_selector_cases_0_B);
			this.ModelSelector_selector_B = CasesOp.BAverageConditional(this.ModelSelector_selector_cases_B);
			this.ModelSelector_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(this.ModelSelector_selector_B, this.vBernoulli7, this.ModelSelector_marginal_F);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_marginal_F[ClassRange][FeatureRange] = DerivedVariableOp.MarginalAverageConditional<Gaussian>(this.Weights_use_B[ClassRange][FeatureRange], this.Weights_F[ClassRange][FeatureRange], this.Weights_marginal_F[ClassRange][FeatureRange]);
				}
				this.WeightPrecisionRates_marginal_F[FeatureRange] = DerivedVariableOp.MarginalAverageConditional<Gamma>(this.WeightPrecisionRates_use_B[FeatureRange], this.SharedWeightPrecisionRates_uses_F[FeatureRange][1], this.WeightPrecisionRates_marginal_F[FeatureRange]);
			}
			this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and numberOfIterationsDecreased and must reset on changes to FeatureIndexes and FeatureValues and InstanceCount and InstanceFeatureCounts and Labels and WeightConstraints and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5(bool initialise)
		{
			if (this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isDone&&((!initialise)||this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.WeightPrecisions_rep_B[FeatureRange][ClassRange] = Gamma.Uniform();
					this.SharedWeights_use_B[ClassRange][FeatureRange] = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_use_B[ClassRange][_iv] = Gaussian.Uniform();
				}
				this.Weights_depth1_F_ClassRange__marginal[ClassRange] = JaggedSubarrayOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.Weights_depth1_F[ClassRange]);
			}
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isDone = true;
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and FeatureCount and WeightConstraints</summary>
		private void Changed_ClassCount_FeatureCount_WeightConstraints()
		{
			if (this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				for(int _iv = 0; _iv<this.featureCount; _iv++) {
					this.Weights_uses_B[ClassRange][_iv][0] = ArrayHelper.SetTo<Gaussian>(this.Weights_uses_B[ClassRange][_iv][0], this.weightConstraints[ClassRange][_iv]);
				}
			}
			this.Changed_ClassCount_FeatureCount_WeightConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount</summary>
		private void Changed_ClassCount_InstanceCount()
		{
			if (this.Changed_ClassCount_InstanceCount_isDone) {
				return ;
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_FeatureIndexes_B[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.NoisyScores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.NoisyScores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
			}
			for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
				this.Weights_FeatureIndexes_F[ClassRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.IndexedWeights_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				this.FeatureScores_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				this.Scores_F[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_F[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				this.NoisyScores_use_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				this.Scores_B[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Scores_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				this.FeatureScores_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				this.ModelSelector_selector_cases_0_rep39_rep_uses_B[InstanceRange] = new Bernoulli[this.classCount][];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep39_rep_uses_B[InstanceRange][ClassRange] = new Bernoulli[2];
					this.ModelSelector_selector_cases_0_rep39_rep_uses_B[InstanceRange][ClassRange][1] = Bernoulli.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep39_rep_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.classCount);
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep39_rep_B[InstanceRange][ClassRange] = Bernoulli.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep40_rep_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.classCount);
			}
			this.Changed_ClassCount_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and InstanceFeatureCounts</summary>
		private void Changed_ClassCount_InstanceCount_InstanceFeatureCounts()
		{
			if (this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.Weights_FeatureIndexes_B[ClassRange][InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					this.Weights_FeatureIndexes_F[ClassRange][InstanceRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.Weights_FeatureIndexes_F[ClassRange][InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
					this.IndexedWeights_B[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					this.FeatureScores_F[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.FeatureScores_F[InstanceRange][ClassRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
					this.FeatureScores_B[InstanceRange][ClassRange] = new DistributionStructArray<Gaussian,double>(this.instanceFeatureCounts[InstanceRange]);
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.FeatureScores_B[InstanceRange][ClassRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and InstanceFeatureCounts and numberOfIterationsDecreased and must reset on changes to FeatureCount and FeatureIndexes and FeatureValues and Labels and WeightConstraints and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10(bool initialise)
		{
			if (this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isDone&&((!initialise)||this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
						this.Weights_FeatureIndexes_B[ClassRange][InstanceRange][InstanceFeatureRanges] = Gaussian.Uniform();
						this.IndexedWeights_B[InstanceRange][ClassRange][InstanceFeatureRanges] = Gaussian.Uniform();
					}
				}
			}
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isDone = true;
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and Labels</summary>
		private void Changed_ClassCount_InstanceCount_Labels()
		{
			if (this.Changed_ClassCount_InstanceCount_Labels_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.MaxNoisyScore_0__B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.MaxNoisyScore_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
					}
				}
				this.vdouble650_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.vdouble650_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				this.MaxNoisyScore_rep_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.MaxNoisyScore_rep_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
					}
				}
				this.MaxNoisyScore_rep_B_toDef[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_B_toDef[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore]);
					}
				}
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.NoisyScores_ClassRange_ClassMaxNoisyScore_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
					}
				}
				this.MaxNoisyScore_rep_F_marginal[InstanceRange] = new DistributionStructArray<Gaussian,double>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_F_marginal[InstanceRange][ClassMaxNoisyScore] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.NoisyScores_F[InstanceRange][ClassMaxNoisyScore]);
					}
				}
				this.MaxNoisyScore_rep_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							this.MaxNoisyScore_rep_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
						}
					}
				}
				this.NoisyScoreDeltas_F[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScoreDeltas_F[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
					}
				}
				this.NoisyScoreDeltas_B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScoreDeltas_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
					}
				}
				this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.classCount);
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore] = new DistributionStructArray<Gaussian,double>(this.classCount);
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
					}
					this.NoisyScores_use_B[InstanceRange][ClassRange] = Gaussian.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep28_B[InstanceRange] = Bernoulli.FromLogOdds(DiscreteUniform.LogEvidenceRatio(this.labels[InstanceRange], this.classCount));
			}
			this.ModelSelector_selector_cases_0_uses_B[68] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep28_B, this.ModelSelector_selector_cases_0_uses_B[68]);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep39_rep_uses_B[InstanceRange][ClassRange][0] = Bernoulli.Uniform();
				}
				this.vbool62[InstanceRange] = new bool[this.classCount][];
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					this.ModelSelector_selector_cases_0_rep40_rep_B[InstanceRange][ClassRange] = Bernoulli.Uniform();
				}
				for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
					if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
						this.vbool62[InstanceRange][ClassMaxNoisyScore] = new bool[this.classCount];
					}
				}
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.vbool62[InstanceRange][ClassMaxNoisyScore][ClassRange] = true;
								this.ModelSelector_selector_cases_0_rep40_rep_B[InstanceRange][ClassRange] = Bernoulli.FromLogOdds(ConstrainEqualOp<bool>.LogEvidenceRatio(true, this.vbool62[InstanceRange][ClassMaxNoisyScore][ClassRange]));
							}
						}
					}
				}
				this.ModelSelector_selector_cases_0_rep40_B[InstanceRange] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep40_rep_B[InstanceRange], this.ModelSelector_selector_cases_0_rep40_B[InstanceRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[80] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep40_B, this.ModelSelector_selector_cases_0_uses_B[80]);
			this.Changed_ClassCount_InstanceCount_Labels_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ClassCount and InstanceCount and Labels and numberOfIterationsDecreased and must reset on changes to FeatureCount and FeatureIndexes and FeatureValues and InstanceFeatureCounts and WeightConstraints and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13(bool initialise)
		{
			if (this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isDone&&((!initialise)||this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised)) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int ClassRange = 0; ClassRange<this.classCount; ClassRange++) {
					for(int ClassMaxNoisyScore = 0; ClassMaxNoisyScore<this.classCount; ClassMaxNoisyScore++) {
						if (this.labels[InstanceRange]==ClassMaxNoisyScore) {
							if (ClassMaxNoisyScore!=ClassRange) {
								this.vdouble650_B[InstanceRange][ClassMaxNoisyScore][ClassRange] = Gaussian.Uniform();
							}
						}
					}
				}
			}
			this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isDone = true;
			this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount</summary>
		private void Changed_FeatureCount()
		{
			if (this.Changed_FeatureCount_isDone) {
				return ;
			}
			this.ModelSelector_selector_cases_0_rep4_uses_B = new Bernoulli[this.featureCount][];
			this.SharedWeightPrecisionRates_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_B_FeatureRange__Q[FeatureRange] = default(Gamma);
			}
			this.SharedWeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisionRateRates_F_reduced = default(Gamma);
			if (this.featureCount>0) {
				this.WeightPrecisionRateRates_F_reduced = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			}
			this.SharedWeightPrecisionRates_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_F[FeatureRange] = Gamma.Uniform();
			}
			this.SharedWeightPrecisionRates_uses_F = new Gamma[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_uses_F[FeatureRange] = new Gamma[2];
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][1] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_uses_F[FeatureRange][0] = Gamma.Uniform();
			}
			this.SharedWeightPrecisionRates_uses_B = new Gamma[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_uses_B[FeatureRange] = new Gamma[2];
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][0] = Gamma.Uniform();
			}
			this.WeightPrecisions_B_FeatureRange__Q = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.CommonWeightPrecision_rep_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.CommonWeightPrecision_rep_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisions_rep_B_toDef = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.WeightPrecisions_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_F[FeatureRange] = Gamma.Uniform();
			}
			this.WeightPrecisions_rep_F_marginal = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisions_rep_F_marginal[FeatureRange] = ReplicateOp_Divide.MarginalInit<Gamma>(this.WeightPrecisions_F[FeatureRange]);
			}
			this.WeightPrecisions_rep_F = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			this.WeightPrecisions_rep_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.featureCount);
			this.TransposedWeights_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			this.TransposedWeights_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.featureCount);
			this.WeightPrecisionRates_uses_F = new Gamma[this.featureCount][];
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_F[FeatureRange] = new Gamma[2];
				this.WeightPrecisionRates_uses_F[FeatureRange][0] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_uses_B = new Gamma[this.featureCount][];
			this.WeightPrecisionRates_rpt_B_reduced = default(Gamma);
			if (this.featureCount>0) {
				this.WeightPrecisionRates_rpt_B_reduced = GaussianOpBase.PrecisionAverageConditional(0.0, 0.0);
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_B[FeatureRange] = new Gamma[2];
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = Gamma.Uniform();
				this.WeightPrecisionRates_uses_B[FeatureRange][0] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_depth0_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_F[FeatureRange] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_depth0_uses_F[1] = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_uses_F[1][FeatureRange] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_depth0_uses_B[0] = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_uses_B[0][FeatureRange] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_depth0_marginal_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_marginal_F[FeatureRange] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_depth0_uses_B[1] = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_uses_B[1][FeatureRange] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_depth0_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_B[FeatureRange] = Gamma.Uniform();
			}
			this.WeightPrecisionRates_use_B = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep4_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep4_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep4_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep5_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep5_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep7_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep7_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep7_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep7_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep11_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep15_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			this.WeightPrecisionRates_rpt_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep15_uses_B = new Bernoulli[this.featureCount][];
			this.ModelSelector_selector_cases_0_rep11_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			this.ModelSelector_selector_cases_0_rep15_rpt_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep11_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep11_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep11_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.WeightPrecisionRates_uses_F[FeatureRange][1] = Gamma.Uniform();
				this.ModelSelector_selector_cases_0_rep11_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep11_B[FeatureRange] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange] = new Bernoulli[3];
				this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange][1] = Bernoulli.Uniform();
				this.WeightPrecisionRates_rpt_F[FeatureRange] = Gamma.Uniform();
				this.ModelSelector_selector_cases_0_rep15_rpt_B[FeatureRange] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep15_uses_B[FeatureRange][2] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep15_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.WeightPrecisionRates_depth0_uses_F[0] = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_depth0_uses_F[0][FeatureRange] = Gamma.Uniform();
			}
			this.Zero_reduced = default(double);
			if (this.featureCount>0) {
				this.Zero_reduced = 0.0;
			}
			this.ModelSelector_selector_cases_0_rep16_rpt_B_reduced = default(Bernoulli);
			if (this.featureCount>0) {
				this.ModelSelector_selector_cases_0_rep16_rpt_B_reduced = Bernoulli.FromLogOdds(ConstrainEqualOp<double>.LogEvidenceRatio(this.Zero_reduced, 0.0));
			}
			this.ModelSelector_selector_cases_0_rep16_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep16_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep43_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep43_B[FeatureRange] = Bernoulli.Uniform();
			}
			this.TransposedWeightSums_reduced = default(double);
			if (this.featureCount>0) {
				this.TransposedWeightSums_reduced = 0.0;
			}
			this.ModelSelector_selector_cases_0_rep44_B_reduced = default(Bernoulli);
			if (this.featureCount>0) {
				this.ModelSelector_selector_cases_0_rep44_B_reduced = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep44_B = new DistributionStructArray<Bernoulli,bool>(this.featureCount);
			if (this.featureCount>0) {
				this.ModelSelector_selector_cases_0_rep44_B_reduced = Bernoulli.FromLogOdds(ConstrainEqualOp<double>.LogEvidenceRatio(this.TransposedWeightSums_reduced, 0.0));
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.ModelSelector_selector_cases_0_rep44_B[FeatureRange] = this.ModelSelector_selector_cases_0_rep44_B_reduced;
				this.ModelSelector_selector_cases_0_rep44_B[FeatureRange] = this.ModelSelector_selector_cases_0_rep44_B_reduced;
			}
			this.ModelSelector_selector_cases_0_uses_B[85] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep44_B, this.ModelSelector_selector_cases_0_uses_B[85]);
			this.WeightPrecisionRates_marginal_F = new DistributionStructArray<Gamma,double>(this.featureCount);
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_marginal_F[FeatureRange] = Gamma.Uniform();
			}
			this.Changed_FeatureCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and numberOfIterationsDecreased and must reset on changes to ClassCount and FeatureIndexes and FeatureValues and InstanceCount and InstanceFeatureCounts and Labels and WeightConstraints and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2(bool initialise)
		{
			if (this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isDone&&((!initialise)||this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised)) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.SharedWeightPrecisionRates_use_B[FeatureRange] = Gamma.Uniform();
				this.SharedWeightPrecisionRates_uses_B[FeatureRange][1] = Gamma.Uniform();
				this.WeightPrecisions_B_FeatureRange__Q[FeatureRange] = default(Gamma);
				this.CommonWeightPrecision_rep_F[FeatureRange] = Gamma.Uniform();
				this.CommonWeightPrecision_rep_B[FeatureRange] = Gamma.Uniform();
				this.CommonWeightPrecision_rep_F[FeatureRange] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.CommonWeightPrecision_rep_B[FeatureRange], this.CommonWeightPrecision_rep_F_marginal, FeatureRange, this.CommonWeightPrecision_rep_F[FeatureRange]);
				this.WeightPrecisions_rep_B_toDef[FeatureRange] = ReplicateOp_Divide.ToDefInit<Gamma>(this.WeightPrecisions_F[FeatureRange]);
			}
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isDone = true;
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and WeightPrecisionRateConstraints</summary>
		private void Changed_FeatureCount_WeightPrecisionRateConstraints()
		{
			if (this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone) {
				return ;
			}
			this.WeightPrecisionRates_depth0_uses_B[0] = ArrayHelper.SetTo<DistributionStructArray<Gamma,double>>(this.WeightPrecisionRates_depth0_uses_B[0], this.weightPrecisionRateConstraints);
			this.Changed_FeatureCount_WeightPrecisionRateConstraints_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureCount and ZeroFeatureValueInstanceCounts</summary>
		private void Changed_FeatureCount_ZeroFeatureValueInstanceCounts()
		{
			if (this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_isDone) {
				return ;
			}
			for(int FeatureRange = 0; FeatureRange<this.featureCount; FeatureRange++) {
				this.WeightPrecisionRates_uses_B[FeatureRange][1] = PowerPlateOp.ValueAverageConditional<Gamma>(this.WeightPrecisionRates_rpt_B_reduced, this.zeroFeatureValueInstanceCounts[FeatureRange], this.WeightPrecisionRates_uses_B[FeatureRange][1]);
				this.ModelSelector_selector_cases_0_rep16_B[FeatureRange] = PowerPlateOp.ValueAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep16_rpt_B_reduced, this.zeroFeatureValueInstanceCounts[FeatureRange], this.ModelSelector_selector_cases_0_rep16_B[FeatureRange]);
			}
			this.ModelSelector_selector_cases_0_uses_B[54] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.ModelSelector_selector_cases_0_rep16_B, this.ModelSelector_selector_cases_0_uses_B[54]);
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of FeatureValues and InstanceCount and InstanceFeatureCounts</summary>
		private void Changed_FeatureValues_InstanceCount_InstanceFeatureCounts()
		{
			if (this.Changed_FeatureValues_InstanceCount_InstanceFeatureCounts_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.IndexedWeightPrecisionRates_B[InstanceRange][InstanceFeatureRanges] = GaussianOpBase.PrecisionAverageConditional(this.featureValues[InstanceRange][InstanceFeatureRanges], 0.0);
				}
			}
			this.Changed_FeatureValues_InstanceCount_InstanceFeatureCounts_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount</summary>
		private void Changed_InstanceCount()
		{
			if (this.Changed_InstanceCount_isDone) {
				return ;
			}
			this.MaxNoisyScore_0__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.vdouble650_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.MaxNoisyScore_rep_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.MaxNoisyScore_rep_B_toDef = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.NoisyScores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.IndexedWeights_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.FeatureScores_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.Scores_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.MaxNoisyScore_rep_F_marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.MaxNoisyScore_rep_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScoreDeltas_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScoreDeltas_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScores_ClassRange_ClassMaxNoisyScore_ClassRange_0__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.NoisyScores_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.Scores_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.instanceCount);
			this.FeatureScores_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.instanceCount);
			this.IndexedWeightPrecisionRates_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.instanceCount);
			this.WeightPrecisionRates_FeatureIndexes_F = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep13_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep13_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep13_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep28_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep28_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep35_uses_B = new Bernoulli[this.instanceCount][];
			this.ModelSelector_selector_cases_0_rep35_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep35_uses_B[InstanceRange] = new Bernoulli[2];
				this.ModelSelector_selector_cases_0_rep35_uses_B[InstanceRange][0] = Bernoulli.Uniform();
				this.ModelSelector_selector_cases_0_rep35_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_rep39_rep_uses_B = new Bernoulli[this.instanceCount][][];
			this.ModelSelector_selector_cases_0_rep39_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep39_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep39_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.vbool62 = new bool[this.instanceCount][][];
			this.ModelSelector_selector_cases_0_rep40_B = new DistributionStructArray<Bernoulli,bool>(this.instanceCount);
			this.ModelSelector_selector_cases_0_rep40_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.instanceCount);
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep40_B[InstanceRange] = Bernoulli.Uniform();
			}
			this.Changed_InstanceCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and InstanceFeatureCounts</summary>
		private void Changed_InstanceCount_InstanceFeatureCounts()
		{
			if (this.Changed_InstanceCount_InstanceFeatureCounts_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.IndexedWeightPrecisionRates_B[InstanceRange] = new DistributionStructArray<Gamma,double>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.IndexedWeightPrecisionRates_B[InstanceRange][InstanceFeatureRanges] = Gamma.Uniform();
				}
				this.WeightPrecisionRates_FeatureIndexes_F[InstanceRange] = new DistributionStructArray<Gamma,double>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.WeightPrecisionRates_FeatureIndexes_F[InstanceRange][InstanceFeatureRanges] = Gamma.Uniform();
				}
				this.ModelSelector_selector_cases_0_rep13_rep_B[InstanceRange] = new DistributionStructArray<Bernoulli,bool>(this.instanceFeatureCounts[InstanceRange]);
				for(int InstanceFeatureRanges = 0; InstanceFeatureRanges<this.instanceFeatureCounts[InstanceRange]; InstanceFeatureRanges++) {
					this.ModelSelector_selector_cases_0_rep13_rep_B[InstanceRange][InstanceFeatureRanges] = Bernoulli.Uniform();
				}
			}
			this.Changed_InstanceCount_InstanceFeatureCounts_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InstanceCount and Labels</summary>
		private void Changed_InstanceCount_Labels()
		{
			if (this.Changed_InstanceCount_Labels_isDone) {
				return ;
			}
			for(int InstanceRange = 0; InstanceRange<this.instanceCount; InstanceRange++) {
				this.ModelSelector_selector_cases_0_rep35_uses_B[InstanceRange][1] = Bernoulli.Uniform();
			}
			this.Changed_InstanceCount_Labels_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to ClassCount and FeatureCount and FeatureIndexes and FeatureValues and InstanceCount and InstanceFeatureCounts and Labels and WeightConstraints and WeightPrecisionRateConstraints and ZeroFeatureValueInstanceCounts</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised)) {
				return ;
			}
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Gamma>(this.CommonWeightPrecision_F);
			this.CommonWeightPrecision_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Gamma>(this.CommonWeightPrecision_F);
			this.CommonWeightPrecision_rep_F_marginal = ReplicateOp_Divide.Marginal<Gamma>(this.CommonWeightPrecision_rep_B_toDef, this.CommonWeightPrecision_F, this.CommonWeightPrecision_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isInitialised = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vBernoulli7 = Bernoulli.Uniform();
			this.ModelSelector_marginal_F = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				this.ModelSelector_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			this.ModelSelector_selector_cases_0_uses_B = new Bernoulli[86];
			this.ModelSelector_selector_cases_0_uses_B[83] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[82] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[81] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[78] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[77] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[76] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[74] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[73] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[72] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[71] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[70] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[69] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[67] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[66] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[65] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[64] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[62] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[61] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[60] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[59] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[58] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[57] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[56] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[55] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[52] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[50] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[48] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[47] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[44] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[43] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[42] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[41] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[40] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[39] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			this.CommonWeightPrecision_F = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
			this.WeightPrecisionRates_depth0_uses_F = new DistributionStructArray<Gamma,double>[2];
			this.WeightPrecisionRates_depth0_uses_B = new DistributionStructArray<Gamma,double>[2];
			this.ModelSelector_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[45] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[46] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[49] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[51] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[53] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[54] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[63] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[68] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[75] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[79] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[80] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[84] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_uses_B[85] = Bernoulli.Uniform();
			this.ModelSelector_selector_cases_0_B = Bernoulli.Uniform();
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13_isDone = false;
					this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3_isDone = false;
					this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5_isDone = false;
					this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2_isDone = false;
				}
				this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18_isDone = false;
			}
			this.Constant();
			this.Changed_InstanceCount();
			this.Changed_InstanceCount_Labels();
			this.Changed_InstanceCount_InstanceFeatureCounts();
			this.Changed_FeatureValues_InstanceCount_InstanceFeatureCounts();
			this.Changed_ClassCount();
			this.Changed_ClassCount_InstanceCount();
			this.Changed_ClassCount_InstanceCount_Labels();
			this.Changed_ClassCount_InstanceCount_Labels_numberOfIterationsDecreased_Init_FeatureCount_FeatureIndexes13(initialise);
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts();
			this.Changed_ClassCount_InstanceCount_InstanceFeatureCounts_numberOfIterationsDecreased_Init_FeatureCount10(initialise);
			this.Changed_numberOfIterationsDecreased_Init_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_Instan3(initialise);
			this.Changed_FeatureCount();
			this.Changed_FeatureCount_WeightPrecisionRateConstraints();
			this.Changed_FeatureCount_ZeroFeatureValueInstanceCounts();
			this.Changed_ClassCount_FeatureCount();
			this.Changed_ClassCount_FeatureCount_WeightConstraints();
			this.Changed_ClassCount_FeatureCount_numberOfIterationsDecreased_Init_FeatureIndexes_FeatureValues_Instan5(initialise);
			this.Changed_FeatureCount_numberOfIterationsDecreased_Init_ClassCount_FeatureIndexes_FeatureValues_Instan2(initialise);
			this.Changed_ClassCount_FeatureCount_FeatureIndexes_FeatureValues_InstanceCount_InstanceFeatureCounts_Lab18(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="InstanceCount") {
				return this.InstanceCount;
			}
			if (variableName=="FeatureCount") {
				return this.FeatureCount;
			}
			if (variableName=="InstanceFeatureCounts") {
				return this.InstanceFeatureCounts;
			}
			if (variableName=="ClassCount") {
				return this.ClassCount;
			}
			if (variableName=="FeatureValues") {
				return this.FeatureValues;
			}
			if (variableName=="FeatureIndexes") {
				return this.FeatureIndexes;
			}
			if (variableName=="WeightConstraints") {
				return this.WeightConstraints;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				return this.WeightPrecisionRateConstraints;
			}
			if (variableName=="ZeroFeatureValueInstanceCounts") {
				return this.ZeroFeatureValueInstanceCounts;
			}
			if (variableName=="Labels") {
				return this.Labels;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="ModelSelector") {
				return this.ModelSelectorMarginal();
			}
			if (variableName=="WeightPrecisionRates") {
				return this.WeightPrecisionRatesMarginal();
			}
			if (variableName=="Weights") {
				return this.WeightsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="WeightPrecisionRates")&&(query=="MarginalDividedByPrior")) {
				return this.WeightPrecisionRatesMarginalDividedByPrior();
			}
			if ((variableName=="Weights")&&(query=="MarginalDividedByPrior")) {
				return this.WeightsMarginalDividedByPrior();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'ModelSelector' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli ModelSelectorMarginal()
		{
			return this.ModelSelector_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="InstanceCount") {
				this.InstanceCount = (int)value;
				return ;
			}
			if (variableName=="FeatureCount") {
				this.FeatureCount = (int)value;
				return ;
			}
			if (variableName=="InstanceFeatureCounts") {
				this.InstanceFeatureCounts = (int[])value;
				return ;
			}
			if (variableName=="ClassCount") {
				this.ClassCount = (int)value;
				return ;
			}
			if (variableName=="FeatureValues") {
				this.FeatureValues = (double[][])value;
				return ;
			}
			if (variableName=="FeatureIndexes") {
				this.FeatureIndexes = (int[][])value;
				return ;
			}
			if (variableName=="WeightConstraints") {
				this.WeightConstraints = (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)value;
				return ;
			}
			if (variableName=="WeightPrecisionRateConstraints") {
				this.WeightPrecisionRateConstraints = (DistributionStructArray<Gamma,double>)value;
				return ;
			}
			if (variableName=="ZeroFeatureValueInstanceCounts") {
				this.ZeroFeatureValueInstanceCounts = (double[])value;
				return ;
			}
			if (variableName=="Labels") {
				this.Labels = (int[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginal()
		{
			return this.WeightPrecisionRates_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'WeightPrecisionRates' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionStructArray<Gamma,double> WeightPrecisionRatesMarginalDividedByPrior()
		{
			return this.WeightPrecisionRates_use_B;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightsMarginal()
		{
			return this.Weights_marginal_F;
		}

		/// <summary>
		/// Returns the output message (the posterior divided by the prior) for 'Weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The output message (the posterior divided by the prior)</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> WeightsMarginalDividedByPrior()
		{
			return this.Weights_use_B;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
